<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>help</title>
    <url>/2023/10/16/help/</url>
    <content><![CDATA[<h1 id="Mathjax-数学公式"><a href="#Mathjax-数学公式" class="headerlink" title="Mathjax 数学公式"></a>Mathjax 数学公式</h1><p>在文章页添加 <code>mathjax: true</code> 属性，至此，就可以在该页面中写公式了。</p>
<p>ex:<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex;" xmlns="http://www.w3.org/2000/svg" width="25.832ex" height="5.018ex" role="img" focusable="false" viewBox="0 -1509.9 11417.6 2217.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="210F" d="M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z"></path></g><g data-mml-node="mfrac" transform="translate(907,0)"><g data-mml-node="mi" transform="translate(400.5,676)"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><rect width="1127" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(2274,0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path></g><g data-mml-node="mo" transform="translate(3202.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4258.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5036.6,0)"><g data-mml-node="msup" transform="translate(384.2,676)"><g data-mml-node="mi"><path data-c="210F" d="M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z"></path></g><g data-mml-node="mn" transform="translate(646.1,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><rect width="1578" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(6854.6,0)"><g data-mml-node="mi"><path data-c="2207" d="M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z"></path></g><g data-mml-node="mn" transform="translate(866,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(8124.1,0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path></g><g data-mml-node="mo" transform="translate(8997.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(9997.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(10766.6,0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path></g></g></g></svg></mjx-container></p>
<p>快捷键</p>
<ul>
<li>ctrl+shift+}</li>
</ul>
]]></content>
      <categories>
        <category>help</category>
      </categories>
      <tags>
        <tag>statement</tag>
      </tags>
  </entry>
  <entry>
    <title>python语法</title>
    <url>/2023/10/23/python%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><h4 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if elif else"></a>if elif else</h4><p>只有if条件为假 elif为真  elif才执行</p>
<p>if为真跳过elif</p>
<p>else在if elif全为假时执行</p>
<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p><code>enumerate（）</code>函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i , item in enumerate(b):</span><br><span class="line">#</span><br><span class="line">#i赋予下标，item赋予下标对应的值</span><br></pre></td></tr></table></figure></div>



<h2 id="变量多重赋值"><a href="#变量多重赋值" class="headerlink" title="变量多重赋值"></a>变量多重赋值</h2><p>​	赋值的过程是<strong>元组</strong>解包(不用加括号，用逗号隔开就行)。</p>
<p>在被赋值的单个变量前面加上*可以实现多个数据以元组的形式赋值给一个变量。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方一</span></span><br><span class="line">a, b, *c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">#c</span></span><br><span class="line"><span class="comment">#[3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方二</span></span><br><span class="line">num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a,b,c=num[<span class="number">0</span>],num[<span class="number">1</span>],num[<span class="number">2</span>:]</span><br><span class="line"><span class="comment">#c</span></span><br><span class="line"><span class="comment">#[3, 4, 5]</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#变量交换</span></span><br><span class="line">a,b=b,a</span><br></pre></td></tr></table></figure></div>





<h2 id="局部变量全局化"><a href="#局部变量全局化" class="headerlink" title="局部变量全局化"></a>局部变量全局化</h2><p>​	当需要在函数里面<em>引用全局变量</em>时可用**global **关键字</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">global_var = <span class="number">10</span>  <span class="comment"># 全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modify_global</span>():</span><br><span class="line">    <span class="keyword">global</span> global_var  <span class="comment"># 声明变量为全局变量</span></span><br><span class="line">    global_var += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">modify_global()</span><br><span class="line"><span class="built_in">print</span>(global_var)  <span class="comment"># 输出: 11</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>





<h2 id="标准函数"><a href="#标准函数" class="headerlink" title="标准函数"></a>标准函数</h2><p>​	<strong><code>items()</code></strong> ：函数以列表返回可遍历的(键, 值) 元组。</p>
<p>将字典中的键值对以元组存储，并将众多元组存在列表中。</p>
<p>例如:   dict.items()  就把字典的key和value存到了列表的元组里。</p>
<p>​	**<code>map()</code>**：可以对列表进行一个一个的运算。比如sum(int,input().split（）)可以直接转化列表中的字符串成整数而int（）不能直接对列表操作。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><p>Python这样的语言中，其中<strong>函数参数传递的是引用而不是值的拷贝</strong>。因此，如果你修改了传递的可变对象，原始对象也会被修改。</p>
<p>例如在dfs递归里面</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">cur_nums, cur_res, index</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(cur_res) == k:</span><br><span class="line">                res.append(cur_res[:])  <span class="comment"># 创建一个新列表保存当前结果###</span></span><br><span class="line">                <span class="keyword">return</span></span><br></pre></td></tr></table></figure></div>



<h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310232238563.jpeg"
                      alt="image"
                ></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个列表，其中包含了一些子列表</span></span><br><span class="line">nested_list = [[<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>], [<span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 sorted 函数对列表进行降序排序，按照子列表的最后一个元素进行排序</span></span><br><span class="line">sorted_list = <span class="built_in">sorted</span>(nested_list, key=<span class="keyword">lambda</span> x: x[-<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出排序后的列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;降序排序后的列表:&quot;</span>, sorted_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>​	函数如果有多个返回值则为元组形式返回</p>
<h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><ul>
<li><p>binary &#x3D; 0b1010 # 二进制</p>
</li>
<li><p>octal &#x3D; 0o123 # 八进制</p>
</li>
<li><p>decimal &#x3D; 123 # 十进制</p>
</li>
<li><p>hexadecimal &#x3D; 0x2f # 十六进制</p>
<p><strong>进制转换</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310232241801.jpeg"
                      alt="image"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310232241656.jpeg"
                      alt="image"
                ></p>
</li>
</ul>
<h2 id="面向对象-类"><a href="#面向对象-类" class="headerlink" title="面向对象(类)"></a>面向对象(类)</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310232243861.jpeg"
                      alt="image"
                ></p>
<ul>
<li><p><strong><code>class Solution</code>:</strong>#创建一个类</p>
</li>
<li><p><strong><code>def sumNums()</code></strong>#创建方法</p>
</li>
<li><p><code>self</code>:#对象</p>
</li>
<li><p><code>self.res</code>#每个对象递归不会对其重复初始化</p>
</li>
</ul>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">M = 100_000  ### _用于增加辨识度</span><br></pre></td></tr></table></figure></div>





<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>想把字符串分割成每一个字符，直接把字符串转换成list</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404190837173.png"
                      alt="image-20240419083741969"
                ></p>
<h2 id="列表（顺序表）"><a href="#列表（顺序表）" class="headerlink" title="列表（顺序表）"></a>列表（顺序表）</h2><p><strong><code>list.append(value)</code></strong>:在list尾部添加指定value</p>
<p><strong><code>list.insert(index,value)</code></strong>:在指定index前插入指定value</p>
<p><strong><code>list1.extend(list2)</code></strong>:将list2加到list1后面</p>
<p><strong><code>del list[index]</code></strong>:删除指定下标</p>
<p><strong><code>list.pop(index)</code></strong>:删除方式同上，但是index默认删除list尾部的元素，返回被删除的值。</p>
<p><strong><code>list.clear()</code></strong>:清空列表</p>
<p><strong><code>list.index(value)</code></strong>:查找value的下标（索引）</p>
<p><strong>list.count(value)</strong>&#96;:统计相同元素(value)个数</p>
<p><strong><code>max(list)** **min(list)</code></strong></p>
<p><strong><code>new list=list.copy()</code></strong>:复制列表类似与list[:]</p>
<p><strong><code>list.sort(key=none,reverse=False)</code></strong>:返回排序后原来的列表</p>
<p><code>key=none</code>:默认为升序</p>
<p><code>reverse=True</code>:反转</p>
<p><code>reverse=False</code>:不反转</p>
<p><strong>sorted(type,key,reverse)</strong>:返回一个排序后新的列表</p>
<p><em>还有改，索引，切片等操作（与字符串差不多）</em></p>
<h4 id="判断列表为空"><a href="#判断列表为空" class="headerlink" title="判断列表为空"></a>判断列表为空</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;list is empty&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="列表相加"><a href="#列表相加" class="headerlink" title="列表相加"></a>列表相加</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>([<span class="number">1</span>,<span class="number">2</span>]+[<span class="number">2</span>])</span><br><span class="line"><span class="comment">#[1,2,2]</span></span><br></pre></td></tr></table></figure></div>







<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">d=&#123;1,2,3&#125;</span><br><span class="line"></span><br><span class="line">d=set()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404161520407.png"
                      alt="image-20240416152007418"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404292208740.png"
                      alt="image.png"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404161524423.png"
                      alt="image-20240416152411995"
                ></p>
<p><strong>python给定一些集合，怎么把含有相同元素都集合合在一起</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="使用add-函数"><a href="#使用add-函数" class="headerlink" title="使用add()函数"></a>使用add()函数</h4><p><code>add()</code>函数只能接收一个变量，否则会报错</p>
<p><strong>add()函数的参数只能接收可哈希数据类型</strong>，<strong>即不可变数据类型</strong>，<br>比如整型、浮点型、元组、字符串<br>添加整型数据时</p>
<h4 id="使用update-函数"><a href="#使用update-函数" class="headerlink" title="使用update()函数"></a>使用update()函数</h4><p>我们使用<code>update()</code>向集合中添加元素时，<strong>update接收的参数应该是可迭代的数据类型</strong>，比如字符串、元组、列表、集合、字典。这些都可以向集合中添加元素，但是整型、浮点型不可以。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404160858524.png"
                      alt="image-20240416085825356"
                ></p>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典的<strong>键具有唯一性</strong>（后面出现的键会覆盖掉前面相同的键）</p>
<p><strong>定义</strong>:<code>dict=&#123;key:value,key1:value1,.....&#125;</code></p>
<p><strong>dict[key]</strong>:访问字典键的值(修改)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import defaultdict</span><br><span class="line"></span><br><span class="line"># 创建一个默认值为列表的字典</span><br><span class="line">my_dict = defaultdict(list)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">value_to_check = &#x27;Alice&#x27;</span><br><span class="line"></span><br><span class="line">if value_to_check in my_dict.values() and value_to_check not in my_dict.keys():</span><br><span class="line">    print(f&quot;&#x27;&#123;value_to_check&#125;&#x27; 在值中存在，但不在键中&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(f&quot;&#x27;&#123;value_to_check&#125;&#x27; 可能在键中或不在值中&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202403231400976.png"
                      alt="image-20240323140000777"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict.get(key[, value]) </span><br></pre></td></tr></table></figure></div>

<h2 id="函数参数-1"><a href="#函数参数-1" class="headerlink" title="函数参数"></a>函数参数</h2><ul>
<li>key – 字典中要查找的键。</li>
<li>value – 可选，如果指定键的值不存在时，返回该默认值。</li>
</ul>
<p><strong>使用del语句：</strong><br>使用del语句可以删除字典中的元素。语法格式为 <code>del dict[key]</code>，其中dict表示字典，key表示要删除的键。例如，假设有一个字典dict，其中有一个键“name”，要删除这个键，可以使用以下语句： del <code>dict[“name”]</code></p>
<p><strong>使用pop()方法</strong>：<br>使用pop()方法可以删除字典中的指定元素。语法格式为 <code>dict.pop(key)</code>，其中dict表示字典，key表示要删除的键。例如，假设有一个字典dict，其中有一个键“name”，要删除这个键，可以使用以下语句： <code>dict.pop(“name”)</code></p>
<p><strong>使用popitem()方法：</strong><br>使用<code>popitem()</code>方法可以随机删除字典中的一个元素。语法格式为 <code>dict.popitem()</code>，其中dict表示字典。例如，假设有一个字典dict，要随机删除其中的一个元素，可以使用以下语句： <code>dict.popitem()</code></p>
<p><strong>使用clear()方法：</strong><br>使用<code>clear()</code>方法可以清空字典。语法格式为 <code>dict.clear()</code>，其中dict表示字典。例如，假设有一个字典dict，要清空它，可以使用以下语句： <code>dict.clear()</code></p>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404292208105.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qingjiao-ppt-prod.oss-accelerate.aliyuncs.com/187016/20230222/imm-format-convert-tgt/16769984334008.1%20%E6%96%87%E4%BB%B6%E4%B8%8E%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C/5.png"
                      alt="img"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404292210334.png"
                      alt="img"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qingjiao-ppt-prod.oss-accelerate.aliyuncs.com/187016/20230222/imm-format-convert-tgt/16769984334008.1%20%E6%96%87%E4%BB%B6%E4%B8%8E%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C/9.png"
                      alt="img"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404292211884.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404292211004.png"
                      alt="img"
                ></p>
<h3 id="写入操作"><a href="#写入操作" class="headerlink" title="写入操作"></a>写入操作</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;D:\桌面\新建 文本文档.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f.write(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure></div>

<h4 id="上下文管理语句with"><a href="#上下文管理语句with" class="headerlink" title="上下文管理语句with"></a>上下文管理语句with</h4><p>在实际开发中，读写文件应优先考虑使用上下文管理语句with，关键字with可以自动管理资源，不论因为什么原因（哪怕是代码引发了<strong>异常</strong>）跳出with块，<strong>总能保证文件被正确关闭</strong>，并且可以在代码块执行完毕后自动还原进入该代码块时的上下文，常用于文件操作、数据库连接、网络连接、多线程与多进程同步时的锁对象管理等场合。</p>
<p>1.<strong>文件操作</strong>：<code>open()</code> 函数返回的文件对象就是一个上下文管理器，它负责文件的打开和关闭。<code>with open(&quot;file.txt&quot;, &quot;r&quot;) as file:</code>就是一个典型的使用案例。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f: </span><br><span class="line">    f.write(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>2.<strong>数据库连接</strong>：在数据库操作中，使用 <code>with</code> 语句可以确保在使用完数据库连接后正确地关闭连接，防止资源泄漏。</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">import sqlite3</span><br><span class="line"></span><br><span class="line">with sqlite3.connect(&quot;mydatabase.db&quot;) as connection:</span><br><span class="line">    cursor = connection.cursor()</span><br><span class="line">    cursor.execute(&quot;SELECT * FROM mytable&quot;)</span><br></pre></td></tr></table></figure></div>

<p>3.<strong>网络连接</strong>：类似于数据库连接，确保在网络连接使用完毕后关闭连接是良好的实践。</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &#x27;https://www.example.com&#x27;</span><br><span class="line"></span><br><span class="line"># 使用Session对象作为上下文管理器</span><br><span class="line">with requests.Session() as session:</span><br><span class="line">    # 发起GET请求</span><br><span class="line">    response = session.get(url)</span><br><span class="line"></span><br><span class="line">    # 在此处处理响应</span><br><span class="line">    print(response.status_code)</span><br><span class="line">    print(response.text)</span><br><span class="line"></span><br><span class="line"># 在退出上下文时，底层连接会被关闭</span><br></pre></td></tr></table></figure></div>

<p>4.<strong>线程锁</strong>：<code>threading</code> 模块中的 <code>Lock</code> 对象可以作为上下文管理器，确保在使用完锁之后正确释放。</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">with lock:</span><br><span class="line"># 执行需要线程同步的代码</span><br></pre></td></tr></table></figure></div>

<p>5.<strong>文件锁</strong>：在多进程环境下，可以使用文件锁确保多个进程对同一文件的互斥访问。</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">import fcntl</span><br><span class="line"></span><br><span class="line">with open(&quot;file.txt&quot;, &quot;r&quot;) as file:</span><br><span class="line">    fcntl.flock(file, fcntl.LOCK_EX)</span><br><span class="line">    # 执行需要文件锁的代码</span><br><span class="line">    fcntl.flock(file, fcntl.LOCK_UN)</span><br></pre></td></tr></table></figure></div>

<p>6.<strong>时间测量</strong>：使用上下文管理器来测量代码块的执行时间。</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TimerContextManager:</span><br><span class="line">    def __enter__(self):</span><br><span class="line">        self.start_time = time.time()</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">    def __exit__(self, exc_type, exc_value, traceback):</span><br><span class="line">        self.end_time = time.time()</span><br><span class="line">        elapsed_time = self.end_time - self.start_time</span><br><span class="line">        print(f&quot;Code executed in &#123;elapsed_time&#125; seconds&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with TimerContextManager():</span><br><span class="line"># 执行需要测量时间的代码</span><br></pre></td></tr></table></figure></div>

<p>7.<strong>测试资源管理</strong>：在测试中，可以使用上下文管理器确保在测试开始和结束时正确地分配和释放资源。</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">class TestContextManager:</span><br><span class="line">    def __enter__(self):</span><br><span class="line">        # 在测试开始时分配资源</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">    def __exit__(self, exc_type, exc_value, traceback):</span><br><span class="line">        # 在测试结束时释放资源</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with TestContextManager() as test:</span><br><span class="line"># 执行测试代码</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>TEST</title>
    <url>/2023/10/16/test/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>help</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/11/17/text/</url>
    <content><![CDATA[<hr>
<hr>
]]></content>
  </entry>
  <entry>
    <title>statement</title>
    <url>/2023/10/16/statement/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p>时间限制为1 秒，时间复杂度和数据范围对应如下</p>
<p>O ( n )的算法能解决的数据范围在 n ≤<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.05ex" role="img" focusable="false" viewBox="0 -883.9 1436.6 905.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,413) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></g></svg></mjx-container></p>
<p>O ( n l o g n )的算法能解决的数据范围在 n ≤ <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.05ex" role="img" focusable="false" viewBox="0 -883.9 1436.6 905.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,413) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g></g></g></svg></mjx-container></p>
<p>O ( n <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.383ex;" xmlns="http://www.w3.org/2000/svg" width="3.287ex" height="2.398ex" role="img" focusable="false" viewBox="0 -890.8 1453 1060"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msqrt"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(0,30.8)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="600" height="60" x="853" y="770.8"></rect></g></g></g></svg></mjx-container>)的算法能解决的数据范围在 n ≤<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.05ex" role="img" focusable="false" viewBox="0 -883.9 1436.6 905.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,413) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g></svg></mjx-container></p>
<p>O ( <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.345ex" height="2.025ex" role="img" focusable="false" viewBox="0 -883.9 1036.6 894.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container> ) 的算法能解决的数据范围在 n ≤ 5000<br>O ( <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.345ex" height="2.023ex" role="img" focusable="false" viewBox="0 -883.2 1036.6 894.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,413) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></svg></mjx-container> )的算法能解决的数据范围在 n ≤ 300<br>O ( <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.279ex" height="1.641ex" role="img" focusable="false" viewBox="0 -725.5 1007.3 725.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>) 的算法能解决的数据范围在 n ≤ 25<br>O ( n ! )的算法能解决的数据范围在 n ≤ 11<br>————————————————</p>
<pre><code>                        版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。
</code></pre>
<p>原文链接：<a class="link" href="https://blog.csdn.net/hzf0701/article/details/114931836">https://blog.csdn.net/hzf0701/article/details/114931836 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404111559770.png" alt="image-20240411155941368"></p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>由于一些题目类似，所以只在第一个题目做较多的解析。</p>
<p>有详解的题在<em>精选</em>标签下。</p>
<h2 id="leetcod"><a href="#leetcod" class="headerlink" title="leetcod"></a>leetcod</h2><p>由于leetcode的题解只需要编写函数，所以leetcode上面的题就只给出函数。</p>
<h3 id="打开博客指令"><a href="#打开博客指令" class="headerlink" title="打开博客指令"></a>打开博客指令</h3><p>hexo c</p>
<p>hexo g</p>
<p>hexo d</p>
<p>hexo s</p>
]]></content>
      <categories>
        <category>help</category>
      </categories>
      <tags>
        <tag>statement</tag>
      </tags>
  </entry>
  <entry>
    <title>关于python的链表</title>
    <url>/2023/10/26/%E5%85%B3%E4%BA%8Epython%E7%9A%84%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>[TOC]</p>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>链表</tag>
        <tag>指针</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划大纲</title>
    <url>/2023/11/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="dp类型"><a href="#dp类型" class="headerlink" title="dp类型"></a>dp类型</h1><h2 id="线性dp"><a href="#线性dp" class="headerlink" title="线性dp"></a>线性dp</h2><h3 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[i]=dp[i-1]+dp[i-2]</span><br></pre></td></tr></table></figure></div>

<h2 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h2><p><a class="link" href="https://leetcode.cn/problems/integer-replacement/description/">397. 整数替换 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">d={}</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">integerReplacement</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> d.get(n):</span><br><span class="line">            <span class="keyword">return</span> d[n]</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> n%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.integerReplacement(n//<span class="number">2</span>)+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ans=<span class="built_in">min</span>(self.integerReplacement(n+<span class="number">1</span>),self.integerReplacement(n-<span class="number">1</span>))+<span class="number">1</span></span><br><span class="line">        d[n]=ans</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="背包dp"><a href="#背包dp" class="headerlink" title="背包dp"></a>背包dp</h2><h3 id="0-1背包问题（每个物品只有一个）"><a href="#0-1背包问题（每个物品只有一个）" class="headerlink" title="0/1背包问题（每个物品只有一个）"></a>0/1背包问题（每个物品只有一个）</h3><p>二维</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())<span class="comment">#n个物品，m是背包容量</span></span><br><span class="line">v=[<span class="number">0</span>]*(n+<span class="number">1</span>)<span class="comment">#重量</span></span><br><span class="line">w=[<span class="number">0</span>]*(n+<span class="number">1</span>)<span class="comment">#价值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1</span>+n):</span><br><span class="line">    v[i],w[i]=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">f=[[<span class="number">0</span>]*(m+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]<span class="comment">#dp数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">        f[i][j]=f[i-<span class="number">1</span>][j]</span><br><span class="line">        <span class="keyword">if</span> j&gt;=v[i]:</span><br><span class="line">            f[i][j]=<span class="built_in">max</span>(f[i][j],f[i-<span class="number">1</span>][j-v[i]]+w[i])</span><br><span class="line"><span class="built_in">print</span>(f[n][m])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>一维优化</p>
<p>由于<strong>f[i]只和f[i-1]有关</strong>所以可以用滚动数组</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">v=[<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line">w=[<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1</span>+n):</span><br><span class="line">    v[i],w[i]=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">f=[<span class="number">0</span>]*(m+<span class="number">1</span>) <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m,v[i]-<span class="number">1</span>,-<span class="number">1</span>):<span class="comment">#</span></span><br><span class="line">        f[j]=<span class="built_in">max</span>(f[j],f[j-v[i]]+w[i])<span class="comment">#</span></span><br><span class="line"><span class="built_in">print</span>(f[m])</span><br></pre></td></tr></table></figure></div>

<h3 id="完全背包（每个物品无限）"><a href="#完全背包（每个物品无限）" class="headerlink" title="完全背包（每个物品无限）"></a>完全背包（每个物品无限）</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">m, n = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">w = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]<span class="comment">#价值</span></span><br><span class="line">v = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]<span class="comment">#体积</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    v[i], w[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">dp = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m, <span class="number">1</span>, -<span class="number">1</span>):<span class="comment">#优化成了一维</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, j // v[i] + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> v[i] * k &lt;= j:</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j - k * v[i]] + k * w[i])</span><br><span class="line"><span class="built_in">print</span>(dp[m])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>完全背包（一维滚动数组版本）</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 优化算法</span></span><br><span class="line">m, n = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">w = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">v = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    v[i], w[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">dp = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):  <span class="comment"># 注意：这里是正序</span></span><br><span class="line">        <span class="keyword">if</span> v[i] &lt;= j:</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - v[i]] + w[i])</span><br><span class="line"><span class="built_in">print</span>(dp[m])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>01背包是与<strong>上一行</strong>作比较，为了不覆盖掉上一行的数据，要采用<strong>倒推</strong>的形式。<br>完全背包是与<strong>同一行</strong>作比较，所以前面的数据要先获得，要采用<strong>顺推</strong>的形式。</p>
<h3 id="多重背包（每个物品有限）"><a href="#多重背包（每个物品有限）" class="headerlink" title="多重背包（每个物品有限）"></a>多重背包（每个物品有限）</h3><p><a class="link" href="https://www.acwing.com/problem/content/4a">https://www.acwing.com/problem/content/4a <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">w = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">v = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">c = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    v[i], w[i], c[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">dp = [<span class="number">0</span>]*(m+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, c[i]+<span class="number">1</span>):<span class="comment">#每组能选的数量有限</span></span><br><span class="line">            <span class="keyword">if</span> k * v[i] &lt;= j:</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j],dp[j - k * v[i]] + k * w[i])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(dp[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure></div>

<p><strong>拆分成01背包</strong></p>
<h5 id="为什么要采用二进制：（略）"><a href="#为什么要采用二进制：（略）" class="headerlink" title="为什么要采用二进制：（略）"></a>为什么要采用二进制：（略）</h5><blockquote>
<p>假设有50个苹果，现在要取n个苹果，如何取？</p>
</blockquote>
<p>最简单的方法是将苹果分成6份，分别是1、2、4、8、16、19个，因为这样你会发现，无你想要多少个，都可以直接拿走某一份或多份，而不用再去一个个的数。</p>
<p>这种算法采用的是二进制的思想，把1000个拆分成 1,2,4,8,16,32,64,128,256,480<br>十个物品，他们所对应的价值就是 k * v<br>这样就从循环1000次缩小到10次，大大的压缩了时间！</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">dp = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    v, w, c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    t = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> c &gt;= t:    <span class="comment"># 还能拆</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m, v * t - <span class="number">1</span>, -<span class="number">1</span>):  <span class="comment"># 倒推 </span></span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - v * t] + t * w)</span><br><span class="line">        c -= t</span><br><span class="line">        t *= <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> c:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m, v * c - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - c * v] + c * w)</span><br><span class="line"><span class="built_in">print</span>(dp[-<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="分组背包（每组物品只能选一个）"><a href="#分组背包（每组物品只能选一个）" class="headerlink" title="分组背包（每组物品只能选一个）"></a>分组背包（每组物品只能选一个）</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">N, V = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">dp = [<span class="number">0</span>]*(V+<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    s = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    vs, ws = [], []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(s):</span><br><span class="line">        v, w = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">        vs.append(v); ws.append(w)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(V, <span class="number">0</span>, -<span class="number">1</span>):<span class="comment">#这里还是01</span></span><br><span class="line">        <span class="keyword">for</span> v, w <span class="keyword">in</span> <span class="built_in">zip</span>(vs, ws):<span class="comment">#每组背包里面选最好的</span></span><br><span class="line">            <span class="keyword">if</span> j &gt;= v: dp[j] = <span class="built_in">max</span>(dp[j], dp[j-v]+w)</span><br><span class="line"><span class="built_in">print</span>(dp[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure></div>

<h5 id="方法数"><a href="#方法数" class="headerlink" title="方法数"></a>方法数</h5><p><a class="link" href="https://leetcode.cn/problems/number-of-dice-rolls-with-target-sum/">1155. 掷骰子等于目标和的方法数 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numRollsToTarget</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span>, target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        mod = <span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span></span><br><span class="line">        f = [<span class="number">1</span>] + [<span class="number">0</span>] * target</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            g = [<span class="number">0</span>] * (target + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(target + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">if</span> j - x &gt;= <span class="number">0</span>:</span><br><span class="line">                        g[j] = (g[j] + f[j - x]) % mod</span><br><span class="line">            f = g</span><br><span class="line">        <span class="keyword">return</span> f[target]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>优化</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numRollsToTarget</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span>, target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        f=[<span class="number">1</span>]+[<span class="number">0</span>]*target</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(target,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">                f[j]=<span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,k+<span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">if</span> x&lt;=j:</span><br><span class="line">                        f[j]+=f[j-x]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> f[target]%(<span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="区间dp"><a href="#区间dp" class="headerlink" title="区间dp"></a>区间dp</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"> //mst(dp,0) 初始化DP数组  </span><br><span class="line">for(int i=1;i&lt;=n;i++)  </span><br><span class="line">{  </span><br><span class="line">    dp[i][i]=初始值  </span><br><span class="line">}  </span><br><span class="line">for(int len=2;len&lt;=n;len++)  //区间长度  </span><br><span class="line">for(int i=1;i&lt;=n;i++)        //枚举起点  </span><br><span class="line">{  </span><br><span class="line">    int j=i+len-1;           //区间终点  </span><br><span class="line">    if(j&gt;n) break;           //越界结束  </span><br><span class="line">    for(int k=i;k&lt;j;k++)     //枚举分割点，构造状态转移方程  </span><br><span class="line">    {  </span><br><span class="line">        dp[i][j]=max(dp[i][j],dp[i][k]+dp[k+1][j]+w[i][j]);  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br></pre></td></tr></table></figure></div>

<p>[P1880 <a class="link" href="https://www.luogu.com.cn/problem/P1880">NOI1995] 石子合并 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">stones = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算前缀和</span></span><br><span class="line">prefix_sum = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    prefix_sum[i] = prefix_sum[i - <span class="number">1</span>] + stones[i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):  <span class="comment"># 循环区间长度</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - length):</span><br><span class="line">        j = i + length</span><br><span class="line">        dp[i][j] = <span class="built_in">float</span>(<span class="string">'inf'</span>)</span><br><span class="line">        <span class="keyword">for</span> split <span class="keyword">in</span> <span class="built_in">range</span>(i, j):</span><br><span class="line">            dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][split] + dp[split + <span class="number">1</span>][j])</span><br><span class="line">        dp[i][j] += prefix_sum[j + <span class="number">1</span>] - prefix_sum[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dp[<span class="number">0</span>][-<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="数状dp"><a href="#数状dp" class="headerlink" title="数状dp"></a>数状dp</h2><p>[337. 打家劫舍 III - 力扣（LeetCode）</p>
<p><a class="link" href="https://leetcode.cn/problems/house-robber-iii/"> <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">60000</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">node</span>):</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">            lnode,nlnode=dfs(node.left)</span><br><span class="line">            rnode,nrnode=dfs(node.right)</span><br><span class="line">            </span><br><span class="line">            qwe=nlnode+nrnode+node.val<span class="comment">#选本节点</span></span><br><span class="line">            ewq=<span class="built_in">max</span>(lnode,nlnode)+<span class="built_in">max</span>(rnode,nrnode)<span class="comment">#选子节点</span></span><br><span class="line">            <span class="keyword">return</span> qwe,ewq</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dfs(root))</span><br></pre></td></tr></table></figure></div>

<p><a class="link" href="https://www.luogu.com.cn/problem/P1352">https://www.luogu.com.cn/problem/P1352 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">100000</span>)</span><br><span class="line"></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">happy=[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    happy.append(<span class="built_in">int</span>(<span class="built_in">input</span>()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个默认值为列表的字典</span></span><br><span class="line">tree=defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">has_parent = [<span class="literal">False</span>] * (n + <span class="number">1</span>)  <span class="comment"># 用来标记节点是否有父节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入n-1条边，构建树结构</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">    l, k = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    tree[k].append(l)</span><br><span class="line">    has_parent[l] = <span class="literal">True</span>  <span class="comment"># 标记l有父节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到根节点（没有父节点的节点）</span></span><br><span class="line">root = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> has_parent[root]:</span><br><span class="line">    root += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">node</span>):</span><br><span class="line">    res=<span class="number">0</span></span><br><span class="line">    ys=[]</span><br><span class="line">    ns=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tree[node]:</span><br><span class="line">        a,b=dfs(i)</span><br><span class="line">        ns.append(a)</span><br><span class="line">        ys.append(b)</span><br><span class="line">        res+=<span class="built_in">max</span>(a,b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    nnode=res</span><br><span class="line">    ynode=happy[node]+<span class="built_in">sum</span>(ns)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nnode,ynode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(dfs(root)))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="状态压缩动态规划"><a href="#状态压缩动态规划" class="headerlink" title="状态压缩动态规划"></a>状态压缩动态规划</h2><p><a class="link" href="https://leetcode.cn/problems/find-the-minimum-cost-array-permutation/solutions/2775272/zhuang-ya-dpcong-ji-yi-hua-sou-suo-dao-d-s9t5/">3149. 找出分数最低的排列 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findPermutation</span>(<span class="params">self, a: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        n = <span class="built_in">len</span>(a)</span><br><span class="line"><span class="meta">        @cache  </span><span class="comment"># 缓存装饰器，避免重复计算 dfs 的结果（记忆化）</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">s: <span class="built_in">int</span>, j: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">            <span class="keyword">if</span> s == (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 所有位置都填完了，最后一个位置是下标 j</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">abs</span>(j - a[<span class="number">0</span>])</span><br><span class="line">            res = inf</span><br><span class="line">            <span class="comment"># 枚举当前位置填下标 k</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">                <span class="keyword">if</span> s &gt;&gt; k &amp; <span class="number">1</span> == <span class="number">0</span>:  <span class="comment"># k 之前没填过</span></span><br><span class="line">                    res = <span class="built_in">min</span>(res, dfs(s | <span class="number">1</span> &lt;&lt; k, k) + <span class="built_in">abs</span>(j - a[k]))</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">make_ans</span>(<span class="params">s: <span class="built_in">int</span>, j: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">            ans.append(j)</span><br><span class="line">            <span class="keyword">if</span> s == (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            final_res = dfs(s, j)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">                <span class="keyword">if</span> s &gt;&gt; k &amp; <span class="number">1</span> == <span class="number">0</span> <span class="keyword">and</span> dfs(s | <span class="number">1</span> &lt;&lt; k, k) + <span class="built_in">abs</span>(j - a[k]) == final_res:</span><br><span class="line">                    make_ans(s | <span class="number">1</span> &lt;&lt; k, k)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        make_ans(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>动态规划</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def findPermutation(self, a: List[int]) -&gt; List[int]:</span><br><span class="line">        n = len(a)</span><br><span class="line">        f = [[inf] * n for _ in range(1 &lt;&lt; n)]</span><br><span class="line">        g = [[-1] * n for _ in range(1 &lt;&lt; n)]</span><br><span class="line">        for j in range(n):</span><br><span class="line">            f[-1][j] = abs(j - a[0])</span><br><span class="line">        for s in range((1 &lt;&lt; n) - 3, 0, -2):  # 注意偶数不含 0，是无效状态</span><br><span class="line">            for j in range(n):</span><br><span class="line">                if s &gt;&gt; j &amp; 1 == 0:  # 无效状态，因为 j 一定在 s 中</span><br><span class="line">                    continue</span><br><span class="line">                for k in range(1, n):#####</span><br><span class="line">                    if s &gt;&gt; k &amp; 1:  # k 之前填过</span><br><span class="line">                        continue</span><br><span class="line">                    v = f[s | 1 &lt;&lt; k][k] + abs(j - a[k])</span><br><span class="line">                    if v &lt; f[s][j]:</span><br><span class="line">                        f[s][j] = v</span><br><span class="line">                        g[s][j] = k  # 记录该状态下填了哪个数</span><br><span class="line"></span><br><span class="line">        ans = []</span><br><span class="line">        s = j = 0</span><br><span class="line">        while j &gt;= 0:</span><br><span class="line">            ans.append(j)</span><br><span class="line">            s |= 1 &lt;&lt; j</span><br><span class="line">            j = g[s][j]</span><br><span class="line">        return ans</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p>[P2704 <a class="link" href="https://www.luogu.com.cn/problem/P2704">NOI2001] 炮兵阵地 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="数位DP"><a href="#数位DP" class="headerlink" title="数位DP"></a>数位DP</h2><p><a class="link" href="https://leetcode.cn/problems/count-the-number-of-powerful-integers/description/">2999. 统计强大整数的数目 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numberOfPowerfulInt</span>(<span class="params">self, start: <span class="built_in">int</span>, finish: <span class="built_in">int</span>, limit: <span class="built_in">int</span>, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        low = <span class="built_in">str</span>(start)</span><br><span class="line">        high = <span class="built_in">str</span>(finish)</span><br><span class="line">        n = <span class="built_in">len</span>(high)</span><br><span class="line">        low = <span class="string">'0'</span> * (n - <span class="built_in">len</span>(low)) + low  <span class="comment"># 补前导零，和 high 对齐</span></span><br><span class="line">        diff = n - <span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="meta">        @cache</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i: <span class="built_in">int</span>, limit_low: <span class="built_in">bool</span>, limit_high: <span class="built_in">bool</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 第 i 个数位可以从 lo 枚举到 hi</span></span><br><span class="line">            <span class="comment"># 如果对数位还有其它约束，应当只在下面的 for 循环做限制，不应修改 lo 或 hi</span></span><br><span class="line">            lo = <span class="built_in">int</span>(low[i]) <span class="keyword">if</span> limit_low <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            hi = <span class="built_in">int</span>(high[i]) <span class="keyword">if</span> limit_high <span class="keyword">else</span> <span class="number">9</span></span><br><span class="line"></span><br><span class="line">            res = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; diff:  <span class="comment"># 枚举这个数位填什么</span></span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(lo, <span class="built_in">min</span>(hi, limit) + <span class="number">1</span>):</span><br><span class="line">                    res += dfs(i + <span class="number">1</span>, limit_low <span class="keyword">and</span> d == lo, limit_high <span class="keyword">and</span> d == hi)</span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 这个数位只能填 s[i-diff]</span></span><br><span class="line">                x = <span class="built_in">int</span>(s[i - diff])</span><br><span class="line">                <span class="keyword">if</span> lo &lt;= x &lt;= <span class="built_in">min</span>(hi, limit):</span><br><span class="line">                    res = dfs(i + <span class="number">1</span>, limit_low <span class="keyword">and</span> x == lo, limit_high <span class="keyword">and</span> x == hi)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>[P2602 <a class="link" href="https://www.luogu.com.cn/problem/P2602">ZJOI2010] 数字计数 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>



<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>[CS-Notes/notes/Leetcode 题解 - 动态规划.md at master · CyC2018/CS-Notes · GitHub](<a class="link" href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode">https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 题解 - 动态规划.md#0-1-背包)</p>
<h2 id="递推-1"><a href="#递推-1" class="headerlink" title="递推"></a>递推</h2><h5 id="dp-i-dp-i-1-dp-i-2"><a href="#dp-i-dp-i-1-dp-i-2" class="headerlink" title="dp[i]=dp[i-1]+dp[i-2]"></a>dp[i]=dp[i-1]+dp[i-2]</h5><p><strong>1.</strong></p>
<p><a class="link" href="https://leetcode.cn/problems/climbing-stairs/solutions/286022/pa-lou-ti-by-leetcode-solution/">70. 爬楼梯 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310171955438.png" alt="image-20231017122108897"></p>
<h6 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h6><p>共x阶台阶</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1900 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>只能由<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.196ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3622.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1733.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2733.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3233.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.196ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3622.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1733.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2733.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(3233.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>通过加一或者加二过来。</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="26.473ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 11700.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2177.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3233.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(3783.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4172.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4966.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(5967,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6467,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7078.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(8078.4,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(8628.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(9017.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(9811.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(10811.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(11311.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<h6 id="法一：动态规划（滚动数组）"><a href="#法一：动态规划（滚动数组）" class="headerlink" title="法一：动态规划（滚动数组）"></a>法一：动态规划（滚动数组）</h6><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>, q = <span class="number">0</span>, r = <span class="number">1</span>;#利用了 滚动数组 节省了空间</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        p = q;</span><br><span class="line">        q = r;</span><br><span class="line">        r = p + q;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>​	通过p，q的动态存储<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.196ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3622.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1733.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2733.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3233.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.196ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3622.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1733.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2733.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(3233.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>来节约空间</p>
<h6 id="法二：记忆化递归"><a href="#法二：记忆化递归" class="headerlink" title="法二：记忆化递归"></a>法二：记忆化递归</h6><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> memo[<span class="number">45</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span>{</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(*(memo+n<span class="number">-1</span>)) <span class="keyword">return</span> *(memo+n<span class="number">-1</span>);<span class="comment">//如果之前求过f（n）则在meno数组回忆</span></span><br><span class="line">    <span class="keyword">else</span> *(memo+n<span class="number">-1</span>) = climbStairs(n - <span class="number">1</span>) + climbStairs(n - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> *(memo+n<span class="number">-1</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><img lazyload="" src="/images/loading.svg" data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310172032530.png" alt="image.png">	</p>
<p>​	用了*（memo+n-1)来优化，但是差别不大。</p>
<p><strong>2.</strong></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310172141080.png" alt="image-20231017214118740"></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="26.473ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 11700.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2177.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3233.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(3783.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4172.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4966.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(5967,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6467,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7078.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(8078.4,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(8628.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(9017.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(9811.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(10811.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(11311.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span>{</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">return</span> n;<span class="comment">//如果n为前两项则通项公式不成立</span></span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>,q=<span class="number">0</span>,res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i){</span><br><span class="line">        p=q;</span><br><span class="line">        q=res;</span><br><span class="line">        res=p+q;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>



<h5 id="dp-i-max-dp-i-1-dp-i-2-nums-i-1"><a href="#dp-i-max-dp-i-1-dp-i-2-nums-i-1" class="headerlink" title="dp[i]=max(dp[i-1],dp[i-2]+nums[i-1])"></a>dp[i]=max(dp[i-1],dp[i-2]+nums[i-1])</h5><p><a class="link" href="https://leetcode.cn/problems/house-robber/">198. 打家劫舍 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img lazyload="" src="/images/loading.svg" data-src="C:\Users\小禹君\AppData\Roaming\Typora\typora-user-images\image-20231116155943125.png" alt="image-20231116155943125"></p>
<p><strong>递推</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        n=<span class="built_in">len</span>(nums)</span><br><span class="line">        dp=[<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">        dp[<span class="number">1</span>]=nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">            dp[i]=<span class="built_in">max</span>(dp[i-<span class="number">1</span>],dp[i-<span class="number">2</span>]+nums[i-<span class="number">1</span>])<span class="comment">#前者是状态滞后，后者是状态的更新（保证每次的状态都是最大）</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure></div>

<p><strong>优化</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    prev = <span class="number">0</span></span><br><span class="line">    curr = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 每次循环，计算“偷到当前房子为止的最大金额”</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="comment"># 循环开始时，curr 表示 dp[k-1]，prev 表示 dp[k-2]</span></span><br><span class="line">        <span class="comment"># dp[k] = max{ dp[k-1], dp[k-2] + i }</span></span><br><span class="line">        prev, curr = curr, <span class="built_in">max</span>(curr, prev + i)</span><br><span class="line">        <span class="comment"># 循环结束时，curr 表示 dp[k]，prev 表示 dp[k-1]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> curr</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="记忆化搜索-1"><a href="#记忆化搜索-1" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h2><h5 id="中心拓展法"><a href="#中心拓展法" class="headerlink" title="中心拓展法"></a>中心拓展法</h5><p><a class="link" href="https://leetcode.cn/problems/palindromic-substrings/description/">647. 回文子串 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202403171410643.png" alt="image-20240317140952513"></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countSubstrings</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n=<span class="built_in">len</span>(s)</span><br><span class="line">        dp=[[<span class="number">0</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        res=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):<span class="comment">#倒序遍历，如果正序，递推的条件不满足。</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,n):</span><br><span class="line">                <span class="keyword">if</span> s[i]==s[j]:</span><br><span class="line">                    <span class="keyword">if</span> j-i&lt;=<span class="number">1</span>:<span class="comment">#</span></span><br><span class="line">                        dp[i][j]=<span class="number">1</span></span><br><span class="line">                        res+=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span> dp[i+<span class="number">1</span>][j-<span class="number">1</span>]==<span class="number">1</span>:<span class="comment">#向内展开</span></span><br><span class="line">                            dp[i][j]=<span class="number">1</span></span><br><span class="line">                            res+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img lazyload="" src="/images/loading.svg" data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202403171412849.png" alt="image.png"></p>
<h5 id="dfs-dp"><a href="#dfs-dp" class="headerlink" title="dfs+dp"></a>dfs+dp</h5><p><a class="link" href="https://leetcode.cn/problems/fpTFWP/description/">LCR 112. 矩阵中的最长递增路径 - 力扣（LeetCode) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404180946759.png" alt="image-20240313220958689"></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestIncreasingPath</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix:<span class="comment">#</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span><span class="comment">#</span></span><br><span class="line">        m,n=<span class="built_in">len</span>(matrix),<span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        dp=[[<span class="number">0</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        xy=[[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,-<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>],[-<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x,y</span>):</span><br><span class="line">            <span class="keyword">if</span> dp[x][y]!=<span class="number">0</span>:<span class="comment">#</span></span><br><span class="line">                <span class="keyword">return</span> dp[x][y]<span class="comment">#</span></span><br><span class="line">            dp[x][y]=<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> dx,dy <span class="keyword">in</span> xy:</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span>&lt;=x+dx&lt;n <span class="keyword">and</span> <span class="number">0</span>&lt;=y+dy&lt;m) <span class="keyword">and</span> matrix[x+dx][y+dy]&gt;matrix[x][y]:<span class="comment">#&lt;,&gt;都可以</span></span><br><span class="line">                    dp[x][y]=<span class="built_in">max</span>(dp[x][y],dfs(x+dx,y+dy)+<span class="number">1</span>)<span class="comment">#当前的值动态规划（+上下一个符合条件的值），这里是递归，虽然不是用函数返回值实现的</span></span><br><span class="line">            <span class="keyword">return</span> d[x][y]<span class="comment">#返回当前最大长度，只返回最开始输入的输出数据（这里不是递归</span></span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, dfs(i, j))<span class="comment">#善于用max可以使用最值方便</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p><strong>1、组合问题：</strong></p>
<p><a class="link" href="https://leetcode.cn/problems/combination-sum-iv/">377. 组合总和 Ⅳ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://leetcode.cn/problems/target-sum/">494. 目标和  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://leetcode.cn/problems/coin-change-ii/">518. 零钱兑换 II <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Dart"><figure class="iseeu highlight dart"><table><tr><td class="code"><pre><span class="line">dp[i] += dp[i-<span class="built_in">num</span>]</span><br></pre></td></tr></table></figure></div>

<p><strong>2、True、False问题：</strong></p>
<p><a class="link" href="https://leetcode.cn/problems/word-break/">139. 单词拆分 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://leetcode.cn/problems/partition-equal-subset-sum/">416. 分割等和子集 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Dart"><figure class="iseeu highlight dart"><table><tr><td class="code"><pre><span class="line">dp[i] = dp[i] or dp[i-<span class="built_in">num</span>]</span><br></pre></td></tr></table></figure></div>

<p><strong>3、最大最小问题：</strong></p>
<p><a class="link" href="https://leetcode.cn/problems/ones-and-zeroes/">474. 一和零 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://leetcode.cn/problems/coin-change/">322. 零钱兑换 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">dp[i] = <span class="built_in">min</span>(dp[i], dp[i-num]+<span class="number">1</span>)或者dp[i] = <span class="built_in">max</span>(dp[i], dp[i-num]+<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div>

<p><strong>4.方法数</strong></p>
<p><a class="link" href="https://leetcode.cn/problems/coin-lcci/">面试题 08.11. 硬币 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>类似于爬楼梯，但是他是组合不是排列</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">waysToChange</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        mod = <span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span></span><br><span class="line">        coins = [<span class="number">25</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        f = [<span class="number">1</span>] + [<span class="number">0</span>] * n<span class="comment">#不选硬币也是一种</span></span><br><span class="line">        <span class="keyword">for</span> coin <span class="keyword">in</span> coins:<span class="comment">#第i个n由前面的4种可能的值推过来</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> i-coin&gt;=<span class="number">0</span>:</span><br><span class="line">                    f[i] += f[i - coin]</span><br><span class="line">        <span class="keyword">return</span> f[n] % mod</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">waysToChange</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        mod = <span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span></span><br><span class="line">        coins = [<span class="number">25</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        f = [<span class="number">1</span>] + [<span class="number">0</span>] * n</span><br><span class="line">        <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(coin, n + <span class="number">1</span>):<span class="comment">#把判断的条件合到循环里面</span></span><br><span class="line">            	f[i] += f[i - coin]</span><br><span class="line">        <span class="keyword">return</span> f[n] % mod</span><br></pre></td></tr></table></figure></div>

<p><a class="link" href="https://leetcode.cn/problems/coin-change/">322. 零钱兑换 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">coinChange</span>(<span class="params">self, coins: <span class="type">List</span>[<span class="built_in">int</span>], amount: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">         coins.sort()</span><br><span class="line">         dp=[<span class="number">0</span>]+[<span class="built_in">float</span>(<span class="string">"inf"</span>)]*(amount)</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(coins,amount+<span class="number">1</span>):</span><br><span class="line">                dp[i]=<span class="built_in">min</span>(dp[i],dp[i-coin]+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[amount] <span class="keyword">if</span> dp[amount] != <span class="built_in">float</span>(<span class="string">'inf'</span>) <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5>]]></content>
      <categories>
        <category>AC</category>
        <category>题型</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>模板</tag>
        <tag>例题</tag>
      </tags>
  </entry>
  <entry>
    <title>排序</title>
    <url>/2023/10/22/%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<hr>
<p>[TOC]</p>
<h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><p>sort 参数 加负号逆序，可以有两个参数，但是参数先后有讲究</p>
<h3 id="二维数组排序（并列情况）"><a href="#二维数组排序（并列情况）" class="headerlink" title="二维数组排序（并列情况）"></a>二维数组排序（并列情况）</h3><p>定义一个二维数组res</p>
<p>对res排序，key是res[]里面的一维数组x的x[1],x[0]</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">res=<span class="built_in">sorted</span>(res,key=<span class="keyword">lambda</span> x:[x[<span class="number">1</span>],x[<span class="number">0</span>]])</span><br></pre></td></tr></table></figure></div>



<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selectionsorts</span>(<span class="params">a</span>):</span><br><span class="line">    n=<span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):<span class="comment">#顺序对每一个数进行操作</span></span><br><span class="line">        <span class="built_in">min</span>=i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,n):<span class="comment">#对每个数后面的数进行遍历，找出最小的数与操作数交换位置</span></span><br><span class="line">            <span class="keyword">if</span> a[j]&lt;a[<span class="built_in">min</span>]:</span><br><span class="line">                <span class="built_in">min</span>=j</span><br><span class="line">        a[i],a[<span class="built_in">min</span>]=a[<span class="built_in">min</span>],a[i]</span><br></pre></td></tr></table></figure></div>

<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">BubbleSort</span>(<span class="params">a</span>):</span><br><span class="line">    n=<span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):<span class="comment">#逆序对每一个数进行操作</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,i)：<span class="comment">#对每个数前面面的数进行遍历，比较每个数与后面一个数的大小，从而找出最大的数排到最后面</span></span><br><span class="line">       		 <span class="keyword">if</span> a[j]&gt;a[j+<span class="number">1</span>]:</span><br><span class="line">        		a[j],a[j+<span class="number">1</span>]=a[j+<span class="number">1</span>],a[j]</span><br><span class="line">        </span><br></pre></td></tr></table></figure></div>

<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">TnsertionSort</span>(<span class="params">a</span>):</span><br><span class="line">    n=<span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):<span class="comment">#遍历每一个数  </span></span><br><span class="line">        x=a[i]</span><br><span class="line">        j=i-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> x&lt;=a[j]:</span><br><span class="line">                a[j+<span class="number">1</span>]=a[j]<span class="comment">#把大于x的数向后移</span></span><br><span class="line">                j-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        a[j+<span class="number">1</span>]=x</span><br></pre></td></tr></table></figure></div>



<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>​	将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p>
<p>「分」的阶段首先将序列一步步分解成小的子序列进行分段排序；</p>
<p>「治」的阶段则将分段有序的子序列合并在一起，使得整个序列变得有序。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310222237914.png"
                      alt="meger_sort.png"
                ></p>
<p>下图以最后一步中合并分段有序的子序列为例做下说明：<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310222238355.png"
                      alt="meger_sort_merge.png"
                ></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#归并两个列表里面的数据（使其从小到大）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">s1,s2,s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;将两个列表是s1，s2按顺序融合为一个列表s,s为原列表&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># j和i就相当于两个指向的位置，i指s1，j指s2</span></span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i+j&lt;<span class="built_in">len</span>(s):</span><br><span class="line">        <span class="comment"># j==len(s2)时说明s2走完了，或者s1没走完并且s1中该位置是最小的</span></span><br><span class="line">        <span class="comment">#注意and的顺序，判断越界</span></span><br><span class="line">        <span class="keyword">if</span> j==<span class="built_in">len</span>(s2) <span class="keyword">or</span> (i&lt;<span class="built_in">len</span>(s1) <span class="keyword">and</span> s1[i]&lt;s2[j]):</span><br><span class="line">            s[i+j] = s1[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s[i+j] = s2[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line"><span class="comment">#递归操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;归并排序&quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="comment"># 剩一个或没有直接返回，不用排序</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 拆分</span></span><br><span class="line">    mid = n // <span class="number">2</span></span><br><span class="line">    s1 = s[<span class="number">0</span>:mid]</span><br><span class="line">    s2 = s[mid:n]</span><br><span class="line">    <span class="comment"># 子序列递归调用排序</span></span><br><span class="line">    merge_sort(s1)</span><br><span class="line">    merge_sort(s2)</span><br><span class="line">    <span class="comment"># 合并</span></span><br><span class="line">    merge(s1,s2,s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = [<span class="number">1</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">    merge_sort(s)</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">self, nums, l, r</span>):</span><br><span class="line">        <span class="keyword">if</span> l == r:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        mid = (l + r) // <span class="number">2</span></span><br><span class="line">        self.merge_sort(nums, l, mid)</span><br><span class="line">        self.merge_sort(nums, mid + <span class="number">1</span>, r)</span><br><span class="line">        tmp = []</span><br><span class="line">        i, j = l, mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= mid <span class="keyword">or</span> j &lt;= r:</span><br><span class="line">            <span class="keyword">if</span> i &gt; mid <span class="keyword">or</span> (j &lt;= r <span class="keyword">and</span> nums[j] &lt; nums[i]):</span><br><span class="line">                tmp.append(nums[j])</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp.append(nums[i])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        nums[l: r + <span class="number">1</span>] = tmp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortArray</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        self.merge_sort(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">作者：力扣官方题解</span><br><span class="line">链接：https://leetcode.cn/problems/sort-an-array/solutions/<span class="number">178305</span>/pai-xu-shu-zu-by-leetcode-solution/</span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></div>





<h3 id="C语言API（不需要算法）"><a href="#C语言API（不需要算法）" class="headerlink" title="C语言API（不需要算法）"></a>C语言API（不需要算法）</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310232207450.png"
                      alt="image-20231023220726170"
                ></p>
<p><strong>cmp需要自己实现</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310232209095.png"
                      alt="image-20231023220920703"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310232210463.png"
                      alt="image-20231023221032006"
                ></p>
<h1 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h1><p>​	快速排序使用<strong>分治法</strong>（Divide and conquer）策略来把一个序列（list）分为较小和较大的 2 个子序列，然后递归地排序两个子序列。</p>
<p><strong>步骤</strong></p>
<p><strong>1.挑选基准值：</strong>从数列中挑出一个元素，称为“基准”（pivot）；</p>
<p><strong>2.分割（partition）：</strong>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（与基准值相等的数可以到任何一边）。在这个分割结束之后，对基准值的排序就已经完成；<br><strong>3.递归排序子序列：</strong>递归地将小于基准值元素的子序列和大于基准值元素的子序列排序。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310222227594.png"
                      alt="quick_sort.png"
                ></p>
<p>选取基准值pivot也有多种方式，且选取pivot的方法对排序的时间性能有着决定性的影响。例如，对于一个逆序数组，如果每次选取数组中的第一个元素为pivot，那么将其正序排列的过程将会变得非常慢，时间复杂$O(n2)O(n^2)O(n 2)$。因此，在具体实现中考虑随机化选择基准值pivot也是非常有必要的。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortArray</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">arr, low, high</span>):</span><br><span class="line">            pivot = arr[low]                                        <span class="comment"># 选取最左边为pivot</span></span><br><span class="line"></span><br><span class="line">            left, right = low, high     <span class="comment"># 双指针</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">while</span> left&lt;right <span class="keyword">and</span> arr[right] &gt;= pivot:          <span class="comment"># 找到右边第一个&lt;pivot的元素</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                arr[left] = arr[right]                             <span class="comment"># 并将其移动到left处</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">while</span> left&lt;right <span class="keyword">and</span> arr[left] &lt;= pivot:           <span class="comment"># 找到左边第一个&gt;pivot的元素</span></span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                arr[right] = arr[left]                             <span class="comment"># 并将其移动到right处</span></span><br><span class="line">            </span><br><span class="line">            arr[left] = pivot           <span class="comment"># pivot放置到中间left=right处</span></span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">randomPartition</span>(<span class="params">arr, low, high</span>):</span><br><span class="line">            pivot_idx = random.randint(low, high)                   <span class="comment"># 随机选择pivot</span></span><br><span class="line">            arr[low], arr[pivot_idx] = arr[pivot_idx], arr[low]     <span class="comment"># pivot放置到最左边</span></span><br><span class="line">            <span class="keyword">return</span> partition(arr, low, high)                        <span class="comment"># 调用partition函数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">quickSort</span>(<span class="params">arr, low, high</span>):</span><br><span class="line">            <span class="keyword">if</span> low &gt;= high:             <span class="comment"># 递归结束</span></span><br><span class="line">                <span class="keyword">return</span>  </span><br><span class="line">            <span class="comment"># mid = partition(arr, low, high)       # 以mid为分割点【非随机选择pivot】</span></span><br><span class="line">            mid = randomPartition(arr, low, high)   <span class="comment"># 以mid为分割点【随机选择pivot】</span></span><br><span class="line">            quickSort(arr, low, mid-<span class="number">1</span>)              <span class="comment"># 递归对mid两侧元素进行排序</span></span><br><span class="line">            quickSort(arr, mid+<span class="number">1</span>, high)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        quickSort(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span>)             <span class="comment"># 调用快排函数对nums进行排序</span></span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="堆排序（Heap-Sort）"><a href="#堆排序（Heap-Sort）" class="headerlink" title="堆排序（Heap Sort）"></a>堆排序（Heap Sort）</h1><p>​	<strong>堆</strong>是一个近似<strong>完全二叉树</strong>的结构，并同时满足堆积的性质：即子节点的键值或索引总是小于（或者大于）它的父节点。</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310222301995.png"
                      alt="heap.png"
                ></p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1>]]></content>
      <categories>
        <category>AC</category>
        <category>题型</category>
      </categories>
      <tags>
        <tag>双指针</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2023/12/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<hr>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202312202013135.png"
                      alt="image-20231220201303588"
                ></p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/17/Untitled%201/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>python数据结构定义</title>
    <url>/2024/03/04/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="python里面定义数据结构的方式"><a href="#python里面定义数据结构的方式" class="headerlink" title="python里面定义数据结构的方式"></a>python里面定义数据结构的方式</h1><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>[100. 相同的树 - 力扣（LeetCode）</p>
<p>[<a class="link"   href="https://leetcode.cn/problems/sZ59z6/" >LCP 44. 开幕式焰火 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://leetcode.cn/problems/same-tree/submissions/516857171/" > <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>类里面定义一个全局变量</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def __init__(self):</span><br><span class="line">       self.l = []</span><br></pre></td></tr></table></figure></div>

<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:<span class="comment">#创建类（结构体）</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data</span>):</span><br><span class="line">        self.data=data</span><br><span class="line">        self.<span class="built_in">next</span>=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">creaat_list</span>(<span class="params">l</span>):<span class="comment">#创建单链表</span></span><br><span class="line">    head=Node(l[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l[<span class="number">1</span>:]:</span><br><span class="line">        node=Node(i)</span><br><span class="line">        node.<span class="built_in">next</span>=head</span><br><span class="line">        head=node</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lk=creaat_list([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])<span class="comment">#lk=head（头结点）</span></span><br><span class="line"><span class="built_in">print</span>(lk.<span class="built_in">next</span>.data)</span><br></pre></td></tr></table></figure></div>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>前缀和与差分</title>
    <url>/2024/03/21/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/</url>
    <content><![CDATA[<hr>
<p>[TOC]</p>
<h1 id="前缀和与差分"><a href="#前缀和与差分" class="headerlink" title="前缀和与差分"></a>前缀和与差分</h1><p>一般<strong>原序列</strong>就是<strong>差分序列的前缀和</strong>，所以把差分看做前缀和的逆运算</p>
<p>对区间开始结尾加上减上相同的数，<strong>差分</strong>数组<strong>前缀和</strong>得到原始<strong>区间增加</strong>相同的数。</p>
<p>一般根据题目的需求来<strong>优化时间复杂度</strong></p>
<h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><p><strong>f[i]&#x3D;qz[i]-qz[i-1]</strong></p>
<h2 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202411180950247.png"
                      alt="1.png"
                ></p>
<p> (x1, y1) 作为左上角，(x2, y2) 作为右下角 的区域和的时候，可以直接利用前缀和数组快速求解：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum[x2][y2] - sum[x1 - 1][y2] - sum[x2][y1 - 1] + sum[x1 - 1][y1 - 1]</span><br></pre></td></tr></table></figure></div>



<h1 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h1><h2 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h2><p><strong>f[i]&#x3D;cf[1]+cf[2]+…+cf[i]</strong></p>
<h2 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404111812660.png"
                      alt="image-20240411181209978"
                ></p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h3 id="前缀和-1"><a href="#前缀和-1" class="headerlink" title="前缀和"></a>前缀和</h3><p><a class="link"   href="https://www.acwing.com/problem/content/description/3959/" >3956. 截断数组 - AcWing题库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>找到两个分割点，一个第二个分割点与前面的第一个分割点组合</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">s=<span class="built_in">sum</span>(a)</span><br><span class="line"><span class="keyword">if</span> s%<span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=ans=pre=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">        pre+=a[i]</span><br><span class="line">        <span class="keyword">if</span> pre==s*<span class="number">2</span>//<span class="number">3</span>:<span class="comment">##</span></span><br><span class="line">            ans+=p</span><br><span class="line">        <span class="keyword">if</span> pre==s//<span class="number">3</span>:</span><br><span class="line">            p+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>AC</category>
        <category>题型</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title>数论专题</title>
    <url>/2024/02/22/%E6%95%B0%E8%AE%BA%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h2><h3 id="循环小数"><a href="#循环小数" class="headerlink" title="循环小数"></a>循环小数</h3><p>把小数拆成两部分：非循环部分和循环部分。</p>
<p><strong>非循环部分</strong>除以10的n次幂得到一个分数，<strong>循环部分</strong>除以999…和10的n次幂的积，得到一个分数。两个分数加起来，通分，就得到了最后的结果。</p>
<p>eg：0.1234234234……&#x3D;1&#x2F;10+234&#x2F;9990&#x3D;137&#x2F;1110</p>
<h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><p><code>a|b</code>  b能被a整除,a整除b</p>
<p><code>a|b,a|c  ==&gt; a|kb+lc</code>(l,k均为任意整数)</p>
<p> k1,k2互质则k1+k2,k1*k2互质</p>
<p>a&#x3D;kb+c &#x3D;&#x3D;&gt;a,b的公因数与b,c的公因数相同</p>
<h2 id="最大公因数"><a href="#最大公因数" class="headerlink" title="最大公因数"></a>最大公因数</h2><h3 id="辗转相除法"><a href="#辗转相除法" class="headerlink" title="辗转相除法"></a>辗转相除法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int gcd(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    if (a % b==0) return b;</span><br><span class="line">    else return gcd(b, a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h2 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h2><h3 id="线性筛素数"><a href="#线性筛素数" class="headerlink" title="线性筛素数"></a>线性筛素数</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">问[1, n]有多少个素数</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">bool isPrime[1000010];</span><br><span class="line">int n;</span><br><span class="line">int ans;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    for(int i = 2; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        isPrime[i] = true;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = 2; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(isPrime[i])</span><br><span class="line">        &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            for(int j = 2; j * i &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                isPrime[j * i] = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><p>在数论，对正整数n，欧拉函数是小于n的正整数中与n互质的数的数目。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int getPhi(int x)&#123;</span><br><span class="line">    // 获取质因数，p是质因数列表</span><br><span class="line">    vector&lt;int&gt; p;</span><br><span class="line">    int tmp = x;</span><br><span class="line">    for(int i = 2; i &lt;= tmp / i; i++)&#123;</span><br><span class="line">        if(tmp % i == 0)&#123;</span><br><span class="line">            p.push_back(i);</span><br><span class="line">            while(tmp % i == 0)&#123;</span><br><span class="line">                tmp /= i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(tmp != 1)&#123;</span><br><span class="line">        p.push_back(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 根据质因数列表，计算欧拉函数。</span><br><span class="line">    // 当计算n * (1 - 1 / pi)时，要写成n - n / pi的形式</span><br><span class="line">    int res = x;</span><br><span class="line">    for(auto i : p)&#123;</span><br><span class="line">        res = res - res / i;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="题目里面用数学方法的技巧题解"><a href="#题目里面用数学方法的技巧题解" class="headerlink" title="题目里面用数学方法的技巧题解"></a>题目里面用数学方法的技巧题解</h2><hr>
<p><a class="link"   href="https://leetcode.cn/problems/count-of-matches-in-tournament/" >1688. 比赛中的配对次数 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numberOfMatches</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> n-<span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p>每次配对都会淘汰一个对，所有配对次数等于淘汰掉的对手</p>
<p><a class="link"   href="https://leetcode.cn/problems/count-operations-to-obtain-zero/solutions/1270345/de-dao-0-de-cao-zuo-shu-by-leetcode-solu-d8kh/" >2169. 得到 0 的操作数 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countOperations</span>(<span class="params">self, num1: <span class="built_in">int</span>, num2: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = <span class="number">0</span>   <span class="comment"># 相减操作的总次数</span></span><br><span class="line">        <span class="keyword">while</span> num1 <span class="keyword">and</span> num2:</span><br><span class="line">            <span class="comment"># 每一步辗转相除操作</span></span><br><span class="line">            res += num1 // num2</span><br><span class="line">            num1 %= num2</span><br><span class="line">            num1, num2 = num2, num1</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>如果num1远大于num2，辗转相除法可以省去很多循环，因为在num1&#x3D;num2之前小的那一个一直在，所以相当于在做除法。</p>
<h2 id="分解质因数"><a href="#分解质因数" class="headerlink" title="分解质因数"></a>分解质因数</h2><p><a class="link"   href="https://www.acwing.com/problem/content/description/3494/" >3491. 完全平方数 - AcWing题库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>任意的一个数可以由一些质数的幂次方得来。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">res = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找因子</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(n**<span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n % i == <span class="number">0</span>:</span><br><span class="line">            s += <span class="number">1</span></span><br><span class="line">            n //= i</span><br><span class="line">        <span class="keyword">if</span> s % <span class="number">2</span>:</span><br><span class="line">            res *= i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理剩余的因子</span></span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">1</span>:</span><br><span class="line">    res *= n</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓app</title>
    <url>/2024/02/18/app/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="andriod-studio"><a href="#andriod-studio" class="headerlink" title="andriod studio"></a>andriod studio</h2><h4 id="初始文件"><a href="#初始文件" class="headerlink" title="初始文件"></a>初始文件</h4><p>​		<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202402180947037.png"
                      alt="image-20240218094701678" style="zoom:50%;" 
                >.</p>
<p>.gradle 配置文件</p>
<p>.gitignore 将指定的目录排除在版本控制之外的</p>
<p>build.gradle.kts 全局脚本</p>
<p>gradle.properties 全局配置文件</p>
<p>gradlew	linux</p>
<p>gradlew .bat	windows</p>
<p>local.properties	andriod sdk</p>
<p>settings.gradle.kts 指定模块的组成</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202402181001910.png"
                      alt="image-20240218100148115" style="zoom:50%;" 
                >



<p>build 自动生成的文件</p>
<p>libs 第三方包的</p>
<p>Android test 测试</p>
<p>main java	所有java</p>
<p>res 所有的图片布局</p>
<p>proguard-rule.pro 代码混淆规则（阻拦破解）</p>
<p>andriodmanifest.xml	活动注册</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202402181006246.png"
                      alt="image-20240218100603191"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202402181008762.png"
                      alt=" "
                ></p>
<h4 id="字符串的引用"><a href="#字符串的引用" class="headerlink" title="字符串的引用"></a>字符串的引用</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202402201108775.png"
                      alt="image-20240220110806408" style="zoom:50%;" 
                >

<p>在values下面的文件夹的strings.xml中添加字符串供全局引用。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202402201111907.png"
                      alt="image-20240220111112553"
                ></p>
<p>输入name 输出的是后面的字符串</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202402201112316.png"
                      alt="image-20240220111234345"
                ></p>
<p>在values下面的文件夹的colors.xml里面可以添加颜色</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202402201115519.png"
                      alt="image-20240220111525473"
                ></p>
<p>启动文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202402201116447.png"
                      alt="image-20240220111607574"
                ></p>
<p>需要一些包的时候要在这里引用</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202402201118304.png"
                      alt="image-20240220111814174"
                ></p>
<p>真机调试的时候在这里声明</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202402201129390.png"
                      alt="image-20240220112903761"
                ></p>
<p>match parent 与父布局</p>
<p>wrap_contennt 有多高显示多高</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202402201143639.png"
                      alt="image-20240220114327464"
                ></p>
<p>与父布局（边框）有10个dp</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202402201145863.png"
                      alt="image-20240220114523768" style="zoom:80%;" 
                >

<p>背景图</p>
<h5 id="线性布局-LinearLayout"><a href="#线性布局-LinearLayout" class="headerlink" title="线性布局 LinearLayout"></a>线性布局 LinearLayout</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202402201133041.png"
                      alt="image-20240220113317865"
                ></p>
<p>竖直排列 vertical</p>
<p>水平排列 horizontal</p>
<h5 id="相对布局-RelativeLayout"><a href="#相对布局-RelativeLayout" class="headerlink" title="相对布局 RelativeLayout"></a>相对布局 RelativeLayout</h5><p>每个标签有id，需要指明每个布局之间的相对位置</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202402201141557.png"
                      alt="image-20240220114153589" style="zoom: 67%;" 
                >]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2024/03/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<hr>
<p>[TOC]</p>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>在一个数列中高效插入一个元素，链表毫无疑问是最好的选择。</p>
<p>利用取余来模拟循环队列</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">n,m=map(int,input().split())</span><br><span class="line"></span><br><span class="line">visit=[0]*(n+1)</span><br><span class="line">p=0</span><br><span class="line">for i in range(n):</span><br><span class="line">    for j in range(m):</span><br><span class="line">        p+=1</span><br><span class="line">        while visit[p % n] == 1:</span><br><span class="line">            p += 1</span><br><span class="line"> </span><br><span class="line">    if p % n==0:</span><br><span class="line">        print(n,end=" ")</span><br><span class="line">    else:</span><br><span class="line">        print(p % n, end=" ")</span><br><span class="line">    visit[p%n] = 1</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈，是一种后进先出（FILO）的数据结构。</p>
<h4 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h4><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>所谓后缀表达式是指这样的一个表达式：式中不再引用括号，运算符号放在两个运算对象之后，所有计算按运算符号出现的顺序，严格地由左而右新进行（不用考虑运算符的优先级）。</p>
<p>本题中运算符仅包含 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.188ex;" xmlns="http://www.w3.org/2000/svg" width="4.751ex" height="1.758ex" role="img" focusable="false" viewBox="0 -694 2100 777"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="2B" d="M147 271Q138 271 122 271T98 270Q68 270 53 277T38 306T53 335T98 342Q105 342 121 342T147 341H227V423L228 505Q241 531 262 531Q268 531 273 530T282 525T287 519T293 511L297 505V341H377H430Q457 341 467 338T483 321Q487 313 487 306Q487 295 480 286T463 273Q457 271 377 271H297V107Q281 81 262 81Q250 81 242 87T230 100L228 107L227 189V271H147Z"></path><path data-c="2D" d="M57 306Q57 333 86 341H438Q468 332 468 306T438 271H86Q57 280 57 306Z" transform="translate(525,0)"></path><path data-c="2A" d="M222 487Q224 501 235 510T262 520Q279 520 289 510T302 487Q302 458 301 429Q301 421 301 413T301 398T300 386T300 377V374Q300 373 301 373Q304 373 353 403T416 434Q432 434 444 423T456 393Q456 389 456 386T454 379T451 373T448 368T442 363T436 358T427 353T417 348T405 342T391 334Q345 309 339 305L388 279Q400 273 412 266T432 255T441 250Q456 238 456 218Q456 200 445 189T417 177Q403 177 354 207T301 238Q300 238 300 237V234Q300 231 300 226T300 214T301 199T301 182Q302 153 302 124Q300 109 289 100T262 90T235 100T222 124Q222 153 223 182Q223 190 223 198T223 213T224 225T224 234V237Q224 238 223 238Q220 238 171 208T108 177Q92 177 80 188T68 218Q68 237 79 246T134 277Q180 303 185 306L136 332Q124 338 112 345T92 356T83 361Q68 373 68 393Q68 411 79 422T107 434Q121 434 170 404T223 373Q224 373 224 374V377Q224 380 224 385T224 397T223 412T223 429Q222 458 222 487Z" transform="translate(1050,0)"></path><path data-c="2F" d="M94 -83Q78 -83 68 -73T58 -48Q58 -44 60 -36Q62 -31 227 314T399 673Q410 694 431 694Q445 694 455 684T466 659Q466 656 464 648Q463 643 298 298T125 -62Q114 -83 94 -83Z" transform="translate(1575,0)"></path></g></g></g></svg></mjx-container>。保证对于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.188ex;" xmlns="http://www.w3.org/2000/svg" width="1.188ex" height="1.758ex" role="img" focusable="false" viewBox="0 -694 525 777"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="2F" d="M94 -83Q78 -83 68 -73T58 -48Q58 -44 60 -36Q62 -31 227 314T399 673Q410 694 431 694Q445 694 455 684T466 659Q466 656 464 648Q463 643 298 298T125 -62Q114 -83 94 -83Z"></path></g></g></g></svg></mjx-container> 运算除数不为 0。特别地，其中 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.188ex;" xmlns="http://www.w3.org/2000/svg" width="1.188ex" height="1.758ex" role="img" focusable="false" viewBox="0 -694 525 777"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="2F" d="M94 -83Q78 -83 68 -73T58 -48Q58 -44 60 -36Q62 -31 227 314T399 673Q410 694 431 694Q445 694 455 684T466 659Q466 656 464 648Q463 643 298 298T125 -62Q114 -83 94 -83Z"></path></g></g></g></svg></mjx-container> 运算的结果需要<strong>向 0 取整</strong>（即与 C++ <code>/</code> 运算的规则一致）。</p>
<p>如：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.69ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 4725 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="1D7F9" d="M260 546Q233 546 211 541T180 531T171 524L174 514Q177 505 177 497Q177 476 162 461T125 446Q106 446 90 459T73 504Q76 540 98 565T150 601T203 616T239 621Q241 622 265 622Q322 620 362 602T420 558T444 513T451 478Q451 386 369 329L375 326Q381 323 386 320T401 311T419 298T436 283T452 263T466 240T475 212T479 180Q479 99 416 44T259 -11T105 28T44 130Q44 154 59 168T95 183Q117 183 132 169T148 131Q148 119 139 101Q175 65 260 65Q316 65 355 97T395 179Q395 211 375 240Q336 292 253 292H234H215Q194 292 185 299T175 330Q175 350 184 359Q192 368 238 370T309 384Q336 398 351 423T367 474Q367 496 350 513Q321 546 260 546Z"></path><path data-c="2A" d="M222 487Q224 501 235 510T262 520Q279 520 289 510T302 487Q302 458 301 429Q301 421 301 413T301 398T300 386T300 377V374Q300 373 301 373Q304 373 353 403T416 434Q432 434 444 423T456 393Q456 389 456 386T454 379T451 373T448 368T442 363T436 358T427 353T417 348T405 342T391 334Q345 309 339 305L388 279Q400 273 412 266T432 255T441 250Q456 238 456 218Q456 200 445 189T417 177Q403 177 354 207T301 238Q300 238 300 237V234Q300 231 300 226T300 214T301 199T301 182Q302 153 302 124Q300 109 289 100T262 90T235 100T222 124Q222 153 223 182Q223 190 223 198T223 213T224 225T224 234V237Q224 238 223 238Q220 238 171 208T108 177Q92 177 80 188T68 218Q68 237 79 246T134 277Q180 303 185 306L136 332Q124 338 112 345T92 356T83 361Q68 373 68 393Q68 411 79 422T107 434Q121 434 170 404T223 373Q224 373 224 374V377Q224 380 224 385T224 397T223 412T223 429Q222 458 222 487Z" transform="translate(525,0)"></path><path data-c="28" d="M437 -53Q437 -82 399 -82H394Q377 -82 342 -55Q259 7 213 102T166 306Q166 412 211 507T342 667Q377 694 393 694H399Q437 694 437 665Q437 654 426 643T397 620T356 584T311 525Q301 511 290 488T264 412T250 306Q250 191 300 105T422 -27Q437 -37 437 -53Z" transform="translate(1050,0)"></path><path data-c="1D7FB" d="M387 189Q387 244 354 278T273 313Q230 313 205 301T163 271T138 249H120Q102 249 97 251Q85 258 83 266T80 311Q80 320 80 359T81 430Q81 587 82 591Q88 605 103 610H108Q112 610 120 610T138 610T163 610T192 611T225 611T260 611H415Q416 610 421 607T428 602T432 596T436 587T437 573Q437 567 437 562T434 554T431 548T427 543T423 540T418 538L415 536L289 535H164V363L170 366Q175 368 184 372T207 380T238 386T276 389Q357 389 414 331T472 187Q472 116 412 53T245 -10Q218 -10 209 -9Q126 5 89 48T52 137Q52 164 68 177T104 191Q130 191 143 175T156 141Q156 132 154 125T149 113T146 107Q146 104 155 95T188 76T245 65Q298 65 342 98T387 189Z" transform="translate(1575,0)"></path><path data-c="2D" d="M57 306Q57 333 86 341H438Q468 332 468 306T438 271H86Q57 280 57 306Z" transform="translate(2100,0)"></path><path data-c="1D7F8" d="M52 462Q52 528 110 575T247 622H250Q343 622 407 565T472 421Q472 371 446 324T390 248T308 178Q307 177 275 151T214 101L185 77Q185 76 286 76H388V87Q388 105 397 114T430 123T463 114Q470 107 471 100T472 61V42Q472 24 468 16T450 1H75Q53 10 53 32V38V48Q53 57 63 67T127 122Q153 144 169 157L289 256Q388 345 388 419Q388 473 346 509T231 545H224Q176 545 146 499L144 494Q155 476 155 459Q154 459 155 455T154 444T148 430T136 417T114 408Q113 408 110 408T104 407Q80 407 66 422T52 462Z" transform="translate(2625,0)"></path><path data-c="29" d="M87 664Q87 694 126 694Q138 694 147 690T183 667Q266 605 312 510T358 306Q358 193 307 93T161 -70Q142 -82 126 -82Q105 -82 96 -73T87 -53Q87 -47 88 -44Q92 -36 116 -19T173 34T230 119Q273 206 273 306Q273 408 231 494T109 635Q87 649 87 664Z" transform="translate(3150,0)"></path><path data-c="2B" d="M147 271Q138 271 122 271T98 270Q68 270 53 277T38 306T53 335T98 342Q105 342 121 342T147 341H227V423L228 505Q241 531 262 531Q268 531 273 530T282 525T287 519T293 511L297 505V341H377H430Q457 341 467 338T483 321Q487 313 487 306Q487 295 480 286T463 273Q457 271 377 271H297V107Q281 81 262 81Q250 81 242 87T230 100L228 107L227 189V271H147Z" transform="translate(3675,0)"></path><path data-c="1D7FD" d="M204 -10Q162 -10 162 40Q162 146 198 261T310 477Q311 478 321 491T342 517T358 535H128V524Q128 506 119 497Q111 489 86 489H78Q55 489 46 508Q44 513 44 557V580Q44 605 52 616T88 627H93Q114 627 125 611H458Q474 598 477 593T480 573Q480 559 478 553T469 543T446 521T408 477Q252 290 246 49Q246 43 246 37T246 27T245 22Q243 11 233 1T204 -10Z" transform="translate(4200,0)"></path></g></g></g></svg></mjx-container> 对应的后缀表达式为：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="14.253ex" height="1.443ex" role="img" focusable="false" viewBox="0 -627 6300 638"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="1D7F9" d="M260 546Q233 546 211 541T180 531T171 524L174 514Q177 505 177 497Q177 476 162 461T125 446Q106 446 90 459T73 504Q76 540 98 565T150 601T203 616T239 621Q241 622 265 622Q322 620 362 602T420 558T444 513T451 478Q451 386 369 329L375 326Q381 323 386 320T401 311T419 298T436 283T452 263T466 240T475 212T479 180Q479 99 416 44T259 -11T105 28T44 130Q44 154 59 168T95 183Q117 183 132 169T148 131Q148 119 139 101Q175 65 260 65Q316 65 355 97T395 179Q395 211 375 240Q336 292 253 292H234H215Q194 292 185 299T175 330Q175 350 184 359Q192 368 238 370T309 384Q336 398 351 423T367 474Q367 496 350 513Q321 546 260 546Z"></path><path data-c="2E" d="M193 70Q193 105 214 122T258 140Q291 140 311 120T332 70Q332 44 314 23T262 1Q234 1 214 18T193 70Z" transform="translate(525,0)"></path><path data-c="1D7FB" d="M387 189Q387 244 354 278T273 313Q230 313 205 301T163 271T138 249H120Q102 249 97 251Q85 258 83 266T80 311Q80 320 80 359T81 430Q81 587 82 591Q88 605 103 610H108Q112 610 120 610T138 610T163 610T192 611T225 611T260 611H415Q416 610 421 607T428 602T432 596T436 587T437 573Q437 567 437 562T434 554T431 548T427 543T423 540T418 538L415 536L289 535H164V363L170 366Q175 368 184 372T207 380T238 386T276 389Q357 389 414 331T472 187Q472 116 412 53T245 -10Q218 -10 209 -9Q126 5 89 48T52 137Q52 164 68 177T104 191Q130 191 143 175T156 141Q156 132 154 125T149 113T146 107Q146 104 155 95T188 76T245 65Q298 65 342 98T387 189Z" transform="translate(1050,0)"></path><path data-c="2E" d="M193 70Q193 105 214 122T258 140Q291 140 311 120T332 70Q332 44 314 23T262 1Q234 1 214 18T193 70Z" transform="translate(1575,0)"></path><path data-c="1D7F8" d="M52 462Q52 528 110 575T247 622H250Q343 622 407 565T472 421Q472 371 446 324T390 248T308 178Q307 177 275 151T214 101L185 77Q185 76 286 76H388V87Q388 105 397 114T430 123T463 114Q470 107 471 100T472 61V42Q472 24 468 16T450 1H75Q53 10 53 32V38V48Q53 57 63 67T127 122Q153 144 169 157L289 256Q388 345 388 419Q388 473 346 509T231 545H224Q176 545 146 499L144 494Q155 476 155 459Q154 459 155 455T154 444T148 430T136 417T114 408Q113 408 110 408T104 407Q80 407 66 422T52 462Z" transform="translate(2100,0)"></path><path data-c="2E" d="M193 70Q193 105 214 122T258 140Q291 140 311 120T332 70Q332 44 314 23T262 1Q234 1 214 18T193 70Z" transform="translate(2625,0)"></path><path data-c="2D" d="M57 306Q57 333 86 341H438Q468 332 468 306T438 271H86Q57 280 57 306Z" transform="translate(3150,0)"></path><path data-c="2A" d="M222 487Q224 501 235 510T262 520Q279 520 289 510T302 487Q302 458 301 429Q301 421 301 413T301 398T300 386T300 377V374Q300 373 301 373Q304 373 353 403T416 434Q432 434 444 423T456 393Q456 389 456 386T454 379T451 373T448 368T442 363T436 358T427 353T417 348T405 342T391 334Q345 309 339 305L388 279Q400 273 412 266T432 255T441 250Q456 238 456 218Q456 200 445 189T417 177Q403 177 354 207T301 238Q300 238 300 237V234Q300 231 300 226T300 214T301 199T301 182Q302 153 302 124Q300 109 289 100T262 90T235 100T222 124Q222 153 223 182Q223 190 223 198T223 213T224 225T224 234V237Q224 238 223 238Q220 238 171 208T108 177Q92 177 80 188T68 218Q68 237 79 246T134 277Q180 303 185 306L136 332Q124 338 112 345T92 356T83 361Q68 373 68 393Q68 411 79 422T107 434Q121 434 170 404T223 373Q224 373 224 374V377Q224 380 224 385T224 397T223 412T223 429Q222 458 222 487Z" transform="translate(3675,0)"></path><path data-c="1D7FD" d="M204 -10Q162 -10 162 40Q162 146 198 261T310 477Q311 478 321 491T342 517T358 535H128V524Q128 506 119 497Q111 489 86 489H78Q55 489 46 508Q44 513 44 557V580Q44 605 52 616T88 627H93Q114 627 125 611H458Q474 598 477 593T480 573Q480 559 478 553T469 543T446 521T408 477Q252 290 246 49Q246 43 246 37T246 27T245 22Q243 11 233 1T204 -10Z" transform="translate(4200,0)"></path><path data-c="2E" d="M193 70Q193 105 214 122T258 140Q291 140 311 120T332 70Q332 44 314 23T262 1Q234 1 214 18T193 70Z" transform="translate(4725,0)"></path><path data-c="2B" d="M147 271Q138 271 122 271T98 270Q68 270 53 277T38 306T53 335T98 342Q105 342 121 342T147 341H227V423L228 505Q241 531 262 531Q268 531 273 530T282 525T287 519T293 511L297 505V341H377H430Q457 341 467 338T483 321Q487 313 487 306Q487 295 480 286T463 273Q457 271 377 271H297V107Q281 81 262 81Q250 81 242 87T230 100L228 107L227 189V271H147Z" transform="translate(5250,0)"></path><path data-c="40" d="M44 306Q44 445 125 531T302 617Q332 617 358 607T411 574T456 502T479 387Q481 361 481 321Q481 203 421 143Q381 103 332 103Q266 103 225 165T183 307Q183 390 227 449T332 508Q358 508 378 498Q350 541 304 541Q229 541 172 473T115 305Q115 208 171 140T306 71H310Q358 71 397 105Q409 115 436 115Q458 115 462 113Q481 106 481 86Q481 73 468 61Q401 -6 305 -6Q262 -6 217 14T133 71T69 170T44 306ZM410 306Q410 361 386 396T333 431Q300 431 277 394T254 305Q254 256 276 218T332 180Q364 180 387 217T410 306Z" transform="translate(5775,0)"></path></g></g></g></svg></mjx-container>。在该式中，<code>@</code> 为表达式的结束符号。<code>.</code> 为操作数的结束符号。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一行一个字符串 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.023ex" role="img" focusable="false" viewBox="0 -442 469 452"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container>，表示后缀表达式。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示表达式的值。</p>
<h4 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h4><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.5.2.-*7.+@</span><br></pre></td></tr></table></figure></div>

<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">16</span><br></pre></td></tr></table></figure></div>

<h4 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h4><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.28.30./*7.-@</span><br></pre></td></tr></table></figure></div>

<h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-7</span><br></pre></td></tr></table></figure></div>

<h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>数据保证，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="11.747ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 5192.1 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mo" transform="translate(1833.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(2111.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2580.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(3136.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(4192.1,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>，答案和计算过程中的每一个值的绝对值不超过 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g></g></g></svg></mjx-container>。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#读题</span><br><span class="line">s=input().split('.')</span><br><span class="line"></span><br><span class="line">stack=[]</span><br><span class="line">for i in s:</span><br><span class="line">    if i.isdigit():</span><br><span class="line">        stack.append(i)</span><br><span class="line">    else:</span><br><span class="line">        s=0</span><br><span class="line">        for q in range(len(i)):</span><br><span class="line">            j=i[q]</span><br><span class="line">            if j == '+':</span><br><span class="line">                a = int(stack[-1]) + int(stack[-2])</span><br><span class="line">                stack[-2] = a</span><br><span class="line">                stack.pop()</span><br><span class="line">            elif j == '-':</span><br><span class="line">                a = int(stack[-2]) - int(stack[-1])</span><br><span class="line">                stack[-2] = a</span><br><span class="line">                stack.pop()</span><br><span class="line">            elif j == '*':</span><br><span class="line">                a = int(stack[-1]) * int(stack[-2])</span><br><span class="line">                stack[-2] = a</span><br><span class="line">                stack.pop()</span><br><span class="line">            elif j == '/':</span><br><span class="line">                a = int(stack[-2]) // int(stack[-1])</span><br><span class="line">                stack[-2] = a</span><br><span class="line">                stack.pop()</span><br><span class="line">            elif j == '@':</span><br><span class="line">                break</span><br><span class="line">            else:</span><br><span class="line">                if s==0:</span><br><span class="line">                    stack.append(j)</span><br><span class="line">                    s=1</span><br><span class="line">                else:</span><br><span class="line">                    stack[-1]=stack[-1]+j</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(stack[0])</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列，是一种先进先出（FIFO）的数据结构。</p>
<h4 id="NOIP2010-提高组-机器翻译"><a href="#NOIP2010-提高组-机器翻译" class="headerlink" title="[NOIP2010 提高组] 机器翻译"></a>[NOIP2010 提高组] 机器翻译</h4><h4 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h4><p>NOIP2010 提高组 T1</p>
<h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>小晨的电脑上安装了一个机器翻译软件，他经常用这个软件来翻译英语文章。</p>
<p>这个翻译软件的原理很简单，它只是从头到尾，依次将每个英文单词用对应的中文含义来替换。对于每个英文单词，软件会先在内存中查找这个单词的中文含义，如果内存中有，软件就会用它进行翻译；如果内存中没有，软件就会在外存中的词典内查找，查出单词的中文含义然后翻译，并将这个单词和译义放入内存，以备后续的查找和翻译。</p>
<p>假设内存中有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.378ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 1051 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container> 个单元，每单元能存放一个单词和译义。每当软件将一个新单词存入内存前，如果当前内存中已存入的单词数不超过 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.275ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 2773.4 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(1273.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2273.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>，软件会将新单词存入一个未使用的内存单元；若内存中已存入 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.378ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 1051 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container> 个单词，软件会清空最早进入内存的那个单词，腾出单元来，存放新单词。</p>
<p>假设一篇英语文章的长度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container> 个单词。给定这篇待译文章，翻译软件需要去外存查找多少次词典？假设在翻译开始前，内存中没有任何单词。</p>
<h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>共 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container> 行。每行中两个数之间用一个空格隔开。</p>
<p>第一行为两个正整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.393ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 2383.7 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(1051,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1495.7,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container>，代表内存容量和文章的长度。</p>
<p>第二行为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container> 个非负整数，按照文章的顺序，每个数（大小不超过 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.525ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 2000 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path></g></g></g></svg></mjx-container>）代表一个英文单词。文章中两个单词是同一个单词，当且仅当它们对应的非负整数相同。</p>
<h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数，为软件需要查词典的次数。</p>
<h4 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h4><h4 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 7</span><br><span class="line">1 2 1 5 4 4 1</span><br></pre></td></tr></table></figure></div>

<h4 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></div>

<h4 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h4><h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><p>整个查字典过程如下：每行表示一个单词的翻译，冒号前为本次翻译后的内存状况：</p>
<ol>
<li><code>1</code>：查找单词 1 并调入内存。</li>
<li><code>1 2</code>：查找单词 2 并调入内存。</li>
<li><code>1 2</code>：在内存中找到单词 1。</li>
<li><code>1 2 5</code>：查找单词 5 并调入内存。</li>
<li><code>2 5 4</code>：查找单词 4 并调入内存替代单词 1。</li>
<li><code>2 5 4</code>：在内存中找到单词 4。</li>
<li><code>5 4 1</code>：查找单词 1 并调入内存替代单词 2。</li>
</ol>
<p>共计查了 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></svg></mjx-container> 次词典。</p>
<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><ul>
<li>对于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1000 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container> 的数据有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.526ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 2884.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(1328.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2384.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="6.157ex" height="1.857ex" role="img" focusable="false" viewBox="0 -683 2721.6 821"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(2221.6,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></svg></mjx-container>；</li>
<li>对于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.394ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g></g></svg></mjx-container> 的数据有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="12.937ex" height="1.857ex" role="img" focusable="false" viewBox="0 -683 5718.1 821"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(3162.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(4218.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="13.699ex" height="1.857ex" role="img" focusable="false" viewBox="0 -683 6055.1 821"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2999.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(4055.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path></g></g></g></svg></mjx-container>。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">m,n=map(int,input().split())</span><br><span class="line">word=list(map(int,input().split()))</span><br><span class="line"></span><br><span class="line">temp=[]</span><br><span class="line"></span><br><span class="line">res=0</span><br><span class="line">for i in word:</span><br><span class="line">    if i in temp:</span><br><span class="line">        continue</span><br><span class="line">    else:</span><br><span class="line">        if len(temp)&gt;=m:</span><br><span class="line">            temp.pop(0)</span><br><span class="line">            temp.append(i)</span><br><span class="line">            res+=1</span><br><span class="line">        else:</span><br><span class="line">            temp.append(i)</span><br><span class="line">            res+=1</span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>并查集常用于处理一些不相交集合的合并和查询问题。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int p[N];</span><br><span class="line">for (int i = 1; i &lt;= n; i ++ ) p[i] = i;</span><br><span class="line">int find(int x)</span><br><span class="line">{</span><br><span class="line">    if (p[x] != x) p[x] = find(p[x]);</span><br><span class="line">    return p[x];</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>



<h4 id="修复公路"><a href="#修复公路" class="headerlink" title="修复公路"></a>修复公路</h4><h4 id="题目背景-1"><a href="#题目背景-1" class="headerlink" title="题目背景"></a>题目背景</h4><p>A 地区在地震过后，连接所有村庄的公路都造成了损坏而无法通车。政府派人修复这些公路。</p>
<h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>给出 A 地区的村庄数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container>，和公路数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.378ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 1051 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container>，公路是双向的。并告诉你每条公路的连着哪两个村庄，并告诉你什么时候能修完这条公路。问最早什么时候任意两个村庄能够通车，即最早什么时候任意两条村庄都存在至少一条修复完成的道路（可以由多条公路连成一条道路）。</p>
<h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> 行两个正整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.393ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 2383.7 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1332.7,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container>。</p>
<p>下面 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.378ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 1051 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container> 行，每行 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.554ex" role="img" focusable="false" viewBox="0 -665 500 687"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container> 个正整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="5.232ex" height="1.88ex" role="img" focusable="false" viewBox="0 -626 2312.3 831"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1016.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1506.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1951.3,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>，告诉你这条公路连着 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="3.409ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 1506.7 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1016.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 两个村庄，在时间 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container> 时能修复完成这条公路。</p>
<h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果全部公路修复完毕仍然存在两个村庄无法通车，则输出 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="2.891ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 1278 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>，否则输出最早什么时候任意两个村庄能够通车。</p>
<h4 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h4><h4 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 4</span><br><span class="line">1 2 6</span><br><span class="line">1 3 4</span><br><span class="line">1 4 5</span><br><span class="line">4 2 3</span><br></pre></td></tr></table></figure></div>

<h4 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></div>

<h4 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h4><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="18.85ex" height="2.417ex" role="img" focusable="false" viewBox="0 -863.3 8331.9 1068.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2405.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2850.2,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3618,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(4673.8,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(5839.6,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msup" transform="translate(6895.3,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="14.616ex" height="2.394ex" role="img" focusable="false" viewBox="0 -864 6460.3 1058"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(2884.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3329.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(3968,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msup" transform="translate(5023.8,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g></svg></mjx-container>。</p>
<p>如果两个村庄能连通，那么只用检查一个村庄能不能连通其他的村庄。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#dfs超时了一个数据</span><br><span class="line">n,m=map(int,input().split())</span><br><span class="line"></span><br><span class="line">ma=[]</span><br><span class="line">res=-1</span><br><span class="line"></span><br><span class="line">for i in range(m):</span><br><span class="line">    x,y,z=map(int,input().split())</span><br><span class="line">    ma.append([x,y,z])</span><br><span class="line"></span><br><span class="line">ma.sort(key= lambda x:x[2])</span><br><span class="line"></span><br><span class="line">visit=[0]*(n+1)</span><br><span class="line"></span><br><span class="line">def dfs(t):</span><br><span class="line">    visit[t]=1</span><br><span class="line">    for i in d[t]:</span><br><span class="line">        if visit[i]==0:</span><br><span class="line">            dfs(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d=[[] for _ in range(n+1)]</span><br><span class="line">for qwe in ma:</span><br><span class="line">    d[qwe[0]].append(qwe[1])</span><br><span class="line">    d[qwe[1]].append(qwe[0])</span><br><span class="line">    visit = [0] * (n + 1)</span><br><span class="line">    dfs(1)</span><br><span class="line">    if all(visit[1:]):</span><br><span class="line">        res=qwe[2]</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>并查集</p>
<p>连通分量如果变成1，那么每两个节点连通</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def find(parent, x):</span><br><span class="line">    if parent[x] != x:</span><br><span class="line">        parent[x] = find(parent, parent[x])  # 路径压缩，以加快后续查找的速度。</span><br><span class="line">    return parent[x]</span><br><span class="line"></span><br><span class="line">def union(parent, rank, x, y):#将两个节点的祖宗节点跟新为最大的一个，既两个节点连通</span><br><span class="line">    rootX = find(parent, x)</span><br><span class="line">    rootY = find(parent, y)</span><br><span class="line">    if rootX != rootY:</span><br><span class="line">        if rank[rootX] &gt; rank[rootY]:</span><br><span class="line">            parent[rootY] = rootX</span><br><span class="line">        elif rank[rootX] &lt; rank[rootY]:</span><br><span class="line">            parent[rootX] = rootY</span><br><span class="line">        else:</span><br><span class="line">            parent[rootY] = rootX</span><br><span class="line">            rank[rootX] += 1</span><br><span class="line"></span><br><span class="line">n, m = map(int, input().split())</span><br><span class="line"></span><br><span class="line">edges = []</span><br><span class="line">for i in range(m):</span><br><span class="line">    x, y, z = map(int, input().split())</span><br><span class="line">    edges.append((z, x, y))</span><br><span class="line"></span><br><span class="line">edges.sort()  # 按照修复时间排序</span><br><span class="line"></span><br><span class="line">parent = [i for i in range(n + 1)]</span><br><span class="line">rank = [0] * (n + 1)</span><br><span class="line">components = n</span><br><span class="line">res = -1</span><br><span class="line"></span><br><span class="line">for z, x, y in edges:</span><br><span class="line">    if find(parent, x) != find(parent, y):#不是同一个祖宗节点说明不是同一个连通分量</span><br><span class="line">        union(parent, rank, x, y)</span><br><span class="line">        components -= 1  # 连通分量减少</span><br><span class="line">        if components == 1:  # 所有村庄都连通</span><br><span class="line">            res = z</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><h4 id="SNCPC2024-换座位"><a href="#SNCPC2024-换座位" class="headerlink" title="[SNCPC2024] 换座位"></a>[SNCPC2024] 换座位</h4><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>树王国在筹备着举办一次盛大的庆典！</p>
<p>Shirost 作为树王国的庆典设计师，准备邀请 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 个嘉宾来参加本次庆典。庆典上一共准备了 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.489ex" height="1.532ex" role="img" focusable="false" viewBox="0 -666 1100 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 个座位，<strong>一个座位最多只能坐一个人且一个人恰好坐一个座位</strong>。Shirost 初步计划将第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 个嘉宾安排在第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 个座位上。但是总统调查了这 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 个嘉宾的意愿，第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 个嘉宾的心仪座位为第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.937ex" height="1.355ex" role="img" focusable="false" viewBox="0 -441 856 598.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> 个座位。但除非能坐到心仪座位上，否则他们只愿意坐在原来的座位上。总统希望 Shirost 能够修改计划，使得尽可能多的嘉宾坐在他们的心仪座位上。</p>
<p>形式化的讲，你需要找到长为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 的数组 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.71ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 756 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> (<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="21.674ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 9579.8 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2456.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(3512.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4112.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(4556.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5334.6,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msub" transform="translate(6390.3,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7424.1,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(8479.8,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(8979.8,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>) 满足 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="13.539ex" height="2.286ex" role="img" focusable="false" viewBox="0 -716 5984.1 1010.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="2200" d="M0 673Q0 684 7 689T20 694Q32 694 38 680T82 567L126 451H430L473 566Q483 593 494 622T512 668T519 685Q524 694 538 694Q556 692 556 674Q556 670 426 329T293 -15Q288 -22 278 -22T263 -15Q260 -11 131 328T0 673ZM414 410Q414 411 278 411T142 410L278 55L414 410Z"></path></g><g data-mml-node="mi" transform="translate(556,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1178.8,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mi" transform="translate(2234.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2646.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3091.2,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4125,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="msub" transform="translate(5180.7,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container> 且 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="8.552ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 3780.2 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="2200" d="M0 673Q0 684 7 689T20 694Q32 694 38 680T82 567L126 451H430L473 566Q483 593 494 622T512 668T519 685Q524 694 538 694Q556 692 556 674Q556 670 426 329T293 -15Q288 -22 278 -22T263 -15Q260 -11 131 328T0 673ZM414 410Q414 411 278 411T142 410L278 55L414 410Z"></path></g><g data-mml-node="mi" transform="translate(556,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(901,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1345.7,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2379.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3435.2,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 或 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="6.664ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 2945.5 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1033.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2089.5,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>。且最大化 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="6.664ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 2945.5 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1033.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2089.5,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> 的个数。</p>
<p>你只需要输出最多的个数即可。</p>
<h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入第一行为一个整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> (<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="11.773ex" height="2.267ex" role="img" focusable="false" viewBox="0 -864 5203.7 1002"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2711.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msup" transform="translate(3767.1,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g></g></svg></mjx-container>)，表示总人数。</p>
<p>第二行 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 个整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.937ex" height="1.355ex" role="img" focusable="false" viewBox="0 -441 856 598.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> (<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="11.591ex" height="1.864ex" role="img" focusable="false" viewBox="0 -666 5123.1 823.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msub" transform="translate(1833.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2967.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(4023.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(4523.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>)，由空格隔开，表示每个人的心仪座位。</p>
<h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出仅一行一个整数，表示最多有多少嘉宾坐在他们的心仪座位上。</p>
<h4 id="样例-1-3"><a href="#样例-1-3" class="headerlink" title="样例 #1"></a>样例 #1</h4><h4 id="样例输入-1-3"><a href="#样例输入-1-3" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">2 6 4 5 3</span><br></pre></td></tr></table></figure></div>

<h4 id="样例输出-1-3"><a href="#样例输出-1-3" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></div>

<h4 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h4><p>所有人都可以换到自己的心仪座位。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h2><p>二叉堆是一棵完全二叉树，堆中某个节点的值总是不大于或不小于其父节点的值。</p>
<p>python里面内置了堆</p>
<p><a class="link" href="https://qwepure.github.io/2024/04/01/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/index.html?_sw-precache=d368e6f92356d965cf291f25dd9c46ca">最小生成树 - Myblog (qwepure.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>#<strong>heapq.heappush</strong>(queue, (lenx, ne))</p>
<p>#current_distance, current_node = <strong>heapq.heappop</strong>(queue)</p>
<h4 id="【模板】堆"><a href="#【模板】堆" class="headerlink" title="【模板】堆"></a>【模板】堆</h4><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个数列，初始为空，请支持下面三种操作：</p>
<ol>
<li>给定一个整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container>，请将 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container> 加入到数列中。</li>
<li>输出数列中最小的数。</li>
<li>删除数列中最小的数（如果有多个数最小，只删除 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> 个）。</li>
</ol>
<h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行是一个整数，表示操作的次数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>。<br>接下来 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 行，每行表示一次操作。每行首先有一个整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="2.235ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 988 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container> 表示操作类型。</p>
<ul>
<li>若 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="6.384ex" height="1.946ex" role="img" focusable="false" viewBox="0 -666 2821.6 860"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1265.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2321.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>，则后面有一个整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container>，表示要将 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container> 加入数列。</li>
<li>若 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="6.384ex" height="1.946ex" role="img" focusable="false" viewBox="0 -666 2821.6 860"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1265.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2321.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>，则表示要求输出数列中的最小数。</li>
<li>若 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="6.384ex" height="1.943ex" role="img" focusable="false" viewBox="0 -665 2821.6 859"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1265.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2321.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container>，则表示删除数列中的最小数。如果有多个数最小，只删除 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> 个。</li>
</ul>
<h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每个操作 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>，输出一行一个整数表示答案。</p>
<h4 id="样例-1-4"><a href="#样例-1-4" class="headerlink" title="样例 #1"></a>样例 #1</h4><h4 id="样例输入-1-4"><a href="#样例输入-1-4" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 2</span><br><span class="line">1 5</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">2</span><br></pre></td></tr></table></figure></div>

<h4 id="样例输出-1-4"><a href="#样例输出-1-4" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br></pre></td></tr></table></figure></div>

<h4 id="提示-4"><a href="#提示-4" class="headerlink" title="提示"></a>提示</h4><p>【数据规模与约定】</p>
<ul>
<li><p>对于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1000 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container> 的数据，保证 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="6.637ex" height="1.819ex" role="img" focusable="false" viewBox="0 -666 2933.6 804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>。</p>
</li>
<li><p>对于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.579ex" role="img" focusable="false" viewBox="0 -676 1000 698"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container> 的数据，保证 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="7.625ex" height="2.285ex" role="img" focusable="false" viewBox="0 -871.8 3370.1 1009.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msup" transform="translate(1933.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></g></svg></mjx-container>。</p>
</li>
<li><p>对于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.394ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g></g></svg></mjx-container> 的数据，保证 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="11.773ex" height="2.267ex" role="img" focusable="false" viewBox="0 -864 5203.7 1002"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2711.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msup" transform="translate(3767.1,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="11.378ex" height="2.199ex" role="img" focusable="false" viewBox="0 -833.9 5029.2 971.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2683.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="msup" transform="translate(3739.1,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="10.407ex" height="1.946ex" role="img" focusable="false" viewBox="0 -666 4599.9 860"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1265.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2210.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(944.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1444.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1889.3,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></svg></mjx-container>。</p>
<p>python里面内置了堆</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#超时了</span><br><span class="line">import heapq</span><br><span class="line">#**heapq.heappush**(queue, (lenx, ne))</span><br><span class="line">#current_distance, current_node = **heapq.heappop**(queue)</span><br><span class="line">n=int(input())</span><br><span class="line"></span><br><span class="line">queue=[]</span><br><span class="line">for i in range(n):</span><br><span class="line">    l=list(map(int,input().split()))</span><br><span class="line">    a=l[0]</span><br><span class="line">    if a==1:</span><br><span class="line">        heapq.heappush(queue, l[1])</span><br><span class="line">    elif a == 2:</span><br><span class="line">        print(queue[0])</span><br><span class="line">    else:</span><br><span class="line">        heapq.heappop(queue)</span><br></pre></td></tr></table></figure></div>



<h2 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h2><p>ST表可以离线查询区间最值。</p>
<p>“稀疏表”（Sparse Table）算法，稀疏表是一种预处理时间为O(n log n)、查询时间为O(1)的算法，非常适合处理静态区间查询问题。</p>
<h4 id="【模板】ST-表-RMQ-问题"><a href="#【模板】ST-表-RMQ-问题" class="headerlink" title="【模板】ST 表 && RMQ 问题"></a>【模板】ST 表 &amp;&amp; RMQ 问题</h4><h4 id="题目背景-2"><a href="#题目背景-2" class="headerlink" title="题目背景"></a>题目背景</h4><p>这是一道 ST 表经典题——静态区间最大值</p>
<p><strong>请注意最大数据时限只有 0.8s，数据强度不低，请务必保证你的每次查询复杂度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.618ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2041 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。若使用更高时间复杂度算法不保证能通过。</strong></p>
<p>如果您认为您的代码时间复杂度正确但是 TLE，可以尝试使用快速读入：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>){<span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();}</span><br><span class="line">	<span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>){x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=<span class="built_in">getchar</span>();}</span><br><span class="line">	<span class="keyword">return</span> x*f;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>函数返回值为读入的第一个整数。</p>
<p><strong>快速读入作用仅为加快读入，并非强制使用。</strong></p>
<h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个长度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container> 的数列，和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.378ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 1051 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container> 次询问，求出每一次询问的区间内数字的最大值。</p>
<h4 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.393ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 2383.7 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1332.7,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container>，分别表示数列的长度和询问的个数。</p>
<p>第二行包含 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container> 个整数（记为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.937ex" height="1.355ex" role="img" focusable="false" viewBox="0 -441 856 598.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>），依次表示数列的第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 项。</p>
<p>接下来 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.378ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 1051 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container> 行，每行包含两个整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="4.18ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 1847.6 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(331,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(625,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1069.6,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(484,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>，表示查询的区间为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.438ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2403.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(278,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(331,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(903,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1347.6,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(484,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2125.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>。</p>
<h4 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出包含 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.378ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 1051 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container> 行，每行一个整数，依次表示每一次询问的结果。</p>
<h4 id="样例-1-5"><a href="#样例-1-5" class="headerlink" title="样例 #1"></a>样例 #1</h4><h4 id="样例输入-1-5"><a href="#样例输入-1-5" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">8 8</span><br><span class="line">9 3 1 7 5 6 0 8</span><br><span class="line">1 6</span><br><span class="line">1 5</span><br><span class="line">2 7</span><br><span class="line">2 6</span><br><span class="line">1 8</span><br><span class="line">4 8</span><br><span class="line">3 7</span><br><span class="line">1 8</span><br></pre></td></tr></table></figure></div>

<h4 id="样例输出-1-5"><a href="#样例输出-1-5" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">9</span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">9</span><br></pre></td></tr></table></figure></div>

<h4 id="提示-5"><a href="#提示-5" class="headerlink" title="提示"></a>提示</h4><p>对于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1000 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container> 的数据，满足 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="14.821ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 6550.8 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2721.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3166.2,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(4495,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(5550.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>。</p>
<p>对于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.579ex" role="img" focusable="false" viewBox="0 -676 1000 698"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container> 的数据，满足 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="15.808ex" height="2.394ex" role="img" focusable="false" viewBox="0 -864 6987.3 1058"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2721.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3166.2,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(4495,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msup" transform="translate(5550.8,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g></svg></mjx-container>。</p>
<p>对于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.394ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g></g></svg></mjx-container> 的数据，满足 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="12.425ex" height="2.267ex" role="img" focusable="false" viewBox="0 -864 5491.7 1002"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2999.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msup" transform="translate(4055.1,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="16.69ex" height="2.267ex" role="img" focusable="false" viewBox="0 -864 7377.1 1002"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(3162.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(4218.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(4940.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(5940.6,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.348ex" height="2.52ex" role="img" focusable="false" viewBox="0 -864 5015.7 1114"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1133.7,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(2078.5,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2356.5,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2856.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(3301.2,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g><g data-mml-node="mo" transform="translate(4737.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="15.366ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 6791.6 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msub" transform="translate(1833.6,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(331,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2736.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msub" transform="translate(3792.1,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(484,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4847.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(5903.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container>。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#普通操作超时</span><br><span class="line">n,m=map(int,input().split())</span><br><span class="line">l=list(map(int,input().split()))</span><br><span class="line"></span><br><span class="line">for i in range(m):</span><br><span class="line">    a,b=map(int,input().split())</span><br><span class="line">    print(max(l[a-1:b]))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>考虑到每次求最大值的时候会有重复的，利用空间换时间，</p>
<p>倍增：每一个数字可以又2的次方相加组成</p>
<p>[i,j] :从i开始的2的j次方 [i,i+<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.978ex" height="1.992ex" role="img" focusable="false" viewBox="0 -880.4 874.3 880.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container>-1]</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202408101253839.png" alt="13674417232619512"></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><h4 id="【模板】树状数组-1"><a href="#【模板】树状数组-1" class="headerlink" title="【模板】树状数组 1"></a>【模板】树状数组 1</h4><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>如题，已知一个数列，你需要进行下面两种操作：</p>
<ul>
<li><p>将某一个数加上 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></p>
</li>
<li><p>求出某区间每一个数的和</p>
</li>
</ul>
<h4 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个正整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="4.35ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 1922.7 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1044.7,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>，分别表示该数列数字的个数和操作的总个数。   </p>
<p>第二行包含 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 个用空格分隔的整数，其中第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 个数字表示数列第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 项的初始值。</p>
<p>接下来 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 行每行包含 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.554ex" role="img" focusable="false" viewBox="0 -665 500 687"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container> 个整数，表示一个操作，具体如下：</p>
<ul>
<li><p><code>1 x k</code>  含义：将第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container> 个数加上 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container></p>
</li>
<li><p><code>2 x y</code>  含义：输出区间 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.667ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2062.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(850,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1294.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1784.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container> 内每个数的和</p>
</li>
</ul>
<h4 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出包含若干行整数，即为所有操作 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container> 的结果。</p>
<h4 id="样例-1-6"><a href="#样例-1-6" class="headerlink" title="样例 #1"></a>样例 #1</h4><h4 id="样例输入-1-6"><a href="#样例输入-1-6" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 5 4 2 3</span><br><span class="line">1 1 3</span><br><span class="line">2 2 5</span><br><span class="line">1 3 -1</span><br><span class="line">1 4 2</span><br><span class="line">2 1 4</span><br></pre></td></tr></table></figure></div>

<h4 id="样例输出-1-6"><a href="#样例输出-1-6" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">14</span><br><span class="line">16</span><br></pre></td></tr></table></figure></div>

<h4 id="提示-6"><a href="#提示-6" class="headerlink" title="提示"></a>提示</h4><p>【数据范围】</p>
<p>对于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1000 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container> 的数据，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="9.654ex" height="1.819ex" role="img" focusable="false" viewBox="0 -666 4267.1 804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2711.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(3767.1,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="11.414ex" height="1.819ex" role="img" focusable="false" viewBox="0 -666 5045.1 804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2989.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(4045.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>；<br>对于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.579ex" role="img" focusable="false" viewBox="0 -676 1000 698"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container> 的数据，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="14.765ex" height="2.411ex" role="img" focusable="false" viewBox="0 -871.8 6526.3 1065.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2433.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2878.2,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4034,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msup" transform="translate(5089.8,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></g></svg></mjx-container>；<br>对于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.394ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g></g></svg></mjx-container> 的数据，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="18.662ex" height="2.394ex" role="img" focusable="false" viewBox="0 -864 8248.8 1058"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2433.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2878.2,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4034,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(5089.8,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(5812,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(6812.2,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g></svg></mjx-container>。</p>
<p>数据保证对于任意时刻，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container> 的任意子区间（包括长度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 的子区间）和均在 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.113ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 4469.9 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(1056,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(2346.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(2790.8,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(4080.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 范围内。</p>
<p>样例说明：</p>
<p> <img lazyload="" src="/images/loading.svg" data-src="https://cdn.luogu.com.cn/upload/pic/2256.png"> </p>
<p>故输出结果14、16</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#超时</span><br><span class="line">n, m = map(int, input().split())</span><br><span class="line">l=list(map(int, input().split()))</span><br><span class="line"></span><br><span class="line">for i in range(m):</span><br><span class="line">    a,b,c=map(int, input().split())</span><br><span class="line">    if a==1:</span><br><span class="line">        l[b-1]+=c</span><br><span class="line">    else:</span><br><span class="line">        print(sum(l[b-1:c]))</span><br></pre></td></tr></table></figure></div>

<p>sum求和重复计算</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202408101256834.png" alt="10359717232657652"></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>







<h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><p><a class="link" href="https://www.acwing.com/problem/content/description/1267/">1265. 数星星 - AcWing题库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>max_x 和树的范围要注意</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">MAX_X = <span class="number">32001</span> <span class="comment"># from [0, 32000]==&gt;[1, 32001]</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    树状数组板子</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">tree = [<span class="number">0</span>]*(MAX_X+<span class="number">1</span>) <span class="comment"># 树状数组 from 1-&gt;n</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lowbit</span>(<span class="params">x</span>):<span class="comment">#看二进制后缀0</span></span><br><span class="line">    <span class="keyword">return</span> x&amp;-x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, value</span>):<span class="comment">#更新线段树</span></span><br><span class="line">    <span class="keyword">while</span> x&lt;=MAX_X:</span><br><span class="line">        tree[x] += value</span><br><span class="line">        x += lowbit(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sum</span>(<span class="params">x</span>):<span class="comment">#遍历线段树，求区间和</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> x&gt;=<span class="number">1</span>:<span class="comment">#一般不从0</span></span><br><span class="line">        res += tree[x]</span><br><span class="line">        x -= lowbit(x)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    动态解决</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">levels = [<span class="number">0</span>] * (n)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    x, y = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line">    level = get_sum(x)</span><br><span class="line">    add(x, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    levels[level]+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">print</span>(levels[i])</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>深度和广度搜索</title>
    <url>/2024/04/02/%E6%B7%B1%E5%BA%A6%E5%92%8C%E5%B9%BF%E5%BA%A6%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h2 id="深度搜索"><a href="#深度搜索" class="headerlink" title="深度搜索"></a>深度搜索</h2><p>全排列，回溯法</p>
<p><a class="link" href="https://leetcode.cn/problems/combinations/solutions/405665/python-jian-dan-de-hui-su-fa-by-zhengvh/">77. 组合 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://leetcode.cn/problems/Ygoe9J/description/">LCR 081. 组合总和 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://leetcode.cn/problems/combination-sum-ii/submissions/519641217/">40. 组合总和 II - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>无重复组合</p>
<p>有重复组合</p>
<p>有限制条件组合</p>
<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">combine</span>(<span class="params">n,k</span>):</span><br><span class="line">    nums = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>)]</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrace</span>(<span class="params">nums_b, curr_res, index</span>):<span class="comment">#要组合的数，当前的组合，回溯的下标</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(curr_res) == k:<span class="comment">#当前组合的是否达到k（是否回溯）</span></span><br><span class="line">            res.append(curr_res[:])  <span class="comment">#把满足的组合复制到解答数组里面###不能省略[:]</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index, n):<span class="comment">#这里保证了每次添加的数不重复，i是选的添加的数</span></span><br><span class="line">            curr_res.append(nums[i])</span><br><span class="line">            backtrace(nums_b[index:], curr_res, i + <span class="number">1</span>)<span class="comment">#当前操作的数组，当前已经的组合，需要操作的数的起始下标</span></span><br><span class="line">            curr_res.pop()<span class="comment">#每次到头后返回之后要删除已经选择的数字</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">##特殊情况处理#本题不需要考虑</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> k == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    backtrace(nums, [], <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(combine(<span class="number">4</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure></div>

<p>###不是所有的编程语言都会出现这种问题。这个问题通常出现在像Python这样的语言中，其中<strong><em>函数参数</em>传递的是引用而不是值的拷贝</strong>。因此，<strong>如果你修改了传递的可变对象，原始对象也会被修改</strong>。</p>
<p>相比之下，像Java、C++等语言中，函数参数传递的是值的拷贝，因此修改传递的对象不会影响原始对象。这意味着在这些语言中，不会出现你在Python中遇到的这种问题。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combine</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        ans = []</span><br><span class="line">        path = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i: <span class="built_in">int</span></span>):</span><br><span class="line">            d = k - <span class="built_in">len</span>(path)</span><br><span class="line">            <span class="keyword">if</span> d == <span class="number">0</span>:</span><br><span class="line">                ans.append(path[:])  <span class="comment"># 使用切片复制列表，避免引用问题</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">			<span class="keyword">if</span> n - i + <span class="number">1</span> &lt; d:<span class="comment">#如果待选的数的个数小于需要的数，则跳过（剪支</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n + <span class="number">1</span> - d + <span class="number">1</span>):</span><br><span class="line">                path.append(j)</span><br><span class="line">                dfs(j + <span class="number">1</span>)</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from itertools import combinations</span><br><span class="line"></span><br><span class="line"># 定义一个列表</span><br><span class="line">lst = [1, 2, 3, 4]</span><br><span class="line"></span><br><span class="line"># 生成所有长度为 2 的组合</span><br><span class="line">comb = combinations(lst, 2)</span><br><span class="line"></span><br><span class="line"># 遍历输出组合</span><br><span class="line">for c in comb:</span><br><span class="line">    print(c)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h4 id="本题特殊优化"><a href="#本题特殊优化" class="headerlink" title="本题特殊优化"></a><strong>本题特殊优化</strong></h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combine</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        ans = []</span><br><span class="line">        path = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:<span class="comment">#倒序选</span></span><br><span class="line">            d = k - <span class="built_in">len</span>(path)  <span class="comment"># 还要选 d 个数</span></span><br><span class="line">            <span class="keyword">if</span> d == <span class="number">0</span>:</span><br><span class="line">                ans.append(path.copy())</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 不选 i</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; d:<span class="comment">#</span></span><br><span class="line">            	dfs(i - <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 选 i</span></span><br><span class="line">            path.append(i)</span><br><span class="line">            dfs(i - <span class="number">1</span>)</span><br><span class="line">            path.pop()</span><br><span class="line">        dfs(n)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="广度搜索"><a href="#广度搜索" class="headerlink" title="广度搜索"></a>广度搜索</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h2><p><a class="link" href="https://www.acwing.com/problem/content/1564/">1562. 微博转发 - AcWing题库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>这题推荐用bfs</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n, l = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">f = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    li = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    <span class="keyword">if</span> li[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> li[<span class="number">1</span>:]:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> f[j]:</span><br><span class="line">            f[j].append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zf</span>(<span class="params">q, s, count</span>):</span><br><span class="line">    s[q] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count == l:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    res = <span class="number">1</span>  <span class="comment"># 初始化结果为 1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> f[q]:</span><br><span class="line">        <span class="keyword">if</span> s[j] == <span class="number">0</span>:</span><br><span class="line">            res += zf(j, s, count + <span class="number">1</span>)  <span class="comment"># 继续递归并累加结果</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">k = li[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k + <span class="number">1</span>):</span><br><span class="line">    s = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    res = zf(li[i], s,<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(res-<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h2>]]></content>
      <categories>
        <category>AC</category>
      </categories>
      <tags>
        <tag>深度和广度搜索</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>最小生成树，最短路</title>
    <url>/2024/04/01/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h2 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h2><p>适用于稠密，任意两点的距离</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">void floyd()</span><br><span class="line">{</span><br><span class="line">    for (int k = 1; k &lt;= n; k ++ )</span><br><span class="line">        for (int i = 1; i &lt;= n; i ++ )</span><br><span class="line">            for (int j = 1; j &lt;= n; j ++ )</span><br><span class="line">                d[i][j] = min(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>



<h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><p>适用于稀疏，单源路径</p>
<p>利用dis数组来记录到达每个点最小的距离</p>
<h3 id="朴素"><a href="#朴素" class="headerlink" title="朴素"></a>朴素</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">void dijkstra()</span><br><span class="line">{</span><br><span class="line">	d[1] = 0;</span><br><span class="line">	for(int i = 0; i &lt; n; i++)</span><br><span class="line">	{</span><br><span class="line">	    int m = INF;</span><br><span class="line">	    int x = 0;</span><br><span class="line">	    for(int j = 1; j &lt;= n; j++)</span><br><span class="line">	    {</span><br><span class="line">	        if(!flag[j] &amp;amp;&amp;amp; d[j] &lt; m)</span><br><span class="line">	        {</span><br><span class="line">	            m = d[j];</span><br><span class="line">	            x = j;</span><br><span class="line">	        }</span><br><span class="line">	    }</span><br><span class="line">	    flag[x] = true;</span><br><span class="line">	    for (int j = 1; j &lt;= n; j++ )</span><br><span class="line">	    {</span><br><span class="line">	        if(!flag[j])</span><br><span class="line">	        {</span><br><span class="line">	            d[j] = min(d[j], d[x] + g[x][j]);</span><br><span class="line">	        }</span><br><span class="line">	    }</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>



<h3 id="堆优化"><a href="#堆优化" class="headerlink" title="堆优化"></a>堆优化</h3><p>引入<strong>heapq</strong>（小顶堆）是因为方便找到最小的距离</p>
<p>#current_distance, current_node = <strong>heapq.heappop</strong>(queue)</p>
<p>上面操作是删除队列里面最小的元组，且保证依然是堆（排序的依据是元组里面的第1个数）</p>
<p>#<strong>heapq.heappush</strong>(queue, (lenx, ne))</p>
<p>上面操作是输入队列的时候保证最小的在前面，是小顶堆</p>
<p><a class="link" href="https://blog.csdn.net/chandelierds/article/details/91357784">Python中heapq模块浅析_heapq.heappush-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dijkstra</span>(<span class="params">graph, start</span>):</span><br><span class="line">    <span class="comment"># 创建一个字典，用于存储每个节点的最短路径距离</span></span><br><span class="line">    dis = {node: <span class="built_in">float</span>(<span class="string">'inf'</span>) <span class="keyword">for</span> node <span class="keyword">in</span> graph}</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将起始节点的最短路径距离设为0</span></span><br><span class="line">    dis[start] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用优先队列来存储待处理的节点</span></span><br><span class="line">    queue = [(<span class="number">0</span>, start)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        <span class="comment"># 从优先队列中取出当前距离最短的节点</span></span><br><span class="line">        c_dis, current_node = heapq.heappop(queue)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果当前节点的距离已经大于记录的距离，则忽略该节点</span></span><br><span class="line">        <span class="keyword">if</span> c_dis &gt; dis[current_node]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历当前节点的邻居节点</span></span><br><span class="line">        <span class="keyword">for</span> ne, w <span class="keyword">in</span> graph[current_node].items():</span><br><span class="line">            lenx = c_dis + w</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果经过当前节点到达邻居节点的距离更短，则更新最短路径距离</span></span><br><span class="line">            <span class="keyword">if</span> lenx &lt; dis[ne]:</span><br><span class="line">                dis[ne] = lenx<span class="comment">#这里跟新一次后记录的就是最短路径</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将邻居节点及其距离加入优先队列</span></span><br><span class="line">                heapq.heappush(queue, (lenx, ne))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例图的邻接表表示</span></span><br><span class="line">graph = {</span><br><span class="line">    <span class="string">'A'</span>: {<span class="string">'B'</span>: <span class="number">3</span>, <span class="string">'C'</span>: <span class="number">2</span>},</span><br><span class="line">    <span class="string">'B'</span>: {<span class="string">'A'</span>: <span class="number">3</span>, <span class="string">'C'</span>: <span class="number">1</span>, <span class="string">'D'</span>: <span class="number">5</span>},</span><br><span class="line">    <span class="string">'C'</span>: {<span class="string">'A'</span>: <span class="number">2</span>, <span class="string">'B'</span>: <span class="number">1</span>, <span class="string">'D'</span>: <span class="number">3</span>},</span><br><span class="line">    <span class="string">'D'</span>: {<span class="string">'B'</span>: <span class="number">5</span>, <span class="string">'C'</span>: <span class="number">3</span>}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">start_node = <span class="string">'A'</span></span><br><span class="line">shortest_distances = dijkstra(graph, start_node)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"从节点 <span class="subst">{start_node}</span> 出发到达其他节点的最短路径距离:"</span>)</span><br><span class="line"><span class="keyword">for</span> node, distance <span class="keyword">in</span> shortest_distances.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"<span class="subst">{node}</span>: <span class="subst">{distance}</span>"</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>











<p><img lazyload="" src="/images/loading.svg" data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404081540682.png" alt="在这里插入图片描述"></p>
<h2 id="prim"><a href="#prim" class="headerlink" title="prim"></a>prim</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">INF = <span class="built_in">float</span>(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prim</span>(<span class="params">pos</span>):</span><br><span class="line">    <span class="keyword">global</span> <span class="built_in">sum</span></span><br><span class="line">    dist[pos] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        cur = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> vis[j] <span class="keyword">and</span> (cur == -<span class="number">1</span> <span class="keyword">or</span> dist[j] &lt; dist[cur]):</span><br><span class="line">                cur = j</span><br><span class="line">        <span class="keyword">if</span> dist[cur] &gt;= INF:</span><br><span class="line">            <span class="keyword">return</span> INF</span><br><span class="line">        <span class="built_in">sum</span> += dist[cur]</span><br><span class="line">        vis[cur] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> vis[k]:</span><br><span class="line">                dist[k] = <span class="built_in">min</span>(dist[k], a[cur][k])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">a = [[INF] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">dist = [INF] * (n + <span class="number">1</span>)</span><br><span class="line">vis = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    u, v, w = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    a[u][v] = <span class="built_in">min</span>(a[u][v], w)</span><br><span class="line">    a[v][u] = <span class="built_in">min</span>(a[v][u], w)</span><br><span class="line"></span><br><span class="line">value = prim(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> value &gt;= INF:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"impossible"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="kruskal"><a href="#kruskal" class="headerlink" title="kruskal"></a>kruskal</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x <span class="keyword">if</span> x == fa[x] <span class="keyword">else</span> get(fa[x])</span><br><span class="line"></span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">edge = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    x, y, z = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    edge.append((x, y, z))</span><br><span class="line"></span><br><span class="line">edge.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">2</span>])</span><br><span class="line">fa = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> edge:</span><br><span class="line">    x = get(e[<span class="number">0</span>])</span><br><span class="line">    y = get(e[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> x == y:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    fa[y] = x</span><br><span class="line">    <span class="built_in">sum</span> += e[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">ans = <span class="built_in">sum</span>([<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>) <span class="keyword">if</span> i == fa[i]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ans &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"impossible"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>AC</category>
        <category>题型</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>进制转换</title>
    <url>/2024/04/10/%E8%BF%9B%E5%88%B6/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p>数将整数从一个进制转换到另一个进制。以下是几个常用的函数：</p>
<p><strong>bin()</strong>: 将整数转换为<strong>二进制</strong>字符串。</p>
<p><strong>oct()</strong>: 将整数转换为<strong>八进制</strong>字符串。</p>
<p><strong>hex()</strong>: 将整数转换为<strong>十六进制</strong>字符串。</p>
<p><strong>int()</strong>: 将字符串表示的<strong>其他进制</strong>数转换为<strong>十进制整数</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="string">"2022"</span><span class="comment">#9进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(s,<span class="number">9</span>)) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a=<span class="string">"a"</span><span class="comment">#a代表10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(a,<span class="number">12</span>))</span><br></pre></td></tr></table></figure></div>



<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p><img lazyload="" src="/images/loading.svg" data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404101115581.png" alt="image-20240410111526814"></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line">    n=<span class="built_in">list</span>(n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i % <span class="built_in">sum</span>(<span class="built_in">int</span>(digit, <span class="number">16</span>) <span class="keyword">for</span> digit <span class="keyword">in</span> n) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">c1</span>(<span class="params">i,b, o, h</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> (i, b, o, h):  <span class="comment"># 分别遍历每个字符串</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> check(j):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> res!=<span class="number">2023</span>:</span><br><span class="line">    d=<span class="built_in">str</span>(i)</span><br><span class="line">    b = <span class="built_in">str</span>(<span class="built_in">bin</span>(i)[<span class="number">2</span>:])</span><br><span class="line">    o = <span class="built_in">str</span>(<span class="built_in">oct</span>(i))[<span class="number">2</span>:]</span><br><span class="line">    h = <span class="built_in">str</span>(<span class="built_in">hex</span>(i))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> c1(d, b, o, h):</span><br><span class="line">        res += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> res == <span class="number">2023</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>AC</category>
        <category>题型</category>
      </categories>
      <tags>
        <tag>进制</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算</title>
    <url>/2024/04/18/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<hr>
<h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404181022150.jpeg"
                      alt="image"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404181022370.jpeg"
                      alt="image"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404181022212.jpeg"
                      alt="image"
                ></p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h5 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h5><p><strong>1.</strong></p>
<p><a class="link"   href="https://leetcode.cn/problems/number-of-1-bits/description/" >191. 位1的个数 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310171223828.png"
                      alt="image-20231017122309401"
                ></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">hammingWeight</span><span class="params">(<span class="type">uint32_t</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; (<span class="number">1u</span> &lt;&lt; i)) &#123;</span><br><span class="line">            ret++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hammingWeight</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        a=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">            a+=<span class="number">1</span></span><br><span class="line">            n &amp;= n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">        </span><br></pre></td></tr></table></figure></div>

<p><strong>2.</strong></p>
<p><a class="link"   href="https://leetcode.cn/problems/qiu-12n-lcof/description/" >LCR 189. 设计机械累加器 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310171224757.png"
                      alt="image-20231017122408772"
                ></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sumNums</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    n &amp;&amp; (n+=sumNums(n<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mechanicalAccumulator</span>(<span class="params">self, target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        target &gt; <span class="number">1</span> <span class="keyword">and</span> self.mechanicalAccumulator(target - <span class="number">1</span>)</span><br><span class="line">        self.res += target</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>3.</strong></p>
<p><a class="link"   href="https://leetcode.cn/problems/sum-of-two-integers/description/" >371. 两整数之和 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202310171222610.png"
                      alt="image-20231017122228271"
                ></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	<span class="keyword">return</span> add(a^b,((<span class="type">unsigned</span> <span class="type">int</span>)(a&amp;b))&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getSum</span>(<span class="params">self, a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        x = <span class="number">0xffffffff</span></span><br><span class="line">        a, b = a &amp; x, b &amp; x</span><br><span class="line">        <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">            a, b = (a ^ b), (a &amp; b) &lt;&lt; <span class="number">1</span> &amp; x</span><br><span class="line">        <span class="keyword">return</span> a <span class="keyword">if</span> a &lt;= <span class="number">0x7fffffff</span> <span class="keyword">else</span> ~(a ^ x)</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>AC</category>
        <category>题型</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>python技巧</title>
    <url>/2024/04/18/python%E6%A0%87%E5%87%86%E5%BA%93%E5%9C%A8%E9%A2%98%E7%9B%AE%E6%96%B9%E9%9D%A2%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p>1</p>
<ul>
<li><p>当统计一个数字出现的次数的时候可以用字典（.items 来选择字典的key）</p>
</li>
<li><p>链表可以用字典</p>
</li>
<li><p>定义无穷小   float(‘-inf’)</p>
</li>
<li><p>Null在py里面是None</p>
</li>
<li><p>一个数异或1，那个数的二进制位与1异或，结果为二进制数（其他逻辑运算也一样）</p>
</li>
<li><p>定义多行字符串用三引号</p>
</li>
<li><p>min函数内容不能为空</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">min([],default=float(&#x27;inf&#x27;))#加上defaul解决不能为空的问题</span><br></pre></td></tr></table></figure></div>

</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>双指针和滑动窗口</title>
    <url>/2024/04/18/%E5%8F%8C%E6%8C%87%E9%92%88%E5%92%8C%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    <content><![CDATA[<hr>
<h1 id="双指针和滑动窗口"><a href="#双指针和滑动窗口" class="headerlink" title="双指针和滑动窗口"></a>双指针和滑动窗口</h1><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><p>计算过程仅与<strong>两端点相关</strong>的称为双指针。<br><strong>不固定大小</strong>。<br>双指针可以<strong>同向</strong>移动可以<strong>双向移动</strong>。</p>
<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>计算过程与<strong>两端点表示的区间</strong>相关的称为滑动窗口。<br><strong>默认固定大小</strong>的窗口（区间），在一些条件触发的情况下，可能会将其<strong>大小进行修改</strong>。<br><strong>滑动窗口一定是同向移动的。</strong></p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="滑动窗口-1"><a href="#滑动窗口-1" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p><strong>1.</strong></p>
<p><a class="link"   href="https://leetcode.cn/problems/optimal-partition-of-string/description/" >2405. 子字符串的最优划分 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202311050013646.png"
                      alt="image-20231105001334089"
                ></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>​	遍历，遇到重复的就切割</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">partitionString</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        j, cnt, window = <span class="number">0</span>, <span class="number">0</span>, &#123;&#125;</span><br><span class="line">        <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(s):</span><br><span class="line">            <span class="keyword">if</span> s[j] <span class="keyword">in</span> window: <span class="comment">#如果有重复的值出现，结果加1，重新计算重复</span></span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                window = &#123;&#125;  </span><br><span class="line">            window[s[j]]=<span class="number">0</span><span class="comment">#把新出现的值加入字典</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> cnt + <span class="number">1</span>  </span><br></pre></td></tr></table></figure></div>

<p>还可以用集合，列表来当已经遍历（待切割）的暂存窗口。</p>
<p><strong>2.</strong></p>
<p><a class="link"   href="https://leetcode.cn/problems/longest-subarray-of-1s-after-deleting-one-element/description/" >1493. 删掉一个元素以后全为 1 的最长子数组 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202311030053870.png"
                      alt="image-20231103005258488"
                ></p>
<p><strong>思路</strong></p>
<p>​	定义两个游标<strong>left，right</strong></p>
<p>​	right随着循环移动</p>
<p>​	当符合<strong>判断条件</strong>时<strong>left移动</strong></p>
<p>​	right和left在判断之后，之间的数据为所需要的数据</p>
<p><strong>难点</strong></p>
<p>​	left怎么移动</p>
<h3 id="本题思路"><a href="#本题思路" class="headerlink" title="本题思路"></a>本题思路</h3><p>​	在第一次写的时候把<em><strong>判断条件</strong></em>定为遇到第二个0时，导致解题思路不通畅</p>
<p>​	<strong>判断条件</strong>：包含一个 0 的非空子数组（left右移遇到1继续移直到下一个0）</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestSubarray</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left=right=<span class="number">0</span></span><br><span class="line">        count_0=<span class="number">0</span></span><br><span class="line">        <span class="built_in">max</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> right&lt;<span class="built_in">len</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[right]==<span class="number">0</span>:</span><br><span class="line">                count_0+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> count_0&gt;<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> nums[left]==<span class="number">0</span>:</span><br><span class="line">                    count_0-=<span class="number">1</span></span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">max</span>&lt;right-left:</span><br><span class="line">                <span class="built_in">max</span>=right-left</span><br><span class="line">            right+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span></span><br></pre></td></tr></table></figure></div>



<h2 id="双指针-1"><a href="#双指针-1" class="headerlink" title="双指针"></a>双指针</h2><h5 id="双指针-dp"><a href="#双指针-dp" class="headerlink" title="双指针+dp"></a>双指针+dp</h5><p><a class="link"   href="https://leetcode.cn/problems/count-increasing-quadruplets/description/" >2552. 统计上升四元组 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>nums&#x3D;[1,3,2,4,5]时dp</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202404110929292.png"
                      alt="image-20240411092923823"
                ></p>
<p>dp[i] [nums(j)] 在范围小于i的小于nums[j]的数量</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countQuadruplets</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">        dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">                dp[i][x] = dp[i - <span class="number">1</span>][x]</span><br><span class="line">            dp[i][nums[i]] += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">                dp[i][x] += dp[i][x - <span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n - <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j + <span class="number">1</span>, n - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> nums[k] &lt; nums[j]:</span><br><span class="line">                    ii = dp[j - <span class="number">1</span>][nums[k] - <span class="number">1</span>]</span><br><span class="line">                    ll = (dp[n-<span class="number">1</span>][n] - dp[n-<span class="number">1</span>][nums[j]]) - (dp[k][n] - dp[k][nums[j]])</span><br><span class="line">                    res += ii * ll</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>AC</category>
        <category>题型</category>
      </categories>
      <tags>
        <tag>双指针</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>日期</title>
    <url>/2024/04/15/%E6%97%A5%E6%9C%9F/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="日期库（datetime）"><a href="#日期库（datetime）" class="headerlink" title="日期库（datetime）"></a>日期库（<em><strong>datetime</strong></em>）</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import datetime</span><br></pre></td></tr></table></figure></div>

<h2 id="datetime-datetime-类"><a href="#datetime-datetime-类" class="headerlink" title="datetime.datetime 类"></a>datetime.datetime 类</h2><p>**<code>strftime(format)</code>**：格式化日期和时间为指定格式的字符串。</p>
<p>**<code>strptime(date_string, format)</code>**：从字符串解析日期和时间</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">dt = datetime.now()  # 获取当前日期时间</span><br><span class="line"></span><br><span class="line">formatted = dt.strftime("%Y-%m-%d %H:%M:%S")  # 格式化日期时间</span><br><span class="line">print(formatted)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="datetime-timedelta-类"><a href="#datetime-timedelta-类" class="headerlink" title="datetime.timedelta 类"></a><code>datetime.timedelta</code> 类</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from datetime import timedelta, datetime</span><br><span class="line"></span><br><span class="line">delta = timedelta(days=2, hours=3)  # 2天3小时 seconds</span><br><span class="line">dt = datetime.now()</span><br><span class="line">new_date = dt + delta  # 当前时间加上时间间隔</span><br><span class="line">print(new_date)</span><br></pre></td></tr></table></figure></div>







<h2 id="计算经过多久时间-datetime"><a href="#计算经过多久时间-datetime" class="headerlink" title="计算经过多久时间(datetime )"></a>计算经过多久时间(datetime )</h2><p><strong>datetime.datetime.fromtimestamp(）</strong></p>
<p>从1970-01-01 08：00：00开始计时，经过（）秒，是什么日期。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mydatetime = datetime.datetime.fromtimestamp(<span class="number">60</span>)</span><br><span class="line"><span class="built_in">print</span>(mydatetime)</span><br><span class="line"><span class="comment">#1970-01-01 08:01:00</span></span><br></pre></td></tr></table></figure></div>

<h2 id="datetime-转换回-unixtimestamp"><a href="#datetime-转换回-unixtimestamp" class="headerlink" title="datetime 转换回 unixtimestamp"></a>datetime 转换回 unixtimestamp</h2><p>你还可以将 datetime 转换回 unixtimestamp，如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">mydatetime.timestamp()</span><br><span class="line"></span><br><span class="line"><span class="comment">#528756281.0</span></span><br></pre></td></tr></table></figure></div>

<h2 id="datetime-转换成-字符型"><a href="#datetime-转换成-字符型" class="headerlink" title="datetime 转换成 字符型"></a>datetime 转换成 字符型</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">dt = datetime.datetime(<span class="number">2001</span>, <span class="number">1</span>, <span class="number">31</span>, <span class="number">10</span>, <span class="number">51</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(dt)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dt))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dt.strftime(<span class="string">'%Y-%m-%d::%H-%M'</span>))<span class="comment">#dt类型没变</span></span><br><span class="line"><span class="comment">#2001-01-31::10-51</span></span><br></pre></td></tr></table></figure></div>

<p>只计算一天的时间</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># hours, minutues, seconds, microseconds</span></span><br><span class="line">tm = datetime.time(<span class="number">10</span>,<span class="number">40</span>,<span class="number">10</span>,<span class="number">102301</span>)</span><br><span class="line"><span class="built_in">print</span>(tm)</span><br><span class="line"></span><br><span class="line"><span class="comment">#datetime.time(10, 40, 10, 102301)</span></span><br></pre></td></tr></table></figure></div>





<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">now=datetime.datetime.now()</span><br><span class="line"><span class="built_in">print</span> now</span><br><span class="line"><span class="comment">#将日期转化为字符串 datetime =&gt; string</span></span><br><span class="line"><span class="built_in">print</span> now.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"> </span><br><span class="line">t_str = <span class="string">'2012-03-05 16:26:23'</span></span><br><span class="line"><span class="comment">#将字符串转换为日期 string =&gt; datetime</span></span><br><span class="line">d=datetime.datetime.strptime(t_str,<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"><span class="built_in">print</span> d</span><br><span class="line"> </span><br><span class="line"><span class="comment">#在datetime模块中有timedelta类，这个类的对象用于表示一个时间间隔，比如两个日#期或者时间的差别。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#计算两个日期的间隔</span></span><br><span class="line">d1 = datetime.datetime.strptime(<span class="string">'2012-03-05 17:41:20'</span>, <span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">d2 = datetime.datetime.strptime(<span class="string">'2012-03-02 17:41:20'</span>, <span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">delta = d1 - d2</span><br><span class="line"><span class="built_in">print</span> delta.days</span><br><span class="line"><span class="built_in">print</span> delta</span><br><span class="line"> </span><br><span class="line"><span class="comment">#今天的n天后的日期。</span></span><br><span class="line">now=datetime.datetime.now()</span><br><span class="line">delta=datetime.timedelta(days=<span class="number">3</span>)</span><br><span class="line">n_days=now+delta</span><br><span class="line"><span class="built_in">print</span> n_days.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>[P11002 <a class="link" href="https://www.luogu.com.cn/problem/P11002">蓝桥杯 2024 省 Python B] 神奇闹钟 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="1-datatime库函数"><a href="#1-datatime库函数" class="headerlink" title="1.datatime库函数"></a>1.datatime库函数</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import datetime</span><br><span class="line"></span><br><span class="line">s = "1970-01-01 00:00:00"</span><br><span class="line"># yyyy-MM-dd HH:mm:ss</span><br><span class="line">s = datetime.datetime.strptime(s, "%Y-%m-%d %H:%M:%S")</span><br><span class="line"></span><br><span class="line">t = int(input())</span><br><span class="line">for i in range(t):</span><br><span class="line">    qwe = input()</span><br><span class="line">    times=qwe[20:]</span><br><span class="line">    e=qwe[:19]</span><br><span class="line"></span><br><span class="line">    e = datetime.datetime.strptime(e, "%Y-%m-%d %H:%M:%S")</span><br><span class="line">    diff = e - s</span><br><span class="line">    delta=diff.total_seconds()//60%int(times)</span><br><span class="line"></span><br><span class="line">    print(str(e-datetime.timedelta(minutes=delta)))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="2-模拟"><a href="#2-模拟" class="headerlink" title="2.模拟"></a>2.模拟</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def is_leap(y):</span><br><span class="line">    return y % 400 == 0 or y % 4 == 0 and y % 100 != 0</span><br></pre></td></tr></table></figure></div>

<h3 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h3><p>对于一个日期，我们可以计算出年份的各个数位上的数字之和，也可以分别计算月和日的各位数字之和。请问从 1900 年 1 月 1 日至 9999 年 12 月 31 日，总共有多少天，年份的数位数字之和等于月的数位数字之和加日的数位数字之和。<br>　例如，2022年11月13日满足要求，因为 2+0+2+2=(1+1)+(1+3) 。<br>　　请提交满足条件的日期的总数量。<br>答案提交<br>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。<br>————————————————</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import datetime</span><br><span class="line"></span><br><span class="line"># 使用四位年份格式 %Y</span><br><span class="line">s = datetime.datetime.strptime("1900-01-01", "%Y-%m-%d")</span><br><span class="line">e = datetime.datetime.strptime("9999-12-31", "%Y-%m-%d")</span><br><span class="line"></span><br><span class="line">res = 0</span><br><span class="line"></span><br><span class="line">while s != e:</span><br><span class="line">    st = str(s)</span><br><span class="line">    # 求和条件检查</span><br><span class="line">    if sum(map(int, st[0:4])) == sum(map(int, st[5:7])) + sum(map(int, st[8:10])):</span><br><span class="line">        res += 1</span><br><span class="line">    # 增加一天</span><br><span class="line">    d = datetime.timedelta(days=1)</span><br><span class="line">    s += d</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>AC</category>
        <category>题型</category>
      </categories>
      <tags>
        <tag>日期</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟</title>
    <url>/2024/04/18/%E6%A8%A1%E6%8B%9F/</url>
    <content><![CDATA[<hr>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202402221751461.png"
                      alt="image-20240222175124331"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line"></span><br><span class="line">l = []</span><br><span class="line"></span><br><span class="line">if n&lt;=1:</span><br><span class="line">    print(0)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line">p = 2</span><br><span class="line">while p &lt;= n:</span><br><span class="line">    if n % p == 0:</span><br><span class="line">        l.append(p)</span><br><span class="line">    p += 1</span><br><span class="line"></span><br><span class="line">m = 1</span><br><span class="line">low = 0</span><br><span class="line">high = 0</span><br><span class="line">mi = 0</span><br><span class="line">ma = 0</span><br><span class="line">for high in range(len(l) - 1):</span><br><span class="line">    if l[high] + 1 == l[high + 1]:</span><br><span class="line">        if high+1 - low + 1 &gt; m:</span><br><span class="line">            res=1</span><br><span class="line">            for i in l[low:high+2]:</span><br><span class="line">                res*=i</span><br><span class="line">            if res&lt;=n:</span><br><span class="line">                mi = low</span><br><span class="line">                ma = high+1</span><br><span class="line">                m = high+1 - low + 1</span><br><span class="line">    else:</span><br><span class="line">        low=high+1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(m)</span><br><span class="line"></span><br><span class="line">la=l[mi:ma+1]</span><br><span class="line">la = list(map(str, la))</span><br><span class="line">print(&quot;*&quot;.join(la))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math <span class="comment">#导入数学计算相关的包</span></span><br><span class="line">maxLen = <span class="number">0</span> <span class="comment">#最长连续因子个数</span></span><br><span class="line">resultList = []<span class="comment">#连续因子</span></span><br><span class="line">isPrimary = <span class="literal">True</span> <span class="comment">#标识是否为质数</span></span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">int</span>(math.sqrt(num))+<span class="number">1</span>):<span class="comment">#从2开始依次遍历至最大因子</span></span><br><span class="line">    tempNum = num</span><br><span class="line">    tempList=[]</span><br><span class="line">    start = i</span><br><span class="line">    <span class="keyword">while</span> tempNum%start==<span class="number">0</span>:<span class="comment">#一轮遍历</span></span><br><span class="line">        isPrimary=<span class="literal">False</span></span><br><span class="line">        tempNum = tempNum//start</span><br><span class="line">        tempList.append(<span class="built_in">str</span>(start))</span><br><span class="line">        start+=<span class="number">1</span></span><br><span class="line">    tempLen=start-i</span><br><span class="line">    <span class="keyword">if</span> tempLen &gt; maxLen :<span class="comment">#更新数据</span></span><br><span class="line">        resultList=tempList</span><br><span class="line">        maxLen=tempLen</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isPrimary == <span class="literal">True</span>:<span class="comment">#输出结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(maxLen)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>.join(resultList))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>AC</category>
        <category>题型</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/05/05/Untitled%202/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>jupyter notebook</title>
    <url>/2024/05/25/Jupyter%20notebook%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    <content><![CDATA[<h2 id="进入方法"><a href="#进入方法" class="headerlink" title="进入方法"></a>进入方法</h2><p>1.在cmd下cd 进入你想操作的文件（eg: T; cd:文件地址）</p>
<p>2.输入jupyter notebook</p>
<p>3.进入输出的网址</p>
<h1 id="Jupyter-notebook快速上手"><a href="#Jupyter-notebook快速上手" class="headerlink" title="Jupyter notebook快速上手"></a>Jupyter notebook快速上手</h1><p>Bilibili视频教程：<a class="link"   href="https://space.bilibili.com/1900783/#/" >同济子豪兄 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br></p>
<p>[TOC]</p>
<h1 id="为什么学Jupyter-notebook？"><a href="#为什么学Jupyter-notebook？" class="headerlink" title="为什么学Jupyter notebook？"></a>为什么学Jupyter notebook？</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/13714448-24964dfe5bf967db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                      alt="jupyter notebook"
                ></p>
<p>能够编写、运行python文件的程序很多，比如python安装自带的IDLE、程序员喜爱的pycharm、数据科学全家桶Anaconda，还有Spyder、Thonny等。</p>
<p>而我，独爱jupyter notebook。</p>
<p>Jupyter notebook是用python进行数据科学、机器学习的必备工具。</p>
<p>突出优点：</p>
<ul>
<li><p>学习Jupyter notebook非常容易，按照我的视频教程一步步做，再自己尝试一下，之后写代码即可健步如飞。</p>
</li>
<li><p>能够独立运行一个、几个或全部python代码块，更容易看到中间变量的值，从而进行调试</p>
</li>
<li><p>可以插入Markdown说明文字和Latex数学公式，让枯燥的代码充满颜值，可读性爆表</p>
</li>
<li><p>能够调用Ipython丰富的“魔法函数”，比如程序计时、重复运行、显示图片等</p>
</li>
<li><p>写好的代码和文档能够以网页和ppt的形式在线分享。<a class="link"   href="https://nbviewer.jupyter.org/" >在线看Jupyter notebook文件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br></p>
</li>
<li><p>可以在云端远程服务器运行，不需本地安装配置各种环境。<a class="link"   href="https://jupyter.org/try" >体验一下 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br></p>
</li>
</ul>
<p>比如下图，包含了Markdown说明文档、代码块、代码运行结果、图片嵌入等元素，特别适合Python数据科学和机器学习撰写文档。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/13714448-2443a11c336e5dcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                      alt="jupyter notebook代码分块运行、嵌入Markdown文档和图片"
                ></p>
<p>吴恩达的《深度学习》慕课的课后编程作业、大数据竞赛网站Kaggle上的代码文档、美国大学的数据科学课程的课后资料及编程作业，都是以jupyter notebook文件的形式给出的，也就是<code>.ipynb</code>文件。</p>
<blockquote>
<p>其实Jupyter notebook不止可以运行python，还可以运行julia、R、Javascript等语言，这也是<code>jupyter</code>这个名字的由来。<a class="link"   href="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels" >Jupyter notebook支持的编程语言 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br></p>
<p>Jupyter notebook集编程和写作于一身，这就叫做“文学编程”。</p>
</blockquote>
<h1 id="Jupyter-notebook——在浏览器网页中运行python"><a href="#Jupyter-notebook——在浏览器网页中运行python" class="headerlink" title="Jupyter notebook——在浏览器网页中运行python"></a>Jupyter notebook——在浏览器网页中运行python</h1><h2 id="Ipython内核——更高级的python解释器"><a href="#Ipython内核——更高级的python解释器" class="headerlink" title="Ipython内核——更高级的python解释器"></a>Ipython内核——更高级的python解释器</h2><p>Jupyter notebook是基于Ipython内核的，在浏览器中以网页形式运行Python代码的工具，十分方便。</p>
<blockquote>
<p>Ipython是啥？</p>
<p>Ipython可以理解成更高级的python解释器，相比原生的python交互式命令行，Ipython有更强大的命令计数、自动补全等交互功能。</p>
<p>Spyder和Jupyter notebook都是以Ipython为内核的。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/13714448-a2490a2882107148.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                      alt="ipython"
                ></p>
<h2 id="安装Jupyter-notebook"><a href="#安装Jupyter-notebook" class="headerlink" title="安装Jupyter notebook"></a>安装Jupyter notebook</h2><p>如果你安装了python数据科学全家桶Anaconda，那么其中自带了Jupyter notebook。</p>
<p>如果你没安装Anaconda，可以直接在命令行里运行这行命令</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">pip install jupyter -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></div>

<h2 id="运行Jupyter-notebook"><a href="#运行Jupyter-notebook" class="headerlink" title="运行Jupyter notebook"></a>运行Jupyter notebook</h2><p>打开命令行，输入<code>jupter notebook</code>，回车。稍等片刻即可跳出浏览器网页。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/13714448-803f32720cf0278e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                      alt="jupyter notebook打开界面"
                ></p>
<p>点击右边的New-Python3即可创建python文档。</p>
<p>点击New-Folder可以创建新文件夹。</p>
<p>点击New-Text File可以创建空的<code>.txt</code>文件。</p>
<p>点击New-Terminal可以打开操作系统命令行，你可以使用操作系统对应的命令行进行目录切换、解压文件等操作。</p>
<p>勾选文件夹，点击rename即可重命名</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/13714448-8919418efb809f54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                      alt="勾选文件夹，点击rename重命名"
                ></p>
<p>最常用的是点击右边的New-Python3，创建python文档。</p>
<h1 id="用Jupyter-notebook写python代码"><a href="#用Jupyter-notebook写python代码" class="headerlink" title="用Jupyter notebook写python代码"></a>用Jupyter notebook写python代码</h1><h2 id="写下并运行第一行python代码"><a href="#写下并运行第一行python代码" class="headerlink" title="写下并运行第一行python代码"></a>写下并运行第一行python代码</h2><p>点击左上角<code>Untitled</code>给新建的python文档文件重新命名。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/13714448-13476809ac9b10e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                      alt="重命名"
                ></p>
<p>在代码框中输入第一行python代码，shift+回车运行</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/13714448-540050c6c6fd06ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                      alt="输入第一行python代码"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/13714448-6be52bc326129244.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                      alt="运行第一行python代码"
                ></p>
<h2 id="蓝绿两模式：命令模式、编辑模式"><a href="#蓝绿两模式：命令模式、编辑模式" class="headerlink" title="蓝绿两模式：命令模式、编辑模式"></a>蓝绿两模式：命令模式、编辑模式</h2><p>Jupyter notebook中，代码和文档都存在于一个个单元格中，每个单元格都有蓝色和绿色两种状态。</p>
<ul>
<li><p>命令模式（蓝色）：用于执行键盘输入的快捷命令（新增单元格、剪切、复制等等）。通过 <code>Esc</code> 键从绿色的编辑模式切换到蓝色的命令模式，此时单元左侧显示蓝色竖线。</p>
</li>
<li><p>编辑模式（绿色）：编辑文本和代码。选中单元并按 <code>Enter</code> 键进入编辑模式，此时单元左侧显示绿色竖线。</p>
</li>
</ul>
<blockquote>
<p>命令模式和编辑模式，其实是源自于著名的vim编辑器，vim编辑器以特别难学和学成之后可以超神而闻名于世。</p>
</blockquote>
<h2 id="两种单元格：代码单元格和Markdown单元格"><a href="#两种单元格：代码单元格和Markdown单元格" class="headerlink" title="两种单元格：代码单元格和Markdown单元格"></a>两种单元格：代码单元格和Markdown单元格</h2><p>Jupyter notebook中，有两种单元格：代码单元格和Markdown单元格。</p>
<ul>
<li>代码单元格：这里是你编写代码的地方，通过按 <code>Shift + Enter</code> 运行代码，其结果显示在本单元下方。代码单元左边有 <code>In [1]:</code> 这样的序列标记，方便人们查看代码的执行次序。在蓝色命令模式下，按<code>y</code>键可以将Markdown单元格转换为代码单元格。</li>
<li>Markdown 单元格：在这里对文本进行编辑，采用 markdown 的语法规范，可以设置文本格式、插入链接、图片甚至数学公式。同样使用 <code>Shift + Enter</code> 运行 markdown 单元来显示渲染后的文本。在蓝色命令模式下按<code>m</code>键可以将代码单元格转换为Markdown单元格。</li>
</ul>
<blockquote>
<p>Markdown是程序员通用的撰写文档的语法，可以轻松实现标题、引用、链接、图片等，非常简洁易学，Github代码托管网站、有道云笔记、简书、知乎、CSDN论坛、电子邮件等都支持Markdown语法。</p>
<p>学习Markdown，推荐我制作的博客和视频教程：</p>
<p><a class="link"   href="https://www.jianshu.com/p/4475b9d8810f" >二十分钟精通排版神器Markdown，从此word和秀米是路人 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br></p>
<p><a class="link"   href="https://www.bilibili.com/video/av35579542" >Bilibili视频：二十分钟精通排版神器Markdown <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br></p>
</blockquote>
<p>编辑Markdown单元格，输入以下内容：</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 我是Markdown一号标题</span></span><br><span class="line"><span class="section">## 我是Markdown二号标题</span></span><br><span class="line"><span class="section">### 我是Markdown三号标题</span></span><br><span class="line">&gt;我是引用，我这行开头有一个灰色竖杠</span><br><span class="line"></span><br><span class="line">[<span class="string">我是外部链接，点我上百度</span>](<span class="link">www.baidu.com</span>)</span><br><span class="line">![<span class="string">我是图片</span>](<span class="link">https://i1.hdslb.com/bfs/face/c59e147cd3b1f6a7bb88690933499354a024b280.jpg@68w_68h.webp</span>)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/13714448-7bf02cfeab7ecf42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                      alt="编辑Markdown单元格"
                ></p>
<p>然后按<code>shift</code>+<code>Enter</code>运行该单元格。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/13714448-6ff0bf8ba88c6b6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                      alt="Markdown渲染效果"
                ></p>
<h1 id="抛弃鼠标，只用键盘"><a href="#抛弃鼠标，只用键盘" class="headerlink" title="抛弃鼠标，只用键盘"></a>抛弃鼠标，只用键盘</h1><p>下面介绍Jupyter notebook快捷键，掌握这些快捷键之后，你将彻底解放你拿鼠标的那只手，更专注、高效地敲代码了。</p>
<h2 id="最常用快捷键（必会）"><a href="#最常用快捷键（必会）" class="headerlink" title="最常用快捷键（必会）"></a>最常用快捷键（必会）</h2><p>h 查看所有快捷键</p>
<p>Enter 从命令模式进入编辑模式</p>
<p>Esc 从编辑模式退回到命令模式</p>
<p>m 将代码单元格转换为Markdown单元格</p>
<p>y 将Markdown单元格转换为代码单元格</p>
<p>shift+Enter 运行本单元格，选择下面的代码块</p>
<p>ctrl+Enter 运行本单元格</p>
<p>alt+Enter 运行本单元格，在下方新建一个单元格</p>
<p>a 在上方新建一个单元格（above）</p>
<p>b 在下方新建一个单元格（below）</p>
<p>d 删除选中的单元格（delete）</p>
<p>x 剪切本单元格</p>
<p>c 复制本单元格</p>
<p>shift v 粘贴到上面</p>
<p>v 粘贴到下面</p>
<p>l 显示代码行号</p>
<h2 id="所有快捷键"><a href="#所有快捷键" class="headerlink" title="所有快捷键"></a>所有快捷键</h2><p>h 查看所有快捷键</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/13714448-b9df2500cb80d59c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                      alt="命令模式快捷键"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/13714448-62d750fe7af8823e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                      alt="编辑模式快捷键"
                ></p>
<h2 id="在Markdown单元格中输入数学公式"><a href="#在Markdown单元格中输入数学公式" class="headerlink" title="在Markdown单元格中输入数学公式"></a>在Markdown单元格中输入数学公式</h2><p>分别在两个Markdown单元格内输入以下内容：</p>
<div class="highlight-container" data-rel="Latex"><figure class="iseeu highlight latex"><table><tr><td class="code"><pre><span class="line">这是爱因斯坦的质能转换方程<span class="built_in">$</span>E=mc<span class="built_in">^</span>2<span class="built_in">$</span>，揭示了质量和能量之间的关系</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Latex"><figure class="iseeu highlight latex"><table><tr><td class="code"><pre><span class="line">这是一元二次方程求解公式</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span>x = <span class="keyword">\frac</span>&#123;-b<span class="keyword">\pm</span> <span class="keyword">\sqrt</span>&#123;b<span class="built_in">^</span>2-4ac&#125;&#125;&#123;2a&#125;<span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">初中数学内容</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/13714448-0bbb7722aef50550.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                      alt="在Markdown单元格中输入Latex公式"
                ></p>
<p>按<code>shift</code>+<code>Enter</code>渲染运行：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/13714448-7fa655030c9da5ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                      alt="渲染之后的Latex数学公式"
                ></p>
<h1 id="数据分析与可视化实战案例：学习时间与成绩的关系（线性回归）"><a href="#数据分析与可视化实战案例：学习时间与成绩的关系（线性回归）" class="headerlink" title="数据分析与可视化实战案例：学习时间与成绩的关系（线性回归）"></a>数据分析与可视化实战案例：学习时间与成绩的关系（线性回归）</h1><p>先用excel把玩数据</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/13714448-8aeb063599a395b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                      alt="excel中的线性回归"
                ></p>
<p>观察数据、导入数据、划分特征和标签、划分训练集和测试集、构建模型，模型可视化</p>
<h1 id="用Jupyter-notebook制作ppt并在线分享"><a href="#用Jupyter-notebook制作ppt并在线分享" class="headerlink" title="用Jupyter notebook制作ppt并在线分享"></a>用Jupyter notebook制作ppt并在线分享</h1><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a class="link"   href="https://www.jianshu.com/p/86117613b7a6" >左手代码，右手写作：你必须会的Jupyter Notebook <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br></p>
<p><a class="link"   href="https://www.jianshu.com/p/4475b9d8810f" >二十分钟精通排版神器Markdown，从此word和秀米是路人 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br></p>
<p><a class="link"   href="https://www.bilibili.com/video/av35579542" >Bilibili视频：二十分钟精通排版神器Markdown <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>jupyter notebook</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/06/13/Untitled%203/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>java语法</title>
    <url>/2024/04/18/java%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>语法</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>c++语法</title>
    <url>/2024/04/18/c++%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫</title>
    <url>/2024/05/23/python%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<hr>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>pyecharts</title>
    <url>/2024/06/13/pyecharts/</url>
    <content><![CDATA[<p><a class="link"   href="https://www.heywhale.com/mw/project/5eb7958f366f4d002d783d4a" >【pyecharts教程】应该是全网最全的教程了～ - Heywhale.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.heywhale.com/mw/project/666a59ecc32ba1f3df7cdde3" >【pyecharts】50个完整例子，带你玩转可视化～ - Heywhale.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>[TOC]</p>
<h2 id="pyecharts安装"><a href="#pyecharts安装" class="headerlink" title="pyecharts安装"></a>pyecharts安装</h2><p>pip install pyecharts</p>
<h3 id="pyecharts-图表类型"><a href="#pyecharts-图表类型" class="headerlink" title="pyecharts 图表类型"></a>pyecharts 图表类型</h3><table>
<thead>
<tr>
<th align="left">图表类型</th>
<th align="left">pyecharts 类</th>
<th align="left">包引入</th>
</tr>
</thead>
<tbody><tr>
<td align="left">折线图</td>
<td align="left"><code>Line</code></td>
<td align="left"><code>from pyecharts.charts import Line</code></td>
</tr>
<tr>
<td align="left">柱状图</td>
<td align="left"><code>Bar</code></td>
<td align="left"><code>from pyecharts.charts import Bar</code></td>
</tr>
<tr>
<td align="left">散点图</td>
<td align="left"><code>Scatter</code></td>
<td align="left"><code>from pyecharts.charts import Scatter</code></td>
</tr>
<tr>
<td align="left">饼图</td>
<td align="left"><code>Pie</code></td>
<td align="left"><code>from pyecharts.charts import Pie</code></td>
</tr>
<tr>
<td align="left">雷达图</td>
<td align="left"><code>Radar</code></td>
<td align="left"><code>from pyecharts.charts import Radar</code></td>
</tr>
<tr>
<td align="left">热力图</td>
<td align="left"><code>HeatMap</code></td>
<td align="left"><code>from pyecharts.charts import HeatMap</code></td>
</tr>
<tr>
<td align="left">K 线图</td>
<td align="left"><code>Kline</code></td>
<td align="left"><code>from pyecharts.charts import Kline</code></td>
</tr>
<tr>
<td align="left">箱线图</td>
<td align="left"><code>Boxplot</code></td>
<td align="left"><code>from pyecharts.charts import Boxplot</code></td>
</tr>
<tr>
<td align="left">地图</td>
<td align="left"><code>Map</code></td>
<td align="left"><code>from pyecharts.charts import Map</code></td>
</tr>
</tbody></table>
<h3 id="创建第一个图表"><a href="#创建第一个图表" class="headerlink" title="创建第一个图表"></a>创建第一个图表</h3><p>接下来我们使用 Pyecharts 创建了一个简单的柱状图，展示了五个月份的销售额:</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">x_data = [<span class="string">&#x27;一月&#x27;</span>, <span class="string">&#x27;二月&#x27;</span>, <span class="string">&#x27;三月&#x27;</span>, <span class="string">&#x27;四月&#x27;</span>, <span class="string">&#x27;五月&#x27;</span>]</span><br><span class="line">y_data = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">30</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建柱状图</span></span><br><span class="line">bar_chart = Bar()</span><br><span class="line">bar_chart.add_xaxis(x_data)</span><br><span class="line">bar_chart.add_yaxis(<span class="string">&quot;销售额&quot;</span>, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以传入路径参数，如 bar_chart.render(&quot;bar_chart.html&quot;)</span></span><br><span class="line">bar_chart.render()<span class="comment">###</span></span><br></pre></td></tr></table></figure></div>

<p><strong>说明：</strong></p>
<ul>
<li><code>add_xaxis</code> 和 <code>add_yaxis</code>：分别用于添加横轴和纵轴的数据。</li>
<li><code>Bar()</code>：创建一个柱状图对象。</li>
</ul>
<p>如果在 <strong>bar_chart.render()</strong> 中不指定文件路径，Pyecharts 默认会在<strong>当前工作目录</strong>下生成一个名为 “render.html” 的文件，即生成的图表将保存在 “render.html” 文件中。</p>
<p>如果你希望图表的文件名有一定的规范，或者想要<strong>指定保存的路径</strong>，可以在 render() 方法中提供文件路径参数。例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">bar_chart.render(&quot;my_bar_chart.html&quot;)</span><br></pre></td></tr></table></figure></div>

<p>这样，生成的图表就会保存在当前工作目录下的 “my_bar_chart.html” 文件中。</p>
<p>以上代码，执行结果为：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2023/12/26f13344b108d4be7556200846ffefd3.png"
                      alt="img"
                ></p>
<p><strong>设置图表配置选项</strong></p>
<p>实例中图表的标题是 “月度销售额柱状图”，横轴是月份，纵轴是销售额，可以根据实际需求调整数据和图表配置：</p>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">x_data = [<span class="string">&#x27;一月&#x27;</span>, <span class="string">&#x27;二月&#x27;</span>, <span class="string">&#x27;三月&#x27;</span>, <span class="string">&#x27;四月&#x27;</span>, <span class="string">&#x27;五月&#x27;</span>]</span><br><span class="line">y_data = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">30</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建柱状图</span></span><br><span class="line">bar_chart = Bar()</span><br><span class="line">bar_chart.add_xaxis(x_data)</span><br><span class="line">bar_chart.add_yaxis(<span class="string">&quot;销售额&quot;</span>, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 配置图表###</span></span><br><span class="line">bar_chart.set_global_opts(</span><br><span class="line">    title_opts=opts.TitleOpts(title=<span class="string">&quot;月度销售额柱状图&quot;</span>),</span><br><span class="line">    xaxis_opts=opts.AxisOpts(name=<span class="string">&quot;月份&quot;</span>),</span><br><span class="line">    yaxis_opts=opts.AxisOpts(name=<span class="string">&quot;销售额（万元）&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 渲染图表</span></span><br><span class="line">bar_chart.render(<span class="string">&quot;bar_chart.html&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p><strong>说明：</strong></p>
<ul>
<li><code>set_global_opts</code>：配置全局选项，包括标题、坐标轴的名称等。</li>
</ul>
<p>生成的图表将保存为 “bar_chart.html” 文件，你可以在浏览器中打开该文件，查看生成的柱状图。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2023/12/37408929ecb93d284bc420fbc12e9ff0.png"
                      alt="img"
                ></p>
<h3 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h3><p>pyecharts 支持主题切换，用户可以根据自己的需求选择合适的主题来改变图表的样式。</p>
<p>pyecharts 提供了 10+ 种内置主题，开发者也可以定制自己喜欢的主题。</p>
<p>以下是一个简单的例子，演示了如何使用 pyecharts 切换主题：</p>
<h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"><span class="comment"># 内置主题类型可查看 pyecharts.globals.ThemeType</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> ThemeType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">x_data = [<span class="string">&#x27;一月&#x27;</span>, <span class="string">&#x27;二月&#x27;</span>, <span class="string">&#x27;三月&#x27;</span>, <span class="string">&#x27;四月&#x27;</span>, <span class="string">&#x27;五月&#x27;</span>]</span><br><span class="line">y_data = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">30</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建柱状图</span></span><br><span class="line">bar_chart = Bar(init_opts=opts.InitOpts(theme=ThemeType.LIGHT))  <span class="comment"># 初始主题为亮色系</span></span><br><span class="line">bar_chart.add_xaxis(x_data)</span><br><span class="line">bar_chart.add_yaxis(<span class="string">&quot;销售额&quot;</span>, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置图表</span></span><br><span class="line">bar_chart.set_global_opts(</span><br><span class="line">    title_opts=opts.TitleOpts(title=<span class="string">&quot;月度销售额柱状图&quot;</span>),</span><br><span class="line">    xaxis_opts=opts.AxisOpts(name=<span class="string">&quot;月份&quot;</span>),</span><br><span class="line">    yaxis_opts=opts.AxisOpts(name=<span class="string">&quot;销售额（万元）&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 切换到暗色系主题###</span></span><br><span class="line">bar_chart.set_global_opts(theme=ThemeType.DARK)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 渲染图表</span></span><br><span class="line">bar_chart.render(<span class="string">&quot;themed_bar_chart.html&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>以上例子演示了如何在 pyecharts 中使用 <code>ThemeType</code> 来切换主题，pyecharts 支持的主题类型包括 <code>LIGHT</code>（亮色系）、<code>DARK</code>（暗色系）等，你可以根据需求选择合适的主题。</p>
<ul>
<li><code>init_opts=opts.InitOpts(theme=ThemeType.LIGHT)</code>：在创建图表对象时，通过 <code>init_opts</code> 参数指定图表的初始主题，这里设置为亮色系。</li>
</ul>
<p>生成的图表如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2023/12/aa84ae9581fcd95f9b40ec6c73f400ef.png"
                      alt="img"
                ></p>
<p>以下是 pyecharts 支持的主题列表：</p>
<p><strong>Light Themes（亮色系主题）:</strong></p>
<ul>
<li><code>&quot;LIGHT&quot;</code>: 亮色系默认主题</li>
<li><code>&quot;WESTEROS&quot;</code>: 经典的暖色调主题</li>
<li><code>&quot;CHALK&quot;</code>: 粉笔风格主题</li>
<li><code>&quot;ESSOS&quot;</code>: 温和的绿色调主题</li>
<li><code>&quot;INFOGRAPHIC&quot;</code>: 信息图形主题</li>
<li><code>&quot;MACARONS&quot;</code>: 美味糖果色主题</li>
</ul>
<p><strong>Dark Themes（暗色系主题）:</strong></p>
<ul>
<li><code>&quot;DARK&quot;</code>: 暗色系默认主题</li>
<li><code>&quot;PURPLE-PASSION&quot;</code>: 深紫色调主题</li>
<li><code>&quot;SHINE&quot;</code>: 简洁的黑色调主题</li>
<li><code>&quot;VINTAGE&quot;</code>: 复古风格主题</li>
<li><code>&quot;ROMA&quot;</code>: 古罗马风格主题</li>
<li><code>&quot;WALDEN&quot;</code>: 森林深色系主题</li>
</ul>
<p>用户可以通过设置自定义的颜色和样式来创建自定义主题。</p>
<hr>
<h2 id="设置全局配置项"><a href="#设置全局配置项" class="headerlink" title="设置全局配置项"></a>设置全局配置项</h2><p>set_global_opts 是 pyecharts 中用于设置全局配置项的方法，该方法允许你配置整个图表的一些全局属性，如标题、坐标轴、图例等。</p>
<p>以下是一些常用的全局配置项：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">bar_chart.set_global_opts(</span><br><span class="line">    title_opts=opts.TitleOpts(title=&quot;月度销售额柱状图&quot;, subtitle=&quot;副标题&quot;),</span><br><span class="line">    xaxis_opts=opts.AxisOpts(name=&quot;月份&quot;),</span><br><span class="line">    yaxis_opts=opts.AxisOpts(name=&quot;销售额（万元）&quot;),</span><br><span class="line">    legend_opts=opts.LegendOpts(pos_left=&quot;center&quot;, pos_top=&quot;top&quot;),</span><br><span class="line">    toolbox_opts=opts.ToolboxOpts(),</span><br><span class="line">    tooltip_opts=opts.TooltipOpts(trigger=&quot;axis&quot;, axis_pointer_type=&quot;cross&quot;),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<p><strong>说明：</strong></p>
<ul>
<li><code>title_opts</code>: <strong>标题</strong>配置项，可以设置主标题和副标题，以及相关的样式设置。</li>
<li><code>xaxis_opts</code> 和 <code>yaxis_opts</code>: <strong>x 轴和 y 轴的配置项</strong>，可以设置轴的名称、轴线样式等。</li>
<li><code>legend_opts</code>: <strong>图例配置项</strong>，可以设置图例的位置、样式等。</li>
<li><code>toolbox_opts</code>: <strong>工具箱配置项</strong>，用于添加一些交互工具，如保存为图片、数据视图等。</li>
<li><code>tooltip_opts</code>: <strong>提示框配置项</strong>，可以设置提示框的触发方式、样式等。</li>
</ul>
<h2 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pyecharts import options as opts</span><br><span class="line">from pyecharts.charts import Bar</span><br><span class="line"></span><br><span class="line"># 准备数据</span><br><span class="line">x_data = [&#x27;一月&#x27;, &#x27;二月&#x27;, &#x27;三月&#x27;, &#x27;四月&#x27;, &#x27;五月&#x27;]</span><br><span class="line">y_data = [10, 20, 15, 25, 30]</span><br><span class="line"></span><br><span class="line"># 创建柱状图</span><br><span class="line">bar_chart = Bar()</span><br><span class="line">bar_chart.add_xaxis(x_data)</span><br><span class="line">bar_chart.add_yaxis(&quot;销售额&quot;, y_data)</span><br><span class="line"></span><br><span class="line"># 配置全局属性</span><br><span class="line">bar_chart.set_global_opts(</span><br><span class="line">    title_opts=opts.TitleOpts(title=&quot;月度销售额柱状图&quot;, subtitle=&quot;副标题&quot;),</span><br><span class="line">    xaxis_opts=opts.AxisOpts(name=&quot;月份&quot;),</span><br><span class="line">    yaxis_opts=opts.AxisOpts(name=&quot;销售额（万元）&quot;),</span><br><span class="line">    legend_opts=opts.LegendOpts(pos_left=&quot;center&quot;, pos_top=&quot;top&quot;),</span><br><span class="line">    toolbox_opts=opts.ToolboxOpts(),</span><br><span class="line">    tooltip_opts=opts.TooltipOpts(trigger=&quot;axis&quot;, axis_pointer_type=&quot;cross&quot;),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 渲染图表</span><br><span class="line">bar_chart.render(&quot;global_options_bar_chart.html&quot;)</span><br></pre></td></tr></table></figure></div>

<p>生成的图表如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2023/12/190eac8906c4561f29a26f110bd9f7fe.png"
                      alt="img"
                ></p>
<h2 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h2><p>以下的在编译器里面运行把chart.render_notebook() 改成 chart.render(“global_options_bar_chart.html”)</p>
<h4 id="1-柱状图堆叠"><a href="#1-柱状图堆叠" class="headerlink" title="1.柱状图堆叠"></a>1.柱状图堆叠</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar_stack</span>():</span><br><span class="line">    bar = Bar(init_opts=opts.InitOpts(theme=<span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">                                      width=<span class="string">&#x27;1000px&#x27;</span>,</span><br><span class="line">                                      height=<span class="string">&#x27;600px&#x27;</span>))</span><br><span class="line">    bar.add_xaxis(Faker.choose())</span><br><span class="line">    <span class="comment"># stack值一样的系列会堆叠在一起</span></span><br><span class="line">    bar.add_yaxis(<span class="string">&#x27;A&#x27;</span>, Faker.values(), stack=<span class="string">&#x27;stack1&#x27;</span>)<span class="comment">### Faker.values()：随机虚假数据</span></span><br><span class="line">    bar.add_yaxis(<span class="string">&#x27;B&#x27;</span>, Faker.values(), stack=<span class="string">&#x27;stack1&#x27;</span>)</span><br><span class="line">    bar.add_yaxis(<span class="string">&#x27;C&#x27;</span>, Faker.values(), stack=<span class="string">&#x27;stack2&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> bar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chart = bar_stack()</span><br><span class="line">chart.render_notebook()</span><br></pre></td></tr></table></figure></div>

<h4 id="2-关闭坐标轴显示"><a href="#2-关闭坐标轴显示" class="headerlink" title="2.关闭坐标轴显示"></a>2.关闭坐标轴显示</h4><p>碰上类目标签过长的时候，可以选择关闭坐标轴，将数据&amp;标签直接显示在图形中；</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar_with_axis_off</span>():</span><br><span class="line">    bar = Bar(init_opts=opts.InitOpts(theme=<span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">                                      width=<span class="string">&#x27;1000px&#x27;</span>,</span><br><span class="line">                                      height=<span class="string">&#x27;600px&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    bar.add_xaxis(Faker.choose())<span class="comment">### Faker.choose()：随机虚假标签</span></span><br><span class="line">    bar.add_yaxis(<span class="string">&#x27;&#x27;</span>, Faker.values())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 碰上类目标签过长的时候，可以选择关闭坐标轴，直接显示在图形中</span></span><br><span class="line">    bar.set_series_opts(label_opts=opts.LabelOpts(position=<span class="string">&#x27;insideLeft&#x27;</span>, formatter=<span class="string">&#x27;&#123;b&#125;:&#123;c&#125;&#x27;</span>))</span><br><span class="line">    <span class="comment">###label_opts：这是一个用于设置标签选项的参数。</span></span><br><span class="line">    <span class="comment">###position=&#x27;insideLeft&#x27;：放在内部的左侧</span></span><br><span class="line">    <span class="comment">###formatter=&#x27;&#123;b&#125;:&#123;c&#125;&#x27;：这个选项指定了标签的格式。&#123;b&#125;代表标签的名称（通常是x轴的标签），&#123;c&#125;代表数据值。</span></span><br><span class="line">    </span><br><span class="line">    bar.set_global_opts(xaxis_opts=opts.AxisOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">                        yaxis_opts=opts.AxisOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">    bar.reversal_axis()<span class="comment">###反转柱状图的坐标轴，即将横轴和纵轴进行交换</span></span><br><span class="line">    <span class="keyword">return</span> bar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chart = bar_with_axis_off()<span class="comment">#&#x27;function&#x27; object has no attribute &#x27;render&#x27;</span></span><br><span class="line">chart.render_notebook()</span><br></pre></td></tr></table></figure></div>

<h4 id="3-自定义坐标轴标签文本（在已有的数据基础上）"><a href="#3-自定义坐标轴标签文本（在已有的数据基础上）" class="headerlink" title="3.自定义坐标轴标签文本（在已有的数据基础上）"></a>3.自定义坐标轴标签文本（在已有的数据基础上）</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">x_data = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2010</span>, <span class="number">2020</span>))</span><br><span class="line">y_data = [random.randint(<span class="number">20</span>, <span class="number">200</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x_data))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar_with_custom_axis_label</span>():</span><br><span class="line">    bar = Bar(init_opts=opts.InitOpts(theme=<span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">                                      width=<span class="string">&#x27;1000px&#x27;</span>,</span><br><span class="line">                                      height=<span class="string">&#x27;600px&#x27;</span>))</span><br><span class="line">    bar.add_xaxis(x_data)</span><br><span class="line">    bar.add_yaxis(<span class="string">&#x27;&#x27;</span>, y_data)</span><br><span class="line"></span><br><span class="line">    bar.set_global_opts(xaxis_opts=opts.AxisOpts(</span><br><span class="line">        <span class="comment"># 自定义坐标轴标签，在年份后加上`年`</span></span><br><span class="line">        axislabel_opts=opts.LabelOpts(formatter=<span class="string">&#x27;&#123;value&#125;年&#x27;</span>)))<span class="comment">###</span></span><br><span class="line">    <span class="keyword">return</span> bar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chart = bar_with_custom_axis_label()</span><br><span class="line">chart.render_notebook()</span><br></pre></td></tr></table></figure></div>

<h4 id="4-更改坐标轴数据类型"><a href="#4-更改坐标轴数据类型" class="headerlink" title="4.更改坐标轴数据类型"></a>4.更改坐标轴数据类型</h4><p>x轴默认数据类型是使用离散型，在使用散点图的时候可调整为数值型；</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">x_data = [random.randint(<span class="number">0</span>, <span class="number">20</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">y_data = [random.randint(<span class="number">0</span>, <span class="number">50</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scatter_with_value_xaxis</span>():</span><br><span class="line">    scatter = Scatter(init_opts=opts.InitOpts(theme=<span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">                                              width=<span class="string">&#x27;1000px&#x27;</span>,</span><br><span class="line">                                              height=<span class="string">&#x27;600px&#x27;</span>))</span><br><span class="line">    scatter.add_xaxis(x_data)</span><br><span class="line">    scatter.add_yaxis(<span class="string">&#x27;&#x27;</span>, y_data)</span><br><span class="line">    <span class="comment"># X轴默认数据类型为离散数据，设置为数值型</span></span><br><span class="line">    scatter.set_global_opts(xaxis_opts=opts.AxisOpts(type_=<span class="string">&quot;value&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> scatter</span><br><span class="line"></span><br><span class="line">chart = scatter_with_value_xaxis()</span><br><span class="line">chart.render_notebook()</span><br></pre></td></tr></table></figure></div>

<h4 id="5-双Y轴【直方图-折线图】"><a href="#5-双Y轴【直方图-折线图】" class="headerlink" title="5.双Y轴【直方图&amp;折线图】"></a>5.双Y轴【直方图&amp;折线图】</h4><p>实际是Bar和Line两个图表共用同一套坐标体系，将Bar和Line分别指向不同的Y轴；</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pyecharts.charts import *</span><br><span class="line">from pyecharts import options as opts</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">x_data = [&#x27;香蕉&#x27;, &#x27;梨子&#x27;, &#x27;水蜜桃&#x27;, &#x27;核桃&#x27;, &#x27;西瓜&#x27;, &#x27;苹果&#x27;]</span><br><span class="line">y_data_1 = [random.randint(10, 50) for _ in range(len(x_data))]</span><br><span class="line">y_data_2 = [random.randint(100, 500) for _ in range(len(x_data))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def bar_line_combine_with_two_axis():</span><br><span class="line">    bar = Bar(init_opts=opts.InitOpts(theme=&#x27;light&#x27;,</span><br><span class="line">                                      width=&#x27;1000px&#x27;,</span><br><span class="line">                                      height=&#x27;600px&#x27;))</span><br><span class="line">    bar.add_xaxis(x_data)</span><br><span class="line">    # 添加一个Y轴</span><br><span class="line">    bar.extend_axis(yaxis=opts.AxisOpts())</span><br><span class="line">    bar.add_yaxis(&#x27;左边Y轴&#x27;, y_data_1, yaxis_index=0)</span><br><span class="line"></span><br><span class="line">    line = Line(init_opts=opts.InitOpts(theme=&#x27;light&#x27;,</span><br><span class="line">                                        width=&#x27;1000px&#x27;,</span><br><span class="line">                                        height=&#x27;600px&#x27;))</span><br><span class="line">    line.add_xaxis(x_data)</span><br><span class="line">    # 将line数据通过yaxis_index指向后添加的Y轴</span><br><span class="line">    line.add_yaxis(&#x27;右边Y轴&#x27;, y_data_2, yaxis_index=1)</span><br><span class="line"></span><br><span class="line">    bar.overlap(line)</span><br><span class="line">    return bar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chart = bar_line_combine_with_two_axis()</span><br><span class="line">chart.render_notebook()</span><br></pre></td></tr></table></figure></div>

<h4 id="6-直方图——双Y轴"><a href="#6-直方图——双Y轴" class="headerlink" title="6.直方图——双Y轴"></a>6.直方图——双Y轴</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pyecharts.charts import *</span><br><span class="line">from pyecharts import options as opts</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">x_data = [&#x27;香蕉&#x27;, &#x27;梨子&#x27;, &#x27;水蜜桃&#x27;, &#x27;核桃&#x27;, &#x27;西瓜&#x27;, &#x27;苹果&#x27;]</span><br><span class="line">y_data_1 = [random.randint(10, 50) for _ in range(len(x_data))]</span><br><span class="line">y_data_2 = [random.randint(100, 500) for _ in range(len(x_data))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def bar_with_multiple_axis():</span><br><span class="line">    bar = Bar(init_opts=opts.InitOpts(theme=&#x27;light&#x27;,</span><br><span class="line">                                      width=&#x27;1000px&#x27;,</span><br><span class="line">                                      height=&#x27;600px&#x27;))</span><br><span class="line">    bar.add_xaxis(x_data)</span><br><span class="line">    # 添加一个Y轴</span><br><span class="line">    bar.extend_axis(yaxis=opts.AxisOpts())</span><br><span class="line">    # 分别指定使用的Y轴</span><br><span class="line">    bar.add_yaxis(&#x27;左边Y轴&#x27;, y_data_1, yaxis_index=0)</span><br><span class="line">    bar.add_yaxis(&#x27;右边Y轴&#x27;, y_data_2, yaxis_index=1)</span><br><span class="line">    return bar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chart = bar_with_multiple_axis()</span><br><span class="line">chart.render_notebook()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="7-折线图——双X轴"><a href="#7-折线图——双X轴" class="headerlink" title="7.折线图——双X轴"></a>7.折线图——双X轴</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pyecharts.charts import *</span><br><span class="line">from pyecharts import options as opts</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">x_data_1 = [&quot;2020/10/&#123;&#125;&quot;.format(i + 1) for i in range(30)]</span><br><span class="line">x_data_2 = [&quot;2019/10/&#123;&#125;&quot;.format(i + 1) for i in range(30)]</span><br><span class="line">y_data_1 = [random.randint(10, 50) for _ in range(30)]</span><br><span class="line">y_data_2 = [random.randint(20, 60) for _ in range(30)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def line_with_two_xaxis():</span><br><span class="line">    line = Line(init_opts=opts.InitOpts(theme=&#x27;light&#x27;,</span><br><span class="line">                                        width=&#x27;1000px&#x27;,</span><br><span class="line">                                        height=&#x27;600px&#x27;))</span><br><span class="line">    line.add_xaxis(x_data_1)</span><br><span class="line">    # 添加一个x轴</span><br><span class="line">    line.extend_axis(xaxis_data=x_data_2, xaxis=opts.AxisOpts())</span><br><span class="line">    line.add_yaxis(&#x27;下面X轴&#x27;, y_data_1)</span><br><span class="line">    line.add_yaxis(&#x27;上面X轴&#x27;, y_data_2)</span><br><span class="line">    return line</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chart = line_with_two_xaxis()</span><br><span class="line">chart.render_notebook()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="图例选择设置单选"><a href="#图例选择设置单选" class="headerlink" title="图例选择设置单选"></a>图例选择设置单选</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar_single_selected</span>():</span><br><span class="line">    bar = Bar(init_opts=opts.InitOpts(theme=<span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">                                      width=<span class="string">&#x27;1000px&#x27;</span>,</span><br><span class="line">                                      height=<span class="string">&#x27;600px&#x27;</span>))</span><br><span class="line">    bar.add_xaxis(Faker.choose())</span><br><span class="line">    bar.add_yaxis(<span class="string">&#x27;A&#x27;</span>, Faker.values())</span><br><span class="line">    bar.add_yaxis(<span class="string">&#x27;B&#x27;</span>, Faker.values())</span><br><span class="line">    <span class="comment"># 设置图例选择模式为单选</span></span><br><span class="line">    bar.set_global_opts(legend_opts=opts.LegendOpts(selected_mode=<span class="string">&#x27;single&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> bar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chart = bar_single_selected()</span><br><span class="line">chart.render_notebook()</span><br></pre></td></tr></table></figure></div>

<h4 id="10-设置默认选中系列（接着上一个）"><a href="#10-设置默认选中系列（接着上一个）" class="headerlink" title="10.设置默认选中系列（接着上一个）"></a>10.设置默认选中系列（接着上一个）</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar_with_default_selected_series</span>():</span><br><span class="line">    bar = Bar(init_opts=opts.InitOpts(theme=<span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">                                      width=<span class="string">&#x27;1000px&#x27;</span>,</span><br><span class="line">                                      height=<span class="string">&#x27;600px&#x27;</span>))</span><br><span class="line">    bar.add_xaxis(Faker.choose())</span><br><span class="line">    <span class="comment"># 默认选中A C</span></span><br><span class="line">    bar.add_yaxis(<span class="string">&#x27;A&#x27;</span>, Faker.values(), is_selected=<span class="literal">True</span>)<span class="comment">###is_selected=True</span></span><br><span class="line">    bar.add_yaxis(<span class="string">&#x27;B&#x27;</span>, Faker.values(), is_selected=<span class="literal">False</span>)</span><br><span class="line">    bar.add_yaxis(<span class="string">&#x27;C&#x27;</span>, Faker.values(), is_selected=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> bar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chart = bar_with_default_selected_series()</span><br><span class="line">chart.render_notebook()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="11-缩略轴——inside组件-可缩放"><a href="#11-缩略轴——inside组件-可缩放" class="headerlink" title="11.缩略轴——inside组件(可缩放)"></a>11.缩略轴——inside组件(可缩放)</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">x_data = [<span class="string">&quot;2020/10/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成点数据</span></span><br><span class="line">y_data = [random.randint(<span class="number">10</span>, <span class="number">20</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x_data))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar_datazoom_inside</span>():</span><br><span class="line">    bar = Bar(init_opts=opts.InitOpts(theme=<span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">                                      width=<span class="string">&#x27;1000px&#x27;</span>,</span><br><span class="line">                                      height=<span class="string">&#x27;600px&#x27;</span>))</span><br><span class="line">    bar.add_xaxis(x_data)</span><br><span class="line">    bar.add_yaxis(<span class="string">&#x27;&#x27;</span>, y_data)</span><br><span class="line">    bar.set_global_opts(datazoom_opts=opts.DataZoomOpts(type_=<span class="string">&#x27;inside&#x27;</span>,</span><br><span class="line">                                                        range_start=<span class="number">50</span>,   <span class="comment"># 设置起止位置，50%-100%</span></span><br><span class="line">                                                        range_end=<span class="number">100</span>))</span><br><span class="line">    <span class="keyword">return</span> bar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chart = bar_datazoom_inside()</span><br><span class="line">chart.render_notebook()</span><br></pre></td></tr></table></figure></div>

<h4 id="Page更改布局"><a href="#Page更改布局" class="headerlink" title="Page更改布局"></a>Page更改布局</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_simple_layout</span>():</span><br><span class="line">    <span class="comment"># 图表1</span></span><br><span class="line">    bar_1 = Bar(init_opts=opts.InitOpts(theme=<span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">                                        width=<span class="string">&#x27;500px&#x27;</span>,</span><br><span class="line">                                        height=<span class="string">&#x27;300px&#x27;</span>))</span><br><span class="line">    bar_1.add_xaxis(Faker.choose())</span><br><span class="line">    bar_1.add_yaxis(<span class="string">&#x27;A&#x27;</span>, Faker.values())</span><br><span class="line">    bar_1.add_yaxis(<span class="string">&#x27;B&#x27;</span>, Faker.values())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图表2</span></span><br><span class="line">    bar_2 = Bar(init_opts=opts.InitOpts(theme=<span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">                                        width=<span class="string">&#x27;500px&#x27;</span>,</span><br><span class="line">                                        height=<span class="string">&#x27;300px&#x27;</span>))</span><br><span class="line">    bar_2.add_xaxis(Faker.choose())</span><br><span class="line">    bar_2.add_yaxis(<span class="string">&#x27;A&#x27;</span>, Faker.values())</span><br><span class="line">    <span class="comment"># x,y轴翻转</span></span><br><span class="line">    bar_2.reversal_axis()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图表3</span></span><br><span class="line">    line = Line(init_opts=opts.InitOpts(theme=<span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">                                        width=<span class="string">&#x27;500px&#x27;</span>,</span><br><span class="line">                                        height=<span class="string">&#x27;300px&#x27;</span>))</span><br><span class="line">    line.add_xaxis(Faker.choose())</span><br><span class="line">    line.add_yaxis(<span class="string">&#x27;A&#x27;</span>, Faker.values())</span><br><span class="line">    line.add_yaxis(<span class="string">&#x27;B&#x27;</span>, Faker.values())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图表4</span></span><br><span class="line">    pie = Pie(init_opts=opts.InitOpts(theme=<span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">                                      width=<span class="string">&#x27;500px&#x27;</span>,</span><br><span class="line">                                      height=<span class="string">&#x27;300px&#x27;</span>))</span><br><span class="line">    pie.add(<span class="string">&quot;&quot;</span>,</span><br><span class="line">            [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(Faker.choose(), Faker.values())],</span><br><span class="line">            radius=[<span class="string">&quot;40%&quot;</span>, <span class="string">&quot;75%&quot;</span>])</span><br><span class="line"></span><br><span class="line">    page = Page(layout=Page.SimplePageLayout)</span><br><span class="line">    <span class="comment"># 需要自行调整每个 chart 的 height/width，布局会因为页面大小而不同</span></span><br><span class="line">    page.add(bar_1, bar_2, line, pie)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> page</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chart = page_simple_layout()</span><br><span class="line">chart.render_notebook()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h4 id="Timeline-自动播放"><a href="#Timeline-自动播放" class="headerlink" title="Timeline 自动播放"></a>Timeline 自动播放</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pyecharts.charts import *</span><br><span class="line">from pyecharts import options as opts</span><br><span class="line">from pyecharts.faker import Faker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def timeline_auto_play():</span><br><span class="line">    timeline = Timeline(init_opts=opts.InitOpts(theme=&#x27;light&#x27;,</span><br><span class="line">                                                width=&#x27;1000px&#x27;,</span><br><span class="line">                                                height=&#x27;600px&#x27;))</span><br><span class="line">    timeline.add_schema(is_auto_play=True,  # 自动播放</span><br><span class="line">                        is_loop_play=True  # 循环播放</span><br><span class="line">                        )</span><br><span class="line">    for year in range(2000, 2020):</span><br><span class="line">        bar = Bar()</span><br><span class="line">        bar.add_xaxis([&#x27;香蕉&#x27;, &#x27;梨子&#x27;, &#x27;水蜜桃&#x27;, &#x27;核桃&#x27;, &#x27;西瓜&#x27;, &#x27;苹果&#x27;, &#x27;菠萝&#x27;])</span><br><span class="line">        bar.add_yaxis(&#x27;A&#x27;, Faker.values())</span><br><span class="line">        bar.add_yaxis(&#x27;B&#x27;, Faker.values())</span><br><span class="line">        timeline.add(bar, &#x27;&#123;&#125;年&#x27;.format(year))</span><br><span class="line">    return timeline</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chart = timeline_auto_play()</span><br><span class="line">chart.render_notebook()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python数据分析</title>
    <url>/2024/04/29/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<hr>
<p>[TOC]</p>
<h1 id="pandans"><a href="#pandans" class="headerlink" title="pandans"></a>pandans</h1><h3 id="导入excel文件"><a href="#导入excel文件" class="headerlink" title="导入excel文件"></a>导入excel文件</h3><p>Excel文件的格式为<code>xls</code>和<code>xlsx</code>，pandas读取excel文件需要安装依赖库<code>xlrd</code>和<code>openpyxl</code>。</p>
<blockquote>
<p>!注意：当xlrd&gt;&#x3D;2.0时，只支持xls格式，不再支持xlsx。</p>
</blockquote>
<ul>
<li>python3.9</li>
<li>win10 64bit</li>
<li>pandas&#x3D;&#x3D;1.2.1</li>
<li>xlrd&#x3D;&#x3D;2.0.1</li>
<li>openpyxl&#x3D;&#x3D;3.0.7</li>
</ul>
<h5 id="读取工作表的内容"><a href="#读取工作表的内容" class="headerlink" title="读取工作表的内容"></a>读取工作表的内容</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  <span class="comment"># 导入pandas模块</span></span><br><span class="line">df = pd.read_excel(<span class="string">r&#x27;D:\桌面\工作簿1.xlsx&#x27;</span>)  <span class="comment"># 读取Excel文件</span></span><br><span class="line"><span class="built_in">print</span>(df)   <span class="comment"># 显示所有数据</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>（1）解决列名不对齐</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  <span class="comment"># 导入pandas模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决数据输出时列名不对齐的问题</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;/home/qingjiao/Document/data/7_1/student.xlsx&#x27;</span>)  <span class="comment"># 读取Excel文件</span></span><br><span class="line"><span class="built_in">print</span>(df)  <span class="comment"># 显示所有数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h6 id="（2）行列显示不全"><a href="#（2）行列显示不全" class="headerlink" title="（2）行列显示不全"></a>（2）行列显示不全</h6><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>, <span class="number">1000</span>)  <span class="comment"># 最多显示1000行</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_columns&#x27;</span>, <span class="number">1000</span>)  <span class="comment"># 最多显示1000列</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h5 id="通过二维数组创建-DataFrame-对象"><a href="#通过二维数组创建-DataFrame-对象" class="headerlink" title="通过二维数组创建 DataFrame 对象"></a>通过二维数组创建 DataFrame 对象</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决数据输出时列名不对齐的问题</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">score = [[<span class="number">110</span>, <span class="number">105</span>, <span class="number">99</span>], [<span class="number">105</span>, <span class="number">88</span>, <span class="number">115</span>], [<span class="number">109</span>, <span class="number">120</span>, <span class="number">130</span>]]  <span class="comment"># 创建二维数组</span></span><br><span class="line"></span><br><span class="line">column_name = [<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>]  <span class="comment"># 设置列索引</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data=score, columns=column_name)  <span class="comment"># 创建DataFrame对象</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h5 id="通过字典创建-DataFrame-对象"><a href="#通过字典创建-DataFrame-对象" class="headerlink" title="通过字典创建 DataFrame 对象"></a>通过字典创建 DataFrame 对象</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决数据输出时列名不对齐的问题</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建字典对象</span></span><br><span class="line">score = &#123;<span class="string">&#x27;学生姓名&#x27;</span>: [<span class="string">&#x27;shiny&#x27;</span>, <span class="string">&#x27;mark&#x27;</span>, <span class="string">&#x27;angel&#x27;</span>], <span class="string">&#x27;班级&#x27;</span>: <span class="string">&#x27;高三（3）班&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;语文&#x27;</span>: [<span class="number">110</span>, <span class="number">105</span>, <span class="number">99</span>], <span class="string">&#x27;数学&#x27;</span>: [<span class="number">105</span>, <span class="number">88</span>, <span class="number">115</span>], <span class="string">&#x27;英语&#x27;</span>: [<span class="number">109</span>, <span class="number">120</span>, <span class="number">130</span>]&#125;</span><br><span class="line"></span><br><span class="line">index_name = [<span class="string">&#x27;1001&#x27;</span>, <span class="string">&#x27;1002&#x27;</span>, <span class="string">&#x27;1003&#x27;</span>]  <span class="comment"># 设置行索引</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data=score, index=index_name)  <span class="comment"># 创建DataFrame对象</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h5 id="读取指定工作表的部分内容"><a href="#读取指定工作表的部分内容" class="headerlink" title="读取指定工作表的部分内容"></a>读取指定工作表的部分内容</h5><h6 id="行操作"><a href="#行操作" class="headerlink" title="行操作"></a>行操作</h6><p><code>skiprows</code>:为从头开始跳过的行数（<strong>包括属性名</strong>）</p>
<p><code>nrows</code>:为不超过几行</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取指定工作表的部分内容</span></span><br><span class="line">df = pd.read_excel(<span class="string">r&#x27;D:\桌面\工作簿1.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>, skiprows=<span class="number">0</span>, nrows=<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure></div>

<p>读取前几行（<strong>不包括属性名</strong>）</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  <span class="comment"># 导入pandas模块</span></span><br><span class="line"><span class="comment"># 解决数据输出时列名不对齐的问题</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 导入Excel文件</span></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;/home/qingjiao/Document/data/8_1/movies.xlsx&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(df.head(<span class="number">3</span>))  <span class="comment"># 读取前3条数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>列操作</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取指定工作表的指定列</span></span><br><span class="line">df = pd.read_excel(<span class="string">r&#x27;D:\桌面\工作簿1.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>, usecols=<span class="string">&#x27;A:C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure></div>

<p><code>usecols</code>:以[num1,num2]的形式来指定列，’A:C‘来指定列范围</p>
<h6 id="读取指定工作表的指定列，并指定列名"><a href="#读取指定工作表的指定列，并指定列名" class="headerlink" title="读取指定工作表的指定列，并指定列名"></a>读取指定工作表的指定列，并指定列名</h6><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">r&#x27;D:\桌面\工作簿1.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>, usecols=<span class="string">&#x27;A:D&#x27;</span>, names=[<span class="string">&#x27;区队&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>,<span class="string">&#x27;姓名&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure></div>

<p><code>index_col</code>：以第几列为索引（默认是-1）</p>
<p><code>sheet_name</code>：选择表</p>
<p><code>heade</code>:以第几行为索引（默认是0）</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  <span class="comment"># 导入pandas模块</span></span><br><span class="line"><span class="comment">#r&#x27;D:\桌面\工作簿1.xlsx&#x27;</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">df = pd.read_excel(<span class="string">r&#x27;D:\桌面\工作簿1.xlsx&#x27;</span>,sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>,index_col=<span class="number">0</span>，header=<span class="number">0</span>)  <span class="comment"># 导入指定Sheet页的数据</span></span><br><span class="line"><span class="built_in">print</span>(df.head(<span class="number">3</span>))  <span class="comment"># 读取前3条数据</span></span><br></pre></td></tr></table></figure></div>



<h5 id="读取具有日期列的Excel文件"><a href="#读取具有日期列的Excel文件" class="headerlink" title="读取具有日期列的Excel文件"></a>读取具有日期列的Excel文件</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义日期解析器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dateparse</span>(<span class="params">date</span>):</span><br><span class="line">    <span class="keyword">return</span> pd.to_datetime(date)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取具有日期列的Excel文件</span></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;file.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>, parse_dates=[<span class="string">&#x27;Date&#x27;</span>], date_parser=dateparse)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择日期大于等于2022-01-01的数据</span></span><br><span class="line">df_filtered = df[df[<span class="string">&#x27;Date&#x27;</span>] &gt;= <span class="string">&#x27;2022-01-01&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>在上述代码中，我们首先定义了一个名为dateparse的函数，将日期字符串解析为Pandas的日期类型。然后，我们使用parse_dates参数指定要解析的日期列为Date列，并使用date_parser参数传递dateparse函数。最后，我们选择日期大于等于2022-01-01的数据，存储在df_filtered变量中。</p>
<h5 id="读取多个工作表的内容"><a href="#读取多个工作表的内容" class="headerlink" title="读取多个工作表的内容"></a>读取多个工作表的内容</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取多个工作表的内容</span></span><br><span class="line">df1 = pd.read_excel(<span class="string">&#x27;file.xlsx&#x27;</span>, sheet_name=[<span class="string">&#x27;Sheet1&#x27;</span>, <span class="string">&#x27;Sheet2&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印工作表Sheet1的内容</span></span><br><span class="line"><span class="built_in">print</span>(df1[<span class="string">&#x27;Sheet1&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印工作表Sheet2的内容</span></span><br><span class="line"><span class="built_in">print</span>(df1[<span class="string">&#x27;Sheet2&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h5 id="将Excel文件内容写入新的Excel文件"><a href="#将Excel文件内容写入新的Excel文件" class="headerlink" title="将Excel文件内容写入新的Excel文件"></a>将Excel文件内容写入新的Excel文件</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取Excel文件内容</span></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;file.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对数据进行处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将处理后的数据写入新的Excel文件</span></span><br><span class="line">df.to_excel(<span class="string">&#x27;new_file.xlsx&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><code>index=False</code>参数用于禁止将索引列写入Excel文件中。</p>
<h3 id="将数据导出为-Excel-文件"><a href="#将数据导出为-Excel-文件" class="headerlink" title="将数据导出为 Excel 文件"></a>将数据导出为 Excel 文件</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;编号&#x27;</span>: [<span class="string">&#x27;mr001&#x27;</span>, <span class="string">&#x27;mr002&#x27;</span>, <span class="string">&#x27;mr003&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;语文&#x27;</span>: [<span class="number">110</span>, <span class="number">105</span>, <span class="number">109</span>],</span><br><span class="line">    <span class="string">&#x27;数学&#x27;</span>: [<span class="number">105</span>, <span class="number">88</span>, <span class="number">120</span>],</span><br><span class="line">    <span class="string">&#x27;英语&#x27;</span>: [<span class="number">99</span>, <span class="number">115</span>, <span class="number">130</span>]&#125;)  <span class="comment"># 通过字典创建DataFrame对象</span></span><br><span class="line">    </span><br><span class="line">df.to_excel(<span class="string">&#x27;/home/qingjiao/score.xlsx&#x27;</span>,sheet_name=<span class="string">&#x27;1班&#x27;</span>)  <span class="comment"># 将数据导出为Excel文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="导入csv文件"><a href="#导入csv文件" class="headerlink" title="导入csv文件"></a>导入csv文件</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决数据输出时列名不对齐的问题</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入csv文件，并指定编码格式</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;/home/qingjiao/Document/data/8_2/student.csv&#x27;</span>,</span><br><span class="line">                 encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.head())  <span class="comment"># 输出前5条数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405191549261.png"
                      alt="image-20240519154938697"
                ></p>
<h3 id="将数据导出为-csv-文件"><a href="#将数据导出为-csv-文件" class="headerlink" title="将数据导出为 csv 文件"></a>将数据导出为 csv 文件</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  <span class="comment"># 导入pandas模块</span></span><br><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;编号&#x27;</span>: [<span class="string">&#x27;mr001&#x27;</span>, <span class="string">&#x27;mr002&#x27;</span>, <span class="string">&#x27;mr003&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;语文&#x27;</span>: [<span class="number">110</span>, <span class="number">105</span>, <span class="number">109</span>],</span><br><span class="line">    <span class="string">&#x27;数学&#x27;</span>: [<span class="number">105</span>, <span class="number">88</span>, <span class="number">120</span>],</span><br><span class="line">    <span class="string">&#x27;英语&#x27;</span>: [<span class="number">99</span>, <span class="number">115</span>, <span class="number">130</span>]&#125;)  <span class="comment"># 通过字典创建DataFrame对象</span></span><br><span class="line"><span class="comment"># 保存&#x27;编号&#x27;和&#x27;语文&#x27;列，不保留行索引，设置分隔符为冒号&#x27;:&#x27;</span></span><br><span class="line">df.to_csv(<span class="string">&#x27;/home/qingjiao/score1.csv&#x27;</span>, sep=<span class="string">&#x27;:&#x27;</span>, columns=[<span class="string">&#x27;编号&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>], </span><br><span class="line">          index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="导入-txt-文本文件"><a href="#导入-txt-文本文件" class="headerlink" title="导入 txt 文本文件"></a>导入 txt 文本文件</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决数据输出时列名不对齐的问题</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入txt文件，并指定分隔符和编码格式</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;/home/qingjiao/Document/data/8_2/student.txt&#x27;</span>, sep=<span class="string">&#x27;\t&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.head())  <span class="comment"># 输出前5条数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h5 id="导入指定列的数据"><a href="#导入指定列的数据" class="headerlink" title="导入指定列的数据"></a>导入指定列的数据</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决数据输出时列名不对齐的问题</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入txt文件指定列数据，并指定分隔符和编码格式</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;/home/qingjiao/Document/data/8_2/student.txt&#x27;</span>,</span><br><span class="line">                 sep=<span class="string">&#x27;\t&#x27;</span>, usecols=[<span class="string">&#x27;学号&#x27;</span>, <span class="string">&#x27;姓名&#x27;</span>], encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)  <span class="comment"># 输出所有数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><h4 id="重复值检测与处理"><a href="#重复值检测与处理" class="headerlink" title="重复值检测与处理"></a>重复值检测与处理</h4><h6 id="1-记录重复"><a href="#1-记录重复" class="headerlink" title="1.记录重复"></a>1.记录重复</h6><p><strong><code>duplicated</code><strong>函数用于</strong>标记</strong> <strong>Series</strong> 中的值、<strong>DataFrame</strong> 中的<strong>记录行</strong>是否重复</p>
<p>重复为 True，不重复为 False。该函数语法格式如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">pandas.DataFrame.duplicated(subset=<span class="literal">None</span>,keep=<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">pandas.Series.duplicated(keep=<span class="string">&#x27;first&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>参数说明：</p>
<ul>
<li><p><code>subset</code>：用于识别重复的列标签或列标签序列，默认情况下使用<strong>所有列</strong>，默认值为 None。</p>
</li>
<li><p><code>keep</code>：处理删除重复项的方法。可以是**’first’、’last’ 或 False**，默认为 ‘first’。</p>
<p><code>first</code>：表示除了第一次出现外，其余相同的重复项标记为 True；</p>
<p><code>last</code>：表示<strong>除了最后一次</strong>出现外，其余相同的重复项标记为 True；</p>
<p><code>False</code>：表示将所有重复项标记为True。</p>
</li>
</ul>
<h6 id="2-处理重复"><a href="#2-处理重复" class="headerlink" title="2.处理重复"></a>2.处理重复</h6><p><code>drop_duplicates</code> 函数用于<strong>删除</strong> <strong>Series、DataFrame</strong> 中<strong>重复记录</strong>，<strong>并返回删除重复后的结果</strong>。该函数语法格式如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">pandas.DataFrame.drop_duplicates(subset=<span class="literal">None</span>, keep=<span class="string">&#x27;first&#x27;</span>,</span><br><span class="line">				 inplace=<span class="literal">False</span>, ignore_index=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">pandas.Series.drop_duplicates(keep=<span class="string">&#x27;first&#x27;</span>, inplace=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></div>

<p>参数说明：</p>
<ul>
<li><strong><code>inplace</code><strong>：指定</strong>是否返回</strong>新的 DataFrame 或 Series。bool 型，默认为 False。如果为 True，则在原对象上修改。</li>
<li>**<code>ignore_index</code>**：是否重新设置行索引。bool型，默认为False，如果为 True 时将在数据合并后，按照0，1，2，3….的顺序重新设置行索引，忽略了旧索引。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405191550875.png"
                      alt="image-20240519155048965"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405191551975.png"
                      alt="image-20240519155109730"
                ></p>
<h4 id="1-删除法"><a href="#1-删除法" class="headerlink" title="1.删除法"></a>1.删除法</h4><p>　　<strong>删除法是指将含有缺失值的特征或者记录删除</strong>。删除法分为<strong>删除观测记录和删除特征</strong>俩种，它属于通过减少样本量来换取信息完整度的一种方法，是一种最为简单的缺失值处理方法。pandas中提供了简便的删除缺失值的方法dropna，通过参数控制，该方法既可以删除观测记录，也可以删除特征。该方法的基本语法如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">pandas.DataFrame.dropna(self, axis=<span class="number">0</span>, how=<span class="string">&#x27;any&#x27;</span>, thresh=<span class="literal">None</span>, subset=<span class="literal">None</span>, inplace=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></div>

<p>　　具体参数及其说明如下所示：</p>
<table>
<thead>
<tr>
<th>参数说明</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>axis</td>
<td>接受0或1。表示轴向，0为删除观测记录（行），1为删除特征（列）。默认为0</td>
</tr>
<tr>
<td>how</td>
<td>接受特定string。表示删除的形式。取值为“any”时表示只要有缺失值存在就执行删除操作；取值为“all”时表示当且仅当全部为缺失值时才执行删除操作。默认为“any”</td>
</tr>
<tr>
<td>thresh</td>
<td>一行或一列中至少出现了 thresh 个才删除</td>
</tr>
<tr>
<td>subset</td>
<td>接收array。表示进行去重的列&#x2F;行。默认为None，表示所有列&#x2F;行</td>
</tr>
<tr>
<td>inplace</td>
<td>接收boolean。表示是否在原表上进行操作。默认为False</td>
</tr>
</tbody></table>
<h4 id="异常值检测"><a href="#异常值检测" class="headerlink" title="异常值检测"></a>异常值检测</h4><p>　　在数据分析中，除了常见的重复值和缺失值外，还会遇到一类非正常的数据，即异常值。</p>
<p>　　所谓异常值，就是指超出或低于正常范围的值，又称 <strong>离群点</strong> 。例如，年龄为负数、身高大于3米、成绩小于零，商品评分超出 5 分或商品日销售量远远超过年销售量等，都属于异常值。</p>
<p>　　从集合角度来看，异常值即离群点。因此，为了处理异常值，<strong>首先是判别数据集中是否存在离群点，然后再对离群点的数据进行处理</strong>。</p>
<p>判别数据集中异常值的方法主要有三种：<br>方式一：根据给定的数据范围进行判断，不在范围内的数据视为异常值。</p>
<p>方法二：3σ 原则<br>3σ 原则是指当数据服从<strong>正态分布</strong>时，根据正态分布的定义可知，距离平均值 3σ 之外的概率为<code>P(|X-μ|&gt;3σ)≤0.003</code>（σ代表标准差，μ代表均值，，X&#x3D;μ即为图像的对称轴），这属于极小概率事件，在默认情况下，可以认定距离超过平均值 3σ 的样本是不存在的。因此，当样本距离平均值大于 3σ 时，则认定该样本为异常值。<br>方法三：箱型图</p>
<p><strong>箱型图是显示一组数据分散情况资料的统计图。</strong> 它可以将数据通过<strong>四分位数</strong>的形式进行图形化描述，箱型图通过上限和下限作为数据分布的边界。箱线图提供了识别异常值的一个标准，即异常值通常被定义为小于QL-1.5IQR或者大于QU+1.5IQR的值。其中，QL称为下四分位数，QU称为上四分位数，IQR称为四分位数间距。如下图所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.qingjiaoclass.com/qingjiao-ppt/2020-9-14/e916a242bd94afa2#business_type=upload_markdown"
                      alt="img"
                ></p>
<h5 id="异常值处理"><a href="#异常值处理" class="headerlink" title="异常值处理"></a>异常值处理</h5><p>了解了异常值的检测后，接下来介绍如何处理异常值，主要包括以下几种处理方式：<br>（1）删除含有异常值的记录；<br>（2）将异常值视为缺失值，按照缺失值的处理方法来处理；<br>（3）用平均值来修正异常值；<br>（4）将异常值当特殊情况进行分析，研究异常值出现的原因；<br>（5）对异常值不处理。<br>DataFrame 对象中的 <strong>describe 函数</strong>可以生成描述性统计信息。语法结构如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">DataFrame.describe(percentiles=<span class="literal">None</span>, include=<span class="literal">None</span>,</span><br><span class="line">exclude=<span class="literal">None</span>, datetime_is_numeric=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></div>

<p><strong>参数说明：</strong></p>
<ul>
<li><p><strong>percentiles</strong>：<strong>表示要包含在输出中的百分比</strong>，默认是[.25, .5, .75]，也就是返回25%，50%，75%数据量时的数字。</p>
</li>
<li><p><strong>include</strong>：</p>
<p>表示输出结果中都包含哪些内容</p>
<p>。自动计算的字段有：count（非空值数）、unique（唯一值数）、top（频数最高者）、freq（最高频数）、mean（平均值）、std（方差）、min（最小值）、50%（中位数）、max（最大值）等。</p>
<ul>
<li><strong>all</strong>：表示包含所有列；</li>
</ul>
</li>
<li><p><strong>None（默认）</strong>：所有数值型的列；</p>
<ul>
<li><strong>将想要显示的字段的类型放于列表中</strong>。如 numpy.number 表示数值型的字段； number.object 表示object型的字段。</li>
</ul>
</li>
<li><p><strong>exclude</strong>：与 include 用法相同，作用效果正好相反。</p>
</li>
<li><p><strong>datetime_is_numeric</strong>：<strong>是否将日期时间数据类型视为数字</strong>，默认为False。</p>
</li>
</ul>
<h2 id="数据抽取"><a href="#数据抽取" class="headerlink" title="数据抽取"></a>数据抽取</h2><h5 id="抽取一行考试成绩"><a href="#抽取一行考试成绩" class="headerlink" title="抽取一行考试成绩"></a>抽取一行考试成绩</h5><p>我们可以使用 loc 属性和 iloc 属性抽取一行数据。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 解决数据输出时列名不对齐的问题</span></span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">score = [[<span class="number">114</span>, <span class="number">118</span>, <span class="number">109</span>], [<span class="number">98</span>, <span class="number">104</span>, <span class="number">120</span>], [<span class="number">90</span>, <span class="number">117</span>, <span class="number">100</span>], [<span class="number">45</span>, <span class="number">58</span>, <span class="number">95</span>]]  <span class="comment"># 成绩</span></span><br><span class="line">stuname = [<span class="string">&#x27;shiny&#x27;</span>, <span class="string">&#x27;mark&#x27;</span>, <span class="string">&#x27;angel&#x27;</span>, <span class="string">&#x27;cendy&#x27;</span>]  <span class="comment"># 学生姓名，行索引</span></span><br><span class="line">subject = [<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>]  <span class="comment"># 学科，列索引</span></span><br><span class="line">df = pd.DataFrame(data=score, index=stuname, columns=subject)  <span class="comment"># 创建DataFrame对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)  <span class="comment"># 所有数据</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&#x27;shiny&#x27;</span>])  <span class="comment"># 抽取一行数据</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">0</span>])  <span class="comment"># 抽取一行数据</span></span><br></pre></td></tr></table></figure></div>

<h5 id="抽取任意多行考试成绩"><a href="#抽取任意多行考试成绩" class="headerlink" title="抽取任意多行考试成绩"></a>抽取任意多行考试成绩</h5><p>通过 loc 属性和 iloc 属性指定行名和行索引即可实现抽取任意多行数据。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.loc[[<span class="string">&#x27;shiny&#x27;</span>, <span class="string">&#x27;angel&#x27;</span>]])  <span class="comment"># 抽取多行数据</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[[<span class="number">0</span>, <span class="number">2</span>]])  <span class="comment"># 抽取多行数据</span></span><br></pre></td></tr></table></figure></div>

<h5 id="抽取连续多行考试成绩"><a href="#抽取连续多行考试成绩" class="headerlink" title="抽取连续多行考试成绩"></a>抽取连续多行考试成绩</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&#x27;shiny&#x27;</span>:<span class="string">&#x27;angel&#x27;</span>])  <span class="comment"># 从&#x27;shiny&#x27;到&#x27;angel’</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[:<span class="string">&#x27;angel&#x27;</span>])  <span class="comment"># 从第1行到&#x27;angel’</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">0</span>:<span class="number">3</span>])  <span class="comment"># 从第1行到第3行</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">1</span>:])  <span class="comment"># 从第2行到最后1</span></span><br></pre></td></tr></table></figure></div>

<h5 id="抽取“数学”和“英语”考试成绩"><a href="#抽取“数学”和“英语”考试成绩" class="headerlink" title="抽取“数学”和“英语”考试成绩"></a>抽取“数学”和“英语”考试成绩</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df[[<span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>]])  <span class="comment"># 抽取“数学”和“英语”考试成绩</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[:, [<span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>]])  <span class="comment"># 以列名作为参数</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[:, [<span class="number">1</span>, <span class="number">2</span>]])  <span class="comment"># 以列位置索引作为参数</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[:, <span class="string">&#x27;数学&#x27;</span>:])  <span class="comment"># 抽取从“数学”开始到最后一列</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[:, <span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># 连续抽取第2列到第3列的数据</span></span><br></pre></td></tr></table></figure></div>



<h5 id="抽取指定学科和指定学生的考试成绩"><a href="#抽取指定学科和指定学生的考试成绩" class="headerlink" title="抽取指定学科和指定学生的考试成绩"></a>抽取指定学科和指定学生的考试成绩</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 解决数据输出时列名不对齐的问题</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">score = [[<span class="number">114</span>, <span class="number">118</span>, <span class="number">109</span>], [<span class="number">98</span>, <span class="number">104</span>, <span class="number">120</span>], [<span class="number">90</span>, <span class="number">117</span>, <span class="number">100</span>], [<span class="number">45</span>, <span class="number">58</span>, <span class="number">95</span>]]  <span class="comment"># 成绩</span></span><br><span class="line">stuname = [<span class="string">&#x27;shiny&#x27;</span>, <span class="string">&#x27;mark&#x27;</span>, <span class="string">&#x27;angel&#x27;</span>, <span class="string">&#x27;cendy&#x27;</span>]  <span class="comment"># 学生姓名，行索引</span></span><br><span class="line">subject = [<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>]  <span class="comment"># 学科，列索引</span></span><br><span class="line">df = pd.DataFrame(data=score, index=stuname, columns=subject)  <span class="comment"># 创建DataFrame对象</span></span><br></pre></td></tr></table></figure></div>

<h5 id="抽取指定学科和指定学生的考试成绩-1"><a href="#抽取指定学科和指定学生的考试成绩-1" class="headerlink" title="抽取指定学科和指定学生的考试成绩"></a>抽取指定学科和指定学生的考试成绩</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&#x27;shiny&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>])  <span class="comment"># &#x27;数学&#x27;成绩</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[[<span class="string">&#x27;shiny&#x27;</span>], [<span class="string">&#x27;数学&#x27;</span>]])  <span class="comment"># &#x27;shiny&#x27;的&#x27;数学&#x27;成绩</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[[<span class="string">&#x27;shiny&#x27;</span>], [<span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>]])  <span class="comment"># &#x27;shiny&#x27;的&#x27;数学&#x27;和&#x27;英语&#x27;成绩</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[[<span class="number">1</span>], [<span class="number">2</span>]])  <span class="comment"># 第2行第3列</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">1</span>:, [<span class="number">2</span>]])  <span class="comment"># 第2行到最后一行的第3列</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">1</span>:, [<span class="number">0</span>, <span class="number">2</span>]])  <span class="comment"># 第2行到最后一行的第1列和第3列</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[:, <span class="number">2</span>])  <span class="comment"># 所有行第3列</span></span><br></pre></td></tr></table></figure></div>

<h5 id="获取’shiny’的’数学’成绩"><a href="#获取’shiny’的’数学’成绩" class="headerlink" title="获取’shiny’的’数学’成绩"></a>获取’shiny’的’数学’成绩</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">另外，也可以使用 DataFrame 对象的 iat 属性获取行列数据中的一个元素，该属性以行和列位置索引（即<span class="number">0</span>，<span class="number">1</span>，<span class="number">2</span>，...）作为参数。</span><br><span class="line"><span class="built_in">print</span>(df.iat[<span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># &#x27;shiny&#x27;的&#x27;数学&#x27;成绩，不是一个DataFrame对象</span></span><br></pre></td></tr></table></figure></div>

<h5 id="抽取指定学科和指定分数的数据"><a href="#抽取指定学科和指定分数的数据" class="headerlink" title="抽取指定学科和指定分数的数据"></a>抽取指定学科和指定分数的数据</h5><p>抽取数学成绩大于等于110分，英语成绩大于等于100分的数据，程序代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">result1 = (df[<span class="string">&#x27;数学&#x27;</span>] &gt;= <span class="number">110</span>) &amp; (df[<span class="string">&#x27;英语&#x27;</span>] &gt;= <span class="number">100</span>)  <span class="comment"># &#x27;数学&#x27;大于等于110，&#x27;英语&#x27;大于等于100</span></span><br><span class="line">result2 = (df.iloc[:, <span class="number">1</span>] &gt;= <span class="number">110</span>) &amp; (df.iloc[:, <span class="number">2</span>] &gt;= <span class="number">100</span>)  <span class="comment"># &#x27;数学&#x27;大于等于110，&#x27;英语&#x27;大于等于100</span></span><br><span class="line"><span class="built_in">print</span>(result1)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line"><span class="built_in">print</span>(df.loc[result1])  <span class="comment"># 按指定条件抽取数据</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[result2])  <span class="comment"># 按指定条件抽取数据</span></span><br></pre></td></tr></table></figure></div>

<h6 id="抽取指定学科和指定分数的数据-1"><a href="#抽取指定学科和指定分数的数据-1" class="headerlink" title="抽取指定学科和指定分数的数据"></a>抽取指定学科和指定分数的数据</h6><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">result1 = (df[<span class="string">&#x27;数学&#x27;</span>] &gt;= <span class="number">110</span>) &amp; (df[<span class="string">&#x27;英语&#x27;</span>] &gt;= <span class="number">100</span>)</span><br><span class="line">result2 = (df.iloc[:, <span class="number">1</span>] &gt;= <span class="number">110</span>) &amp; (df.iloc[:, <span class="number">2</span>] &gt;= <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(result1)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line"><span class="built_in">print</span>(df.loc[result1])</span><br><span class="line"><span class="built_in">print</span>(df.loc[result2])</span><br></pre></td></tr></table></figure></div>



<h2 id="数据排序与排名"><a href="#数据排序与排名" class="headerlink" title="数据排序与排名"></a>数据排序与排名</h2><h5 id="按一列数据排序"><a href="#按一列数据排序" class="headerlink" title="按一列数据排序"></a>按一列数据排序</h5><p>按“销售数量”降序排序</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  <span class="comment"># 导入pandas模块</span></span><br><span class="line"><span class="comment"># 解决数据输出时列名不对齐的问题</span></span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 设置数据显示的列数和宽度</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_columns&#x27;</span>, <span class="number">500</span>)</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.width&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="comment"># 导入Excel文件</span></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;/home/qingjiao/Document/data/10_3/某某医院2020年销售数据.xlsx&#x27;</span>)</span><br><span class="line">df = df.sort_values(by=<span class="string">&#x27;销售数量&#x27;</span>, ascending=<span class="literal">False</span>)  <span class="comment"># 按“销售数量”降序排序</span></span><br><span class="line"><span class="built_in">print</span>(df)  <span class="comment"># 输出排序后的DataFrame对象</span></span><br></pre></td></tr></table></figure></div>

<h5 id="按多列数据排序"><a href="#按多列数据排序" class="headerlink" title="按多列数据排序"></a>按多列数据排序</h5><p>按照“购药时间”和“销售数量”降序排序</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先按照“购药时间”降序排序，然后再按“销售数量”降序排序</span></span><br><span class="line">df = df.sort_values(by=[<span class="string">&#x27;购药时间&#x27;</span>, <span class="string">&#x27;销售数量&#x27;</span>], ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(df)  <span class="comment"># 输出排序后的DataFrame对象</span></span><br></pre></td></tr></table></figure></div>

<h5 id="对分组统计数据进行排序"><a href="#对分组统计数据进行排序" class="headerlink" title="对分组统计数据进行排序"></a>对分组统计数据进行排序</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">df1 = df.groupby([<span class="string">&#x27;商品编码&#x27;</span>])[<span class="string">&#x27;销售数量&#x27;</span>].<span class="built_in">sum</span>().reset_index()  <span class="comment"># 按“商品编码”分组统计“销售数量”</span></span><br><span class="line">df2 = df1.sort_values(by=<span class="string">&#x27;销售数量&#x27;</span>, ascending=<span class="literal">False</span>)  <span class="comment"># 按“销售数量”降序排序</span></span><br><span class="line"><span class="built_in">print</span>(df2)  <span class="comment"># 输出排序后的DataFrame对象</span></span><br></pre></td></tr></table></figure></div>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h5 id="对“销售数量”按顺序进行排名"><a href="#对“销售数量”按顺序进行排名" class="headerlink" title="对“销售数量”按顺序进行排名"></a>对“销售数量”按顺序进行排名</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  <span class="comment"># 导入pandas模块</span></span><br><span class="line"><span class="comment"># 解决数据输出时列名不对齐的问题</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 设置数据显示的列数和宽度</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_columns&#x27;</span>, <span class="number">500</span>)</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.width&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="comment"># 导入Excel文件</span></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;/home/qingjiao/Document/data/10_3/某某医院2020年销售数据.xlsx&#x27;</span>)</span><br><span class="line">df = df.sort_values(by=<span class="string">&#x27;销售数量&#x27;</span>, ascending=<span class="literal">False</span>)  <span class="comment"># 按“销售数量”降序排序</span></span><br><span class="line">df[<span class="string">&#x27;顺序排名&#x27;</span>] = df[<span class="string">&#x27;销售数量&#x27;</span>].rank(method=<span class="string">&#x27;first&#x27;</span>, ascending=<span class="literal">False</span>)  <span class="comment"># 顺序排名</span></span><br><span class="line"><span class="built_in">print</span>(df[[<span class="string">&#x27;商品名称&#x27;</span>, <span class="string">&#x27;销售数量&#x27;</span>, <span class="string">&#x27;顺序排名&#x27;</span>]])  <span class="comment"># 输出指定列数据</span></span><br></pre></td></tr></table></figure></div>

<h5 id="对“销售数量”进行平均排名"><a href="#对“销售数量”进行平均排名" class="headerlink" title="对“销售数量”进行平均排名"></a>对“销售数量”进行平均排名</h5><p>现对“销售数量”相同商品，按照顺序排名的平均值进行平均排名，关键代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 平均排名</span></span><br><span class="line">df[<span class="string">&#x27;平均排名&#x27;</span>] = df[<span class="string">&#x27;销售数量&#x27;</span>].rank(method=<span class="string">&#x27;average&#x27;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(df[[<span class="string">&#x27;商品名称&#x27;</span>, <span class="string">&#x27;销售数量&#x27;</span>, <span class="string">&#x27;平均排名&#x27;</span>]])  <span class="comment"># 输出指定列数据</span></span><br></pre></td></tr></table></figure></div>

<h5 id="最小值排名"><a href="#最小值排名" class="headerlink" title="最小值排名"></a>最小值排名</h5><p>对“销售数量”按最小值排名</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最小值排名</span></span><br><span class="line">df[<span class="string">&#x27;最小值排名&#x27;</span>] = df[<span class="string">&#x27;销售数量&#x27;</span>].rank(method=<span class="string">&#x27;min&#x27;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(df[[<span class="string">&#x27;商品名称&#x27;</span>, <span class="string">&#x27;销售数量&#x27;</span>, <span class="string">&#x27;最小值排名&#x27;</span>]])  <span class="comment"># 输出指定列数据</span></span><br></pre></td></tr></table></figure></div>

<h5 id="最大值排名"><a href="#最大值排名" class="headerlink" title="最大值排名"></a>最大值排名</h5><p>对“销售数量”按最大值排名</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最大值排名</span></span><br><span class="line">df[<span class="string">&#x27;最大值排名&#x27;</span>] = df[<span class="string">&#x27;销售数量&#x27;</span>].rank(method=<span class="string">&#x27;max&#x27;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(df[[<span class="string">&#x27;商品名称&#x27;</span>, <span class="string">&#x27;销售数量&#x27;</span>, <span class="string">&#x27;最大</span></span><br></pre></td></tr></table></figure></div>



<h2 id="数据计算（一）"><a href="#数据计算（一）" class="headerlink" title="数据计算（一）"></a>数据计算（一）</h2><h5 id="计算每个学生“语文”、“数学”和“英语”三科的总成绩"><a href="#计算每个学生“语文”、“数学”和“英语”三科的总成绩" class="headerlink" title="计算每个学生“语文”、“数学”和“英语”三科的总成绩"></a>计算每个学生“语文”、“数学”和“英语”三科的总成绩</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  <span class="comment"># 导入pandas模块</span></span><br><span class="line"><span class="comment"># 解决数据输出时列名不对齐的问题</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">score = [[<span class="number">114</span>, <span class="number">118</span>, <span class="number">109</span>], [<span class="number">98</span>, <span class="number">104</span>, <span class="number">120</span>], [<span class="number">90</span>, <span class="number">117</span>, <span class="number">100</span>], [<span class="number">45</span>, <span class="number">58</span>, <span class="number">95</span>]]  <span class="comment"># 成绩</span></span><br><span class="line">stuname = [<span class="string">&#x27;shiny&#x27;</span>, <span class="string">&#x27;mark&#x27;</span>, <span class="string">&#x27;angel&#x27;</span>, <span class="string">&#x27;cendy&#x27;</span>]  <span class="comment"># 学生姓名，行索引</span></span><br><span class="line">subject = [<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>]  <span class="comment"># 学科，列索引</span></span><br><span class="line">df = pd.DataFrame(data=score, index=stuname, columns=subject)  <span class="comment"># 创建DataFrame对象</span></span><br><span class="line">df[<span class="string">&#x27;总成绩&#x27;</span>] = df.<span class="built_in">sum</span>(axis=<span class="number">1</span>)  <span class="comment"># 计算三科的总成绩，并添加&#x27;总成绩&#x27;一列</span></span><br><span class="line"><span class="built_in">print</span>(df)  <span class="comment"># 输出DataFrame对象</span></span><br></pre></td></tr></table></figure></div>

<h5 id="计算“语文”、“数学”和“英语”各科的平均分"><a href="#计算“语文”、“数学”和“英语”各科的平均分" class="headerlink" title="计算“语文”、“数学”和“英语”各科的平均分"></a>计算“语文”、“数学”和“英语”各科的平均分</h5><p>计算“语文”、“数学”和“英语”各科成绩的平均值，忽略索引。关键代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">score_mean = df.mean()  <span class="comment"># 求各科的平均分，默认按列求平均值</span></span><br><span class="line"><span class="comment"># 追加一行数据（各科的平均分），忽略索引</span></span><br><span class="line">df = df.append(score_mean, ignore_index=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df)  <span class="comment"># 输出DataFrame对象</span></span><br></pre></td></tr></table></figure></div>

<p>计算“语文”、“数学”和“英语”各科成绩的平均值，不忽略索引。关键代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">score_mean = df.mean()  # 求各科的平均分，默认按列求平均值</span><br><span class="line"># 创建一个Series对象，使用name参数为Series命名，此示例中作为新增行的行索引</span><br><span class="line">series = pd.Series(score_mean, name=&#x27;平均成绩&#x27;)</span><br><span class="line"># 追加一行数据（各科的平均分），不忽略索引</span><br><span class="line">df = df.append(series, ignore_index=False)</span><br><span class="line">print(df)  # 输出DataFrame对象</span><br></pre></td></tr></table></figure></div>

<h5 id="计算“语文”、“数学”和“英语”各科的最高分"><a href="#计算“语文”、“数学”和“英语”各科的最高分" class="headerlink" title="计算“语文”、“数学”和“英语”各科的最高分"></a>计算“语文”、“数学”和“英语”各科的最高分</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">score_max = df.max()  # 求各科的最高分，默认按列求最大值</span><br><span class="line"># 创建一个Series对象，使用name参数为Series命名，此示例中作为新增行的行索引</span><br><span class="line">series = pd.Series(score_max, name=&#x27;最高分&#x27;)</span><br><span class="line"># 追加一行数据（各科的最高分），不忽略索引</span><br><span class="line">df = df.append(series, ignore_index=False)</span><br><span class="line">print(df)  # 输出DataFrame对象</span><br></pre></td></tr></table></figure></div>

<h5 id="计算“语文”、“数学”和“英语”各科的最低分"><a href="#计算“语文”、“数学”和“英语”各科的最低分" class="headerlink" title="计算“语文”、“数学”和“英语”各科的最低分"></a>计算“语文”、“数学”和“英语”各科的最低分</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">score_min= df.min()  # 求各科的最低分，默认按列求最小值</span><br><span class="line"># 创建一个Series对象，使用name参数为Series命名，此示例中作为新增行的行索引</span><br><span class="line">series = pd.Series(score_min, name=&#x27;最低分&#x27;)</span><br><span class="line"># 追加一行数据（各科的最低分），不忽略索引</span><br><span class="line">df = df.append(series, ignore_index=False)</span><br><span class="line">print(df)  # 输出DataFrame对象</span><br></pre></td></tr></table></figure></div>



<h2 id="数据计算（二）"><a href="#数据计算（二）" class="headerlink" title="数据计算（二）"></a>数据计算（二）</h2><h5 id="计算学生各科成绩的中位数"><a href="#计算学生各科成绩的中位数" class="headerlink" title="计算学生各科成绩的中位数"></a>计算学生各科成绩的中位数</h5><p>使用 median 函数计算“语文”、“数学”和“英语”各科成绩的中位数，程序代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd  # 导入pandas模块</span><br><span class="line">score = [[114, 118, 109], [98, 104, 120], [90, 117, 100], [45, 58, 95]]  # 成绩</span><br><span class="line">stuname = [&#x27;shiny&#x27;, &#x27;mark&#x27;, &#x27;angel&#x27;, &#x27;cendy&#x27;]  # 学生姓名，行索引</span><br><span class="line">subject = [&#x27;语文&#x27;, &#x27;数学&#x27;, &#x27;英语&#x27;]  # 学科，列索引</span><br><span class="line">df = pd.DataFrame(data=score, index=stuname, columns=subject)  # 创建DataFrame对象</span><br><span class="line">print(df.median())  # 计算学生各科成绩的中位数</span><br></pre></td></tr></table></figure></div>

<h5 id="计算学生各科成绩的众数"><a href="#计算学生各科成绩的众数" class="headerlink" title="计算学生各科成绩的众数"></a>计算学生各科成绩的众数</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd  # 导入pandas模块</span><br><span class="line">score = [[114, 114, 109], [90, 117, 90], [100, 117, 100], [90, 90, 100]]  # 成绩</span><br><span class="line">stuname = [&#x27;shiny&#x27;, &#x27;mark&#x27;, &#x27;angel&#x27;, &#x27;cendy&#x27;]  # 学生姓名，行索引</span><br><span class="line">subject = [&#x27;语文&#x27;, &#x27;数学&#x27;, &#x27;英语&#x27;]  # 学科，列索引</span><br><span class="line">df = pd.DataFrame(data=score, index=stuname, columns=subject)  # 创建DataFrame对象</span><br><span class="line">print(df.mode())  # 各科成绩的众数</span><br><span class="line">print(df.mode(axis=1))  # 每个学生成绩的众数</span><br><span class="line">print(df[&#x27;数学&#x27;].mode())  # “数学”的众数</span><br></pre></td></tr></table></figure></div>

<h5 id="通过方差判断谁的物理成绩更稳定"><a href="#通过方差判断谁的物理成绩更稳定" class="headerlink" title="通过方差判断谁的物理成绩更稳定"></a>通过方差判断谁的物理成绩更稳定</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd  # 导入pandas模块</span><br><span class="line">score = [[110, 113, 102, 105, 108], [118, 98, 119, 85, 118]]  # 物理成绩</span><br><span class="line">stuname = [&#x27;shiny&#x27;, &#x27;mark&#x27;]  # 学生姓名，行索引</span><br><span class="line">subject = [&#x27;物理1&#x27;, &#x27;物理2&#x27;, &#x27;物理3&#x27;, &#x27;物理4&#x27;, &#x27;物理5&#x27;]  # 学科，列索引</span><br><span class="line">df = pd.DataFrame(data=score, index=stuname, columns=subject)  # 创建DataFrame对象</span><br><span class="line">print(df.var(axis=1))  # 每个学生物理成绩的方差</span><br></pre></td></tr></table></figure></div>

<h5 id="计算两名学生物理成绩的标准差"><a href="#计算两名学生物理成绩的标准差" class="headerlink" title="计算两名学生物理成绩的标准差"></a>计算两名学生物理成绩的标准差</h5><p>使用 std 函数计算 shiny 和 mark 物理成绩标准差。关键代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(df.std(axis=1))  # 每个学生物理成</span><br></pre></td></tr></table></figure></div>



<h2 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h2><h5 id="四舍五入保留指定的小数位数"><a href="#四舍五入保留指定的小数位数" class="headerlink" title="四舍五入保留指定的小数位数"></a>四舍五入保留指定的小数位数</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd  # 导入pandas模块</span><br><span class="line">import numpy as np  # 导入numpy模块</span><br><span class="line">n = np.random.random([5, 5])  # 用于生成[0.0,1.0)之间的随机浮点数5行5列二维数组</span><br><span class="line">num = [&#x27;A1&#x27;, &#x27;A2&#x27;, &#x27;A3&#x27;, &#x27;A4&#x27;, &#x27;A5&#x27;]  # 列索引</span><br><span class="line">df = pd.DataFrame(data=n, columns=num)  # 创建DataFrame对象</span><br><span class="line">print(df)  # 输出DataFrame对象</span><br><span class="line">print(df.round(2))  # 保留小数点后两位</span><br><span class="line">print(df.round(&#123;&#x27;A1&#x27;: 1, &#x27;A2&#x27;: 2&#125;))  # A1列保留小数点后一位，A2列保留小数点后两位</span><br><span class="line">s1 = pd.Series([1, 0, 2], index=[&#x27;A1&#x27;, &#x27;A2&#x27;, &#x27;A3&#x27;])  # 创建Series对象，设置行索引</span><br><span class="line">print(df.round(s1))  # 设置Series对象的小数位数</span><br></pre></td></tr></table></figure></div>

<h5 id="四舍五入保留指定的小数位数-1"><a href="#四舍五入保留指定的小数位数-1" class="headerlink" title="四舍五入保留指定的小数位数"></a>四舍五入保留指定的小数位数</h5><p>运行程序，输出结果为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(df)  # 输出DataFrame对象</span><br><span class="line">print(df.round(2))  # 保留小数点后两位</span><br><span class="line">print(df.round(&#123;&#x27;A1&#x27;: 1, &#x27;A2&#x27;: 2&#125;))  # A1列保留小数点后一位，A2列保留小数点后两位</span><br><span class="line">s1 = pd.Series([1, 0, 2], index=[&#x27;A1&#x27;, &#x27;A2&#x27;, &#x27;A3&#x27;])  # 创建Series对象，设置行索引</span><br><span class="line">print(df.round(s1))  # 设置Series对象的小数位数</span><br></pre></td></tr></table></figure></div>

<h5 id="将指定数据格式化为百分比数据"><a href="#将指定数据格式化为百分比数据" class="headerlink" title="将指定数据格式化为百分比数据"></a>将指定数据格式化为百分比数据</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd  # 导入pandas模块</span><br><span class="line">import numpy as np  # 导入numpy模块</span><br><span class="line"># 解决数据输出时列名不对齐的问题</span><br><span class="line">pd.set_option(&#x27;display.unicode.east_asian_width&#x27;, True)n = np.random.random([5, 5])  # 用于生成[0.0,0.1)之间的随机浮点数5行5列二维数组</span><br><span class="line">num = [&#x27;A1&#x27;, &#x27;A2&#x27;, &#x27;A3&#x27;, &#x27;A4&#x27;, &#x27;A5&#x27;]  # 列索引</span><br><span class="line">df = pd.DataFrame(data=n, columns=num)  # 创建DataFrame对象</span><br><span class="line">df[&#x27;百分比1&#x27;] = df[&#x27;A5&#x27;].apply(lambda x: format(x, &#x27;.0%&#x27;))  # A5列保留0位小数</span><br><span class="line">df[&#x27;百分比2&#x27;] = df[&#x27;A5&#x27;].apply(lambda x: format(x, &#x27;.2%&#x27;))  # A5列保留2位小数</span><br><span class="line">df[&#x27;百分比3&#x27;] = df[&#x27;A5&#x27;].map(lambda x: &#x27;&#123;:.2%&#125;&#x27;.format(x))  # A5列保留2位小数</span><br><span class="line">print(df)  # 输出DataFrame对象</span><br></pre></td></tr></table></figure></div>



<h2 id="数据分组统计（一）"><a href="#数据分组统计（一）" class="headerlink" title="数据分组统计（一）"></a>数据分组统计（一）</h2><h5 id="根据“一级分类”统计订单数据"><a href="#根据“一级分类”统计订单数据" class="headerlink" title="根据“一级分类”统计订单数据"></a>根据“一级分类”统计订单数据</h5><p>按照图书“一级分类”对订单数据进行分组统计求和。程序代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd  # 导入pandas模块</span><br><span class="line"># 解决数据输出时列名不对齐的问题pd.set_option(&#x27;display.unicode.east_asian_width&#x27;, True)</span><br><span class="line"># 导入Excel文件</span><br><span class="line">df = pd.read_excel(&#x27;/home/qingjiao/Document/data/12_4/books.xlsx&#x27;)</span><br><span class="line">df1 = df[[&#x27;一级分类&#x27;, &#x27;点击量&#x27;, &#x27;订单预定&#x27;]]  # 抽取指定列的数据</span><br><span class="line">df2 = df1.groupby(&#x27;一级分类&#x27;).sum()  # 分组统计求和</span><br><span class="line">print(df2)  # 输出DataFrame对象</span><br></pre></td></tr></table></figure></div>

<h5 id="统计各编程语言的总订单预定数"><a href="#统计各编程语言的总订单预定数" class="headerlink" title="统计各编程语言的总订单预定数"></a>统计各编程语言的总订单预定数</h5><p>统计各编程语言的总订单预定数，首先按“二级分类”分组，然后抽取“订单预定”列并对该列进行求和运算，关键代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 首先按“二级分类”分组，然后抽取“订单预定”列并对该列进行求和运算</span><br><span class="line">df1 = df.groupby(&#x27;二级分类&#x27;)[&#x27;订单预定&#x27;].sum()</span><br><span class="line">print(df1)  # 输出DataFrame对象</span><br></pre></td></tr></table></figure></div>

<h5 id="迭代“一级分类”的订单数据"><a href="#迭代“一级分类”的订单数据" class="headerlink" title="迭代“一级分类”的订单数据"></a>迭代“一级分类”的订单数据</h5><p>按照“一级分类”分组，并输出每一分类中的订单数据。关键代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">for name, group in df.groupby(&#x27;一级分类&#x27;):  # 按照“一级分类”分组</span><br><span class="line">    print(name)  # 输出分类</span><br><span class="line">    print(group)  # 输出每一分类中的订单数据</span><br></pre></td></tr></table></figure></div>

<h5 id="迭代两级分类的订单数据"><a href="#迭代两级分类的订单数据" class="headerlink" title="迭代两级分类的订单数据"></a>迭代两级分类的订单数据</h5><p>迭代“一级分类”和“二级分类”的订单数据。关键代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 按照“一级分类”和“二级分类”分组</span><br><span class="line">for (key1, key2), group in df.groupby([&#x27;一级分类&#x27;, &#x27;二级分类&#x27;]):</span><br><span class="line">    print(key1, key2)  # 输出分类</span><br><span class="line">    print(group)  # 输出分类中的订单数据</span><br></pre></td></tr></table></figure></div>

<h5 id="迭代两级分类的订单数据-1"><a href="#迭代两级分类的订单数据-1" class="headerlink" title="迭代两级分类的订单数据"></a>迭代两级分类的订单数据</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 按照“一级分类”和“二级分类”分组</span><br><span class="line">for (key1, key2), group in df.groupby([&#x27;一级分类&#x27;, &#x27;二级分类&#x27;]):</span><br><span class="line">    print(key1, key2)  # 输出分类</span><br><span class="line">    print(group)  # 输出分类中的订单数据</span><br></pre></td></tr></table></figure></div>



<h4 id="数据分组统计（二）"><a href="#数据分组统计（二）" class="headerlink" title="数据分组统计（二）"></a>数据分组统计（二）</h4><h5 id="对分组统计结果使用聚合函数"><a href="#对分组统计结果使用聚合函数" class="headerlink" title="对分组统计结果使用聚合函数"></a>对分组统计结果使用聚合函数</h5><p>按照图书“一级分类”分组统计“点击量”和“订单预定”的平均值和总和。程序代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd  # 导入pandas模块</span><br><span class="line"># 解决数据输出时列名不对齐的问题</span><br><span class="line">pd.set_option(&#x27;display.unicode.east_asian_width&#x27;, True)</span><br><span class="line"># 导入Excel文件</span><br><span class="line">df = pd.read_excel(&#x27;/home/qingjiao/Document/data/12_4/books.xlsx&#x27;)</span><br><span class="line">df1 = df[[&#x27;一级分类&#x27;, &#x27;点击量&#x27;, &#x27;订单预定&#x27;]]  # 抽取指定列的数据</span><br><span class="line">df2 = df1.groupby(&#x27;一级分类&#x27;).agg([&#x27;mean&#x27;, &#x27;sum&#x27;])  # 对分组统计结果求平均值、求和</span><br><span class="line">print(df2)  # 输出DataFrame对象</span><br></pre></td></tr></table></figure></div>

<h5 id="通过字典分组统计“北上广”的销量"><a href="#通过字典分组统计“北上广”的销量" class="headerlink" title="通过字典分组统计“北上广”的销量"></a>通过字典分组统计“北上广”的销量</h5><p>统计各地区的销量，业务要求：将“北京”、“上海”和“广州”三个一线城市放在一起进行统计。程序代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd  # 导入pandas模块</span><br><span class="line"># 解决数据输出时列名不对齐的问题</span><br><span class="line">pd.set_option(&#x27;display.unicode.east_asian_width&#x27;, True)</span><br><span class="line"># 导入Excel文件</span><br><span class="line">df = pd.read_excel(&#x27;/home/qingjiao/Document/data/12_5/python_books.xlsx&#x27;)</span><br><span class="line">df = df.set_index(&#x27;商品名称&#x27;)  # 将DataFrame中的列转化为行索引</span><br><span class="line">dict1 = &#123;&#x27;北京出库销量&#x27;: &#x27;北上广&#x27;, &#x27;上海出库销量&#x27;: &#x27;北上广&#x27;,</span><br><span class="line">        &#x27;广州出库销量&#x27;: &#x27;北上广&#x27;, &#x27;天津出库销量&#x27;: &#x27;天津&#x27;&#125;  # 定义字典</span><br><span class="line">df1 = df.groupby(dict1, axis=1).sum()  # 统计各地区销量</span><br><span class="line">print(df1)  # 输出DataFrame对象</span><br></pre></td></tr></table></figure></div>

<h5 id="通过-Series-对象分组统计“北上广”销量"><a href="#通过-Series-对象分组统计“北上广”销量" class="headerlink" title="通过 Series 对象分组统计“北上广”销量"></a>通过 Series 对象分组统计“北上广”销量</h5><p>首先，创建一个 Series 对象。程序代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd  # 导入pandas模块</span><br><span class="line"># 解决数据输出时列名不对齐的问题</span><br><span class="line">pd.set_option(&#x27;display.unicode.east_asian_width&#x27;, True)</span><br><span class="line"># 导入Excel文件</span><br><span class="line">df = pd.read_excel(&#x27;/home/qingjiao/Document/data/12_5/python_books.xlsx&#x27;)</span><br><span class="line">data = &#123;&#x27;北京出库销量&#x27;: &#x27;北上广&#x27;, &#x27;上海出库销量&#x27;: &#x27;北上广&#x27;,</span><br><span class="line">        &#x27;广州出库销量&#x27;: &#x27;北上广&#x27;, &#x27;天津出库销量&#x27;: &#x27;天津&#x27;&#125;  # 定义字典</span><br><span class="line">s1 = pd.Series(data)  # 创建Series对象</span><br><span class="line">print(s1)  # 输出Series对象</span><br></pre></td></tr></table></figure></div>

<h5 id="通过-Series-对象分组统计“北上广”销量-1"><a href="#通过-Series-对象分组统计“北上广”销量-1" class="headerlink" title="通过 Series 对象分组统计“北上广”销量"></a>通过 Series 对象分组统计“北上广”销量</h5><p>然后，将 Series 对象传递给 groupby 函数实现数据分组统计，关键代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">df = df.set_index(&#x27;商品名称&#x27;)  # 将DataFrame中的列转化为行索引</span><br><span class="line">df1 = df.groupby(s1, axis=1).sum()  # 统计各地区销量</span><br><span class="line">print(df1)  # 输出DataFrame对象</span><br></pre></td></tr></table></figure></div>



<h2 id="常用图表的绘制"><a href="#常用图表的绘制" class="headerlink" title="常用图表的绘制"></a>常用图表的绘制</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405191537526.png"
                      alt="image-20240519153722897"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405191537798.png"
                      alt="image-20240519153741722"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405191538529.png"
                      alt="image-20240519153812495"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405191539872.png"
                      alt="image-20240519153948973"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405191541468.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405191542519.png"
                      alt="image-20240519154204519"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405191542400.png"
                      alt="image-20240519154235575"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405191543253.png"
                      alt="image-20240519154308176"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405191544588.png"
                      alt="image-20240519154411595"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405191544142.png"
                      alt="image-20240519154448466"
                >、</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405191545281.png"
                      alt="image-20240519154504088"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405191546212.png"
                      alt="image-20240519154559188"
                ></p>
<h2 id="数据统计分析案例"><a href="#数据统计分析案例" class="headerlink" title="数据统计分析案例"></a>数据统计分析案例</h2><h5 id="数据检测"><a href="#数据检测" class="headerlink" title="数据检测"></a>数据检测</h5><p>查看 &#x2F;home&#x2F;qingjiao&#x2F;Document&#x2F;data&#x2F;17_1&#x2F;user.xlsx 数据的缺失值情况，并统计每列的缺失值。程序代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd  # 导入pandas模块</span><br><span class="line"></span><br><span class="line"># 导入Excel数据文件data = pd.read_excel(&#x27;/home/qingjiao/Document/data/17_1/user.xlsx’)</span><br><span class="line"></span><br><span class="line">print(data.info())  # 查看缺失值</span><br><span class="line">print(data.isnull().sum())  # 统计每列的缺失值情况</span><br></pre></td></tr></table></figure></div>

<h5 id="按月统计和显示数据"><a href="#按月统计和显示数据" class="headerlink" title="按月统计和显示数据"></a>按月统计和显示数据</h5><p>按月统计每一年的注册用户增长情况，并进行分析。具体步骤如下：<br>（1）通过 read_excel 函数导入 &#x2F;home&#x2F;qingjiao&#x2F;Document&#x2F;data&#x2F;17_1&#x2F;user.xlsx 数据文件，使用 to_datetime 函数将字符型的日期格式的数据转换成为日期型数据，之后使用 resample 函数和 to_period 函数按月统计和显示数据，前提是日期必须设置为索引。程序代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd  # 导入pandas模块</span><br><span class="line"># 导入Excel数据文件</span><br><span class="line">data = pd.read_excel(&#x27;/home/qingjiao/Document/data/17_1/user.xlsx&#x27;)</span><br><span class="line">data[&#x27;注册日期&#x27;] = pd.to_datetime(data[&#x27;注册日期&#x27;])  # 将数据类型转换为日期类型</span><br><span class="line">data = data.set_index(&#x27;注册日期&#x27;)  # 将&#x27;注册日期&#x27;设置为索引</span><br><span class="line">df_month = data.resample(&#x27;M&#x27;).size().to_period(&#x27;M&#x27;)  # 按月统计并显示数据</span><br><span class="line">print(df_month)  # 输出按月统计的每一年的注册用户结果</span><br></pre></td></tr></table></figure></div>

<h5 id="获取日期区间的数据"><a href="#获取日期区间的数据" class="headerlink" title="获取日期区间的数据"></a>获取日期区间的数据</h5><p>（2）统计完成后直接在 DataFrame 对象中输入日期获取日期区间的数据；自定义行索引，使用 index 属性重新设置 DataFrame 对象的行索引；使用 concat 函数实现横向表合并，即将 3 年的数据合并在一起，可以利用 columns 属性重新设置列索引；最后使用 to_excel 函数将数据导出为 Excel 文件。程序代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 自定义行索引</span><br><span class="line">index = [&#x27;1月&#x27;, &#x27;2月&#x27;, &#x27;3月&#x27;, &#x27;4月&#x27;, &#x27;5月&#x27;, &#x27;6月&#x27;, &#x27;7月&#x27;, &#x27;8月&#x27;, &#x27;9月&#x27;, &#x27;10月&#x27;, &#x27;11月&#x27;, &#x27;12月&#x27;]</span><br><span class="line">df_2018_month = df_month[&#x27;2018&#x27;]  # 获取&#x27;2018&#x27;年的数据</span><br><span class="line">df_2018_month.index = index  # 设置索引</span><br><span class="line">df_2019_month = df_month[&#x27;2019&#x27;]  # 获取&#x27;2019&#x27;年的数据</span><br><span class="line">df_2019_month.index = index  # 设置索引</span><br><span class="line">df_2020_month = df_month[&#x27;2020&#x27;]  # 获取&#x27;2020&#x27;年的数据</span><br><span class="line">df_2020_month.index = index  # 设置索引</span><br><span class="line">data_year = pd.concat([df_2018_month, df_2019_month, df_2020_month], axis=1)  # 按行对齐，合并3年的数据</span><br><span class="line">data_year.columns = [&#x27;2018年&#x27;, &#x27;2019年&#x27;, &#x27;2020年&#x27;]  # 设置列索引</span><br><span class="line">data_year.to_excel(&#x27;/home/qingjiao/Document/data/17_1/data_year.xlsx&#x27;)  # 导出数据为Excel文件</span><br><span class="line">print(data_year)  # 输出数据</span><br></pre></td></tr></table></figure></div>

<h5 id="按月统计每一年的注册用户增长情况完整代码"><a href="#按月统计每一年的注册用户增长情况完整代码" class="headerlink" title="按月统计每一年的注册用户增长情况完整代码"></a>按月统计每一年的注册用户增长情况完整代码</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd  # 导入pandas模块</span><br><span class="line"># 解决数据输出时列名不对齐的问题</span><br><span class="line">pd.set_option(&#x27;display.unicode.east_asian_width&#x27;, True)</span><br><span class="line">data = pd.read_excel(&#x27;/home/qingjiao/Document/data/17_1/user.xlsx&#x27;)  # 导入Excel数据文件</span><br><span class="line">data[&#x27;注册日期&#x27;] = pd.to_datetime(data[&#x27;注册日期&#x27;])  # 将数据类型转换为日期类型</span><br><span class="line">data = data.set_index(&#x27;注册日期&#x27;)  # 将&#x27;注册日期&#x27;设置为索引</span><br><span class="line"># 按月统计每一年的注册用户</span><br><span class="line">df_month = data.resample(&#x27;M&#x27;).size().to_period(&#x27;M&#x27;)  # 按月统计并显示数据</span><br><span class="line"># 自定义行索引</span><br><span class="line">index = [&#x27;1月&#x27;, &#x27;2月&#x27;, &#x27;3月&#x27;, &#x27;4月&#x27;, &#x27;5月&#x27;, &#x27;6月&#x27;, &#x27;7月&#x27;, &#x27;8月&#x27;, &#x27;9月&#x27;, &#x27;10月&#x27;, &#x27;11月&#x27;, &#x27;12月&#x27;]</span><br><span class="line">df_2018_month = df_month[&#x27;2018&#x27;]  # 获取&#x27;2018&#x27;年的数据</span><br><span class="line">df_2018    _month.index = index  # 设置索引</span><br><span class="line">df_2019_month = df_month[&#x27;2019&#x27;]  # 获取&#x27;2019&#x27;年的数据</span><br><span class="line">df_2019_month.index = index  # 设置索引</span><br><span class="line">df_2020_month = df_month[&#x27;2020&#x27;]  # 获取&#x27;2020&#x27;年的数据</span><br><span class="line">df_2020_month.index = index  # 设置索引</span><br><span class="line">data_year = pd.concat([df_2018_month, df_2019_month, df_2020_month], axis=1)  # 按行对齐，合并3年的数据</span><br><span class="line">data_year.columns = [&#x27;2018年&#x27;, &#x27;2019年&#x27;, &#x27;2020年&#x27;]  # 设置列索引</span><br><span class="line">data_year.to_excel(&#x27;/home/qingjiao/Document/data/17_1/data_year.xlsx&#x27;)  # 导出数据为Excel文件</span><br><span class="line">print(data_year)  # 输出数据</span><br></pre></td></tr></table></figure></div>

<h5 id="绘制多折线图"><a href="#绘制多折线图" class="headerlink" title="绘制多折线图"></a>绘制多折线图</h5><p>（3）使用 plot 函数将 data_year.xlsx 文件中的数据绘制成多折线图，比较每一年的注册用户增长情况。程序代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd  # 导入pandas模块</span><br><span class="line">import matplotlib.pyplot as plt  # 导入matplotlib中的pyplot模块</span><br><span class="line"></span><br><span class="line"># 导入Excel文件</span><br><span class="line">df = pd.read_excel(&#x27;/home/qingjiao/Document/data/17_1/data_year.xlsx&#x27;)</span><br><span class="line"></span><br><span class="line"># 手动添加黑体字体，解决中文乱码问题</span><br><span class="line">plt.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;SimHei&#x27;]</span><br><span class="line"></span><br><span class="line"># 创建绘图对象，设置画布的宽度和高度</span><br><span class="line">plt.figure(figsize=(8, 6))</span><br><span class="line"></span><br><span class="line"># 绘制多折线图</span><br><span class="line">x = df[&#x27;Unnamed: 0&#x27;]  # x轴数据</span><br><span class="line">y1, y2, y3 = df[&#x27;2018年&#x27;], df[&#x27;2019年&#x27;], df[&#x27;2020年&#x27;]  # y轴数据</span><br><span class="line"></span><br><span class="line"># 绘制2018年注册会员折线图，红色，星形标记，标记大小为9</span><br><span class="line">plt.plot(x, y1, label=&#x27;2018年&#x27;, color=&#x27;r&#x27;, marker=&#x27;*&#x27;, ms=9)</span><br><span class="line"></span><br><span class="line"># 绘制2019年注册会员折线图，绿色，实心圆标记</span><br><span class="line">plt.plot(x, y2, label=&#x27;2019年&#x27;, color=&#x27;g&#x27;, marker=&#x27;o&#x27;)</span><br><span class="line"></span><br><span class="line"># 绘制2020年注册会员折线图，蓝色，上三角标记，标记为红色，大小为8</span><br><span class="line">plt.plot(x, y3, label=&#x27;2020年&#x27;, color=&#x27;b&#x27;, marker=&#x27;^&#x27;, mfc=&#x27;r&#x27;, ms=8)</span><br><span class="line">plt.title(&#x27;年度注册会员分析&#x27;, fontsize=18)  # 设置图表标题，字体大小为18</span><br><span class="line">plt.xlabel(&#x27;注册日期&#x27;)  # x轴标题</span><br><span class="line">plt.ylabel(&#x27;用户数量&#x27;)  # y轴标题</span><br><span class="line">plt.ylim(0, 12000)  # 设置y轴范围为0~12000</span><br><span class="line">plt.grid(axis=&#x27;y&#x27;, color=&#x27;0.5&#x27;, linestyle=&#x27;--&#x27;)  # 隐藏y轴网格线，灰度值为0.5，双划线</span><br><span class="line">plt.legend([&#x27;2018年&#x27;, &#x27;2019年&#x27;, &#x27;2020年&#x27;])  # 设置图表图例</span><br><span class="line"></span><br><span class="line"># 设置文本标签</span><br><span class="line">for a, b1, b2, b3 in zip(x, y1, y2, y3):</span><br><span class="line">    plt.text(a, b1 + 100, b1, ha=&#x27;center&#x27;, va=&#x27;bottom&#x27;, fontsize=10, color=&#x27;r&#x27;)</span><br><span class="line">    plt.text(a, b2 + 100, b2, ha=&#x27;center&#x27;, va=&#x27;bottom&#x27;, fontsize=10, color=&#x27;g&#x27;)</span><br><span class="line">    plt.text(a, b3 + 200, b3, ha=&#x27;center&#x27;, va=&#x27;bottom&#x27;, fontsize=10, color=&#x27;b&#x27;)</span><br><span class="line">plt.savefig(&#x27;/home/qingjiao/Desktop/users.png&#x27;)  # 保存图表</span><br><span class="line">plt.show()  # 显示图表</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫数据分析案例</title>
    <url>/2024/05/23/%E7%88%AC%E8%99%AB%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="爬取豆瓣电影top250"><a href="#爬取豆瓣电影top250" class="headerlink" title="爬取豆瓣电影top250"></a>爬取豆瓣电影top250</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><a class="link"   href="https://movie.douban.com/top250" >豆瓣电影 Top 250 (douban.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="需求：电影的名称，评分，评价数，电影概况，电影链接"><a href="#需求：电影的名称，评分，评价数，电影概况，电影链接" class="headerlink" title="需求：电影的名称，评分，评价数，电影概况，电影链接"></a>需求：电影的名称，评分，评价数，电影概况，电影链接</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://movie.douban.com/top250?start=25&amp;filter=</span><br></pre></td></tr></table></figure></div>

<p>?后面的是参数 <code>start</code>：从第几个开始穿数据给你</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405231654843.png"
                      alt="image-20240523164631084"
                ></p>
<p>我向网站发送的信息（包括cookie）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405231654591.png"
                      alt="image-20240523165220201"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405231656740.png"
                      alt="image-20240523165656673"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://qwe-pic1.oss-cn-beijing.aliyuncs.com/images/202405231657875.png"
                      alt="image-20240523165731895"
                ></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib.request,urllib.error</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">	<span class="comment"># 1.爬取数据</span></span><br><span class="line">	<span class="comment"># 2.解析数据</span></span><br><span class="line">	<span class="comment"># 3.保存数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爬取成功&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>重要知识点</title>
    <url>/2024/08/09/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>踩过的坑</p>
<p>[TOC]</p>
<h2 id="1-读题错误导致浪费大量的时间"><a href="#1-读题错误导致浪费大量的时间" class="headerlink" title="1.读题错误导致浪费大量的时间"></a>1.读题错误导致浪费大量的时间</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="2-python没开最大递归深度"><a href="#2-python没开最大递归深度" class="headerlink" title="2.python没开最大递归深度"></a>2.python没开最大递归深度</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sys.setrecursionlimit(60000)</span><br><span class="line">sys.setrecursionlimit(100000)</span><br></pre></td></tr></table></figure></div>

<h2 id="3-int（）类型强转"><a href="#3-int（）类型强转" class="headerlink" title="3.int（）类型强转"></a>3.int（）类型强转</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">结果向零取整，即正数向下取整负数向上取整，注意与//（向下取整）的区别</span><br></pre></td></tr></table></figure></div>

<p><strong>取整</strong></p>
<p><strong>int（）类型强转</strong>结果<strong>向零取整</strong>，即正数向下取整负数向上取整</p>
<p><strong>//<strong>：</strong>向下取整</strong></p>
<p><strong>四舍五入</strong></p>
<p>N 正数int(n / 2 + 0.5）</p>
<p>N 负数int(n / 2 - 0.5）</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">number = <span class="number">3.14159</span></span><br><span class="line">rounded_number = <span class="built_in">round</span>(number, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(rounded_number)  <span class="comment"># 输出结果为 3.14</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(n / <span class="number">2</span> + <span class="number">0.5</span>))  <span class="comment"># 输出 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(n / <span class="number">2</span>))  <span class="comment"># 输出 2</span></span><br><span class="line"><span class="comment">#2.5的时候因为精度的问题五入不了</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="4-sort-参数"><a href="#4-sort-参数" class="headerlink" title="4.sort 参数"></a>4.sort 参数</h2><p>加负号逆序，可以有两个参数，但是参数先后有讲究</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建一个二维数组</span><br><span class="line">array = [[1, 2], [2, 1], [4, 1]]</span><br><span class="line"></span><br><span class="line"># 按第二列的值进行降序排序</span><br><span class="line">array.sort(key=lambda x: -x[1])</span><br><span class="line">print(array)  # 输出: [[1, 2], [4, 1], [2, 1]]</span><br><span class="line">  </span><br></pre></td></tr></table></figure></div>

<h2 id="5-日期库"><a href="#5-日期库" class="headerlink" title="5.日期库"></a>5.日期库</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫</title>
    <url>/2024/06/23/%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h4 id="Requests-简介"><a href="#Requests-简介" class="headerlink" title="Requests 简介"></a>Requests 简介</h4><h5 id="1-什么是-Requests？"><a href="#1-什么是-Requests？" class="headerlink" title="1. 什么是 Requests？"></a>1. 什么是 Requests？</h5><p>　　Requests 是一个很实用的 <strong>Python HTTP 客户端库</strong>，编写爬虫和测试服务器响应数据时经常会用到。Requests 主要用途是<strong>发送 HTTP 请求</strong>，根据对方服务器的要求不通过，可以使用 GET、POST 等方式进行请求。并且可以对请求头进行伪装、使用代理访问等。</p>
<h5 id="2-GET-请求"><a href="#2-GET-请求" class="headerlink" title="2. GET 请求"></a>2. GET 请求</h5><p>　　 <strong><code>requests.get()</code></strong> 函数是<strong>获取 HTML 网页的主要方法</strong>。语法格式如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">requests.get(url, params = <span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure></div>

<p>　　参数说明：</p>
<ul>
<li><p>**<code>url</code>**：拟获取页面的 URL 链接。</p>
</li>
<li><p>**<code>params</code>**：URL 中的额外参数，字典或字节流格式，为可选参数。</p>
</li>
<li><p>**<code>\**kwargs</code>**：12个控制访问的参数。</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th>参数名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>data</td>
<td>字典、列表或元组的字节的文件，作用是向服务器提交资源，作为 request 的内容，与 params 不同的是，data 提交的数据并不放在 URL 链接中，而是放在 URL 链接对应位置的地方作为数据来存储。它也可以接受一个字符串对象</td>
</tr>
<tr>
<td>json</td>
<td>JSON 格式的数据，JSON 是 HTTP 中经常使用的数据格式，作为内容部分可以向服务器提交。例如：kv&#x3D;{‘key1’:’value1’} r&#x3D;requests.request(‘POST’,’<a class="link"   href="https://httpbin.org/post',json=kv" >https://httpbin.org/post&#39;,json=kv <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</td>
</tr>
<tr>
<td>headers</td>
<td>字典是 HTTP 的相关语，对应了向某个 URL 访问时所发起的 HTTP 的头字段，可以用这个字段来定义 HTTP 的访问的 HTTP 头，可以用来模拟任何想模拟的浏览器来对 URL 发起访问。例如：hd&#x3D;{‘user-agent’:’Chrome&#x2F;10’}r&#x3D;requests.request(‘POST’,’<a class="link"   href="https://httpbin.org/post',headers=hd" >https://httpbin.org/post&#39;,headers=hd <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</td>
</tr>
<tr>
<td>cookies</td>
<td>字典或 CookieJar，指的是从 HTTP 中解析 Cookie</td>
</tr>
<tr>
<td>auth</td>
<td>元组，用来支持 HTTP 认证功能</td>
</tr>
<tr>
<td>files</td>
<td>字典，是用来向服务器传输文件时使用的字段。例如：fs&#x3D;{‘files’:open(‘data.txt’,’rb’)}</td>
</tr>
<tr>
<td>timeout</td>
<td>用来设定超时时间，单位为秒，当发起一个 GET 请求时可以设置一个 timeout 时间，如果在 timeout 时间内请求内容没有返回，将产生一个 timeout 的异常</td>
</tr>
<tr>
<td>proxies</td>
<td>字典，用来设置访问代理服务器</td>
</tr>
<tr>
<td>allow_redirects</td>
<td>开关，表示是否允许对 URL 进行重定向，默认为 True</td>
</tr>
<tr>
<td>stream</td>
<td>开关，指是否对获取内容进行立即下载，默认为 True</td>
</tr>
<tr>
<td>verify</td>
<td>开关，用于认证 SSL 证书，默认为 True</td>
</tr>
<tr>
<td>cert</td>
<td>用于设置保存本地 SSL 证书路径</td>
</tr>
</tbody></table>
</li>
<li><p><strong>返回值</strong>：返回一个包含服务器资源的 <strong>Response 对象</strong>。其中，Response 对象有以下属性，如下表所示：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>status_code</td>
<td>HTTP 请求返回状态，若为 200 则表示请求成功</td>
</tr>
<tr>
<td>text</td>
<td>HTTP 响应内容的字符串形式，即返回的页面内容</td>
</tr>
<tr>
<td>encoding</td>
<td>从 HTTP header 中猜测的响应内容编码方式</td>
</tr>
<tr>
<td>apparent_encoding</td>
<td>从内容中分析出的响应内容编码方式（备选编码方式）</td>
</tr>
<tr>
<td>content</td>
<td>HTTP 响应内容的二进制形式</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="二、XPath-简介"><a href="#二、XPath-简介" class="headerlink" title="二、XPath 简介"></a>二、XPath 简介</h4><p>　　<strong>XPath 是 XML 路径语言</strong>，全名为“XML Path Language”，<strong>是一门可以在 XML 文件中查找信息的语言</strong>。该语言<strong>不仅可以实现 XML 文件的搜索，还可以在 HTML 文件中进行搜索</strong>。所以在爬虫中可以<strong>使用 XPath 在 HTML 文件或代码中进行可用信息的抓取</strong>。</p>
<p>　　XPath 的功能非常强大，不仅提供了简洁明了的路径表达式，还提供了 100 多个函数，可用于字符串、数值、时间比较、序列处理、逻辑值等。XPath 于 1999 年 11 月 16 日成为 W3C 标准，被设计为供 XSLT、XPointer 以及其它 XML 解析软件使用，<strong>XPath 使用路径表达式在 XML 或 HTML 中选取节点</strong>，最常用的路径表达式如下表所示：</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>nodename</td>
<td>选取此节点的所有子节点</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>从当前节点选取子节点</td>
</tr>
<tr>
<td>&#x2F;&#x2F;</td>
<td>从当前节点选取子孙节点</td>
</tr>
<tr>
<td>.</td>
<td>选取当前节点</td>
</tr>
<tr>
<td>..</td>
<td>选取当前节点的父节点</td>
</tr>
<tr>
<td>@</td>
<td>选取属性</td>
</tr>
<tr>
<td>*</td>
<td>选取所有节点</td>
</tr>
</tbody></table>
<h4 id="三、TXT-文件存储"><a href="#三、TXT-文件存储" class="headerlink" title="三、TXT 文件存储"></a>三、TXT 文件存储</h4><p>　　如果想要简单地进行 TXT 文件存储工作，可以通过 <strong><code>open()</code> 函数</strong>操作文件实现，即<strong>需要先创建或者打开指定的文件并创建文件对象</strong>。<code>open()</code> 函数的基本语法格式如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(filename[,mode[,buffering]])</span><br></pre></td></tr></table></figure></div>

<p>　　参数说明：</p>
<ul>
<li><p><strong><code>file</code><strong>：</strong>被创建的文件对象</strong>。</p>
</li>
<li><p><strong><code>filename</code><strong>：</strong>要创建或打开文件的文件名称</strong>，需要使用<strong>单引号或双引号</strong>将其括起来。如果要打开的文件和当前文件在同一个目录下，那么直接写文件名即可，否则需要指定完整路径。例如，要打开当前路径下的名称为 <code>qingjiao.txt</code> 的文件，可以使用“qingjiao.txt”。</p>
</li>
<li><p><strong><code>mode</code><strong>：可选参数，</strong>用于指定文件的打开模式</strong>。其参数值如下表所示。默认的打开模式为只读（即 <code>r</code>）。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
<th>注意</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>以只读模式打开文件。文件的指针将会放在文件的开头</td>
<td>文件必须存在</td>
</tr>
<tr>
<td>rb</td>
<td>以二进制格式打开文件，并且采用只读模式。文件的指针将会放在文件的开头，一般用于非文本文件，如图片、声音等</td>
<td>文件必须存在</td>
</tr>
<tr>
<td>r+</td>
<td>打开文件后，可以读取文件内容，也可以写入新的内容覆盖原有内容（从文件开头进行覆盖）</td>
<td>文件必须存在</td>
</tr>
<tr>
<td>rb+</td>
<td>以二进制格式打开文件，并且采用读写模式。文件的指针将会放在文件的开头，一般用于非文本文件，如图片、声音等</td>
<td>文件必须存在</td>
</tr>
<tr>
<td>w</td>
<td>以只写模式打开文件</td>
<td>文件存在，则将其覆盖，否则创建新文件</td>
</tr>
<tr>
<td>wb</td>
<td>以二进制格式打开文件，并且采用只写模式。一般用于非文本文件，如图片、声音等</td>
<td>文件存在，则将其覆盖，否则创建新文件</td>
</tr>
<tr>
<td>w+</td>
<td>打开文件后，先清空原有内容，使其变为一个空的文件，对这个空文件有读写权限</td>
<td>文件存在，则将其覆盖，否则创建新文件</td>
</tr>
<tr>
<td>wb+</td>
<td>以二进制格式打开文件，并且采用读写模式。一般用于非文本文件，如图片、声音等</td>
<td>文件存在，则将其覆盖，否则创建新文件</td>
</tr>
<tr>
<td>a</td>
<td>以追加模式打开一个文件。如果该文件已经存在，文件指针将放在文件的末尾（即新内容会被写入到已有内容之后），否则，创建新文件用于写入</td>
<td></td>
</tr>
<tr>
<td>ab</td>
<td>以二进制格式打开文件，并且采用追加模式。如果该文件已经存在，文件指针将放在文件的末尾（即新内容会被写入到已有内容之后），否则，创建新文件用于写入</td>
<td></td>
</tr>
<tr>
<td>a+</td>
<td>以读写模式打开文件。如果该文件已经存在，文件指针将放在文件的末尾（即新内容会被写入到已有内容之后），否则，创建新文件用于读写</td>
<td></td>
</tr>
<tr>
<td>ab+</td>
<td>以二进制格式打开文件，并且采用追加模式。如果该文件已经存在，文件指针将放在文件的末尾（即新内容会被写入到已有内容之后），否则，创建新文件用于读写</td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p><strong><code>buffering</code><strong>：可选参数，</strong>用于指定读写文件的缓冲模式</strong>，值为0表达式不缓存；值为1表示缓存；值大于1，则表示缓冲区的大小。默认为缓存模式。</p>
</li>
</ul>
<h5 id="编写爬取百度实时热点排行榜的代码"><a href="#编写爬取百度实时热点排行榜的代码" class="headerlink" title="编写爬取百度实时热点排行榜的代码"></a>编写爬取百度实时热点排行榜的代码</h5><p>（1）在**<code>/home/qingjiao</code> 目录** 下创建一个名为 <strong>hotspot.py</strong> 的文件，将代码写入此 Python 文件中。</p>
<p>（2）导入<strong>请求模块<code>requests</code></strong> 和 <strong><code>etree</code> 子模块</strong>。</p>
<p>（3）由于 HTML 代码中的信息内<strong>存在大量的空白符</strong>，所以创建一个 <strong><code>processing()</code> 函数</strong>，<strong>用于处理字符串中的空白符</strong>。提示：</p>
<ul>
<li><strong><code>join()</code>函数</strong>：返回通过指定字符连接序列中元素后生成的新字符串。语法为：**<code>str.join(sequence)</code>**，其中，<code>sequence</code> 表示要连接的元素序列。</li>
<li><strong><code>split()</code>函数</strong>：用于通过指定分隔符对字符串进行切片。默认分隔符为所有的空字符，包括空格、换行(\n)、制表符(\t)等。<strong>多个空格也会被当成一个空格</strong>。</li>
</ul>
<p>参考代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 处理字符串中的空白符，并拼接字符串</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">processing</span>(<span class="params">strs</span>):</span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 定义保存内容的字符串</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> strs:</span><br><span class="line">        n = <span class="string">&#x27;&#x27;</span>.？？？(n.？？？)  <span class="comment"># 去除空白符</span></span><br><span class="line">        s = s + n  <span class="comment"># 拼接字符串</span></span><br><span class="line">    <span class="keyword">return</span> s  <span class="comment"># 返回拼接后的字符串</span></span><br></pre></td></tr></table></figure></div>

<p>（4）创建 <strong><code>get_hotspot_info()</code> 函数</strong>，在该函数中首先通过 <strong><code>requests.get()</code> 函数****发送网络请求</strong>，然后通过 <strong><code>etree.HTML()</code> 函数****解析 HTML 代码</strong>，最后<strong>通过 XPath 分别提取百度实时热点“排名”、“标题”和“热搜指数”</strong>。参考代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义解析页面函数，用来获取百度实时热点排行榜信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hotspot_info</span>(<span class="params">url, headers</span>):</span><br><span class="line">    response = ？？？  <span class="comment"># 发送网络请求</span></span><br><span class="line">    html = ？？？  <span class="comment"># 解析HTML字符串</span></span><br><span class="line">    div_all = html.？？？(<span class="string">&#x27;//div[@class=&quot;category-wrap_iQLoo horizontal_1eKyQ&quot;]&#x27;</span>)  <span class="comment"># 获取实时热点相关所有信息</span></span><br><span class="line">    <span class="keyword">for</span> div <span class="keyword">in</span> div_all:</span><br><span class="line">        rank = ？？？ <span class="comment"># 获取实时热点排名</span></span><br><span class="line">        rank = processing(rank)  <span class="comment"># 处理实时热点排名</span></span><br><span class="line">        title = ？？？  <span class="comment"># 获取实时热点标题</span></span><br><span class="line">        title = processing(title)  <span class="comment"># 处理实时热点标题</span></span><br><span class="line">        index = ？？？  <span class="comment"># 获取实时热点热搜指数</span></span><br><span class="line">        index = processing(index)  <span class="comment"># 处理实时热点热搜指数</span></span><br><span class="line">        record = rank + <span class="string">&#x27;\t&#x27;</span> + title + <span class="string">&#x27;\t&#x27;</span> + index  <span class="comment"># 拼接百度实时热点排行榜信息</span></span><br><span class="line">        <span class="built_in">print</span>(record)  <span class="comment"># 输出</span></span><br></pre></td></tr></table></figure></div>

<p>（5）创建程序入口，定义百度实时热点排行榜链接和 Chrome 浏览器请求头信息。然后，调用 <strong><code>get_hotspot_info()</code> 函数</strong>获取百度实时热点排行榜信息。参考代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 程序入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&#x27;https://top.baidu.com/board?tab=realtime&#x27;</span>  <span class="comment"># 百度实时热点排行榜链接</span></span><br><span class="line">    ？？？ <span class="comment"># 定义请求头信息</span></span><br><span class="line">     ？？？ <span class="comment"># 调用爬虫方法，获取百度实时热点排行榜信息</span></span><br></pre></td></tr></table></figure></div>

<p>获取当前环境谷歌浏览器请求头信息的步骤如下：<br>按下 <strong><code>&lt;F12&gt;</code> 快捷键</strong>打开“开发者工具箱”，然后选择<strong>“Network”</strong>，接着在浏览器地址栏中任意打开一个网页（如：<a class="link"   href="https://www.baidu.com/%EF%BC%89%EF%BC%8C%E5%9C%A8%E8%AF%B7%E6%B1%82%E5%88%97%E8%A1%A8%E4%B8%AD%E9%80%89%E6%8B%A9%E4%B8%80%E9%A1%B9%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF%EF%BC%8C%E6%9C%80%E5%90%8E%E5%9C%A8" >https://www.baidu.com/），在请求列表中选择一项请求信息，最后在 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <strong>“Request Headers”</strong> 中找到请求头信息。具体步骤如下图所示：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.qingjiaoclass.com/gdlzpoyzbkrj/20210806/jyqngavd_OaXvPPNTlCiQ0nmqcPHT#business_type=upload_markdown"
                      alt="img"
                ></p>
<h5 id="将爬取的百度实时热点排行榜信息保存到本地-TXT-文件"><a href="#将爬取的百度实时热点排行榜信息保存到本地-TXT-文件" class="headerlink" title="将爬取的百度实时热点排行榜信息保存到本地 TXT 文件"></a>将爬取的百度实时热点排行榜信息保存到本地 TXT 文件</h5><p>（1）在 <strong><code>get_hotspot_info()</code> 函数</strong> 中定义空列表 <strong><code>records</code></strong> ，使用 <strong><code>append()</code></strong> 将拼接<br>的每条百度实时热点排行榜信息追加到 <strong><code>records</code></strong> 列表中，最后返回列表。</p>
<p>（2）创建写入文件函数 <strong><code>save_as_txt()</code><strong>，将百度实时热点排行榜信息写入本地 TXT 文件。在该函数中首先通过 <strong><code>open()</code> 函数****创建 <code>open</code> 对象，以只写模式打开文件，编码为“utf-8”</strong>，然后</strong>循环遍历 <code>records</code> 列表</strong>，最后通过 <strong><code>write()</code> 函数****将爬取的每条百度实时热点排行榜信息写入文件并在结尾换行</strong>。</p>
<p>（3）在主函数中调用 <strong><code>save_as_txt()</code> 函数</strong>将百度实时热点排行榜信息写入本地 <strong><code>/home/qingjiao/records.txt</code> 文件</strong>。</p>
<h4 id="一、BeautifulSoup-概述"><a href="#一、BeautifulSoup-概述" class="headerlink" title="一、BeautifulSoup 概述"></a>一、BeautifulSoup 概述</h4><h5 id="1-什么是-BeautifulSoup？"><a href="#1-什么是-BeautifulSoup？" class="headerlink" title="1. 什么是 BeautifulSoup？"></a>1. 什么是 BeautifulSoup？</h5><p>　　<strong>BeautifulSoup 是一个用于从 HTML 和 XML 文件中提取数据的 Python 模块。</strong>BeautifulSoup 提供一些简单的函数用来<strong>处理导航、搜索、修改分析树等功能</strong>。BeautifulSoup 模块中的<strong>查找提取功能</strong>非常强大，而且非常便捷，通常可以节省程序员数小时或数天的工作时间。</p>
<p>　　<strong>BeautifulSoup 自动将输入文档转换为 Unicode 编码，输出文档转换为 UTF-8 编码。</strong> 开发者不需要考虑编码方式，除非文档没有指定一个编码方式，这时，BeautifulSoup 就不能自动识别编码方式了。此时，开发者仅仅需要说明一下原始编码方式就可以了。</p>
<h5 id="2-解析器"><a href="#2-解析器" class="headerlink" title="2. 解析器"></a>2. 解析器</h5><p>　　BeautifulSoup 支持 <strong>Python 标准库</strong>中包含的 HTML 解析器，但它也支持许多第三方 Python 解析器，其中包含 <strong><code>lxml</code> 解析器</strong>。可以使用 <strong><code>pip</code> 命令</strong>进行安装：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure></div>

<p>　　另一个解析器是 **<code>html5lib</code>**，它是一个用于解析 HTML 的 Python 库，按照 Web 浏览器的方式解析 HTML。可以使用 <strong><code>pip</code> 命令</strong>进行安装：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">pip install html5lib</span><br></pre></td></tr></table></figure></div>

<p>　　关于每个解析器的优缺点如下表所示：</p>
<table>
<thead>
<tr>
<th>解析器</th>
<th>使用方法</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>Python 标准库</td>
<td>BeautifulSoup(markup,”html.parser”)</td>
<td>Python 标准库，执行速度适中，文档容错能力强</td>
<td>（在 Python 2.7.3 或 3.2.2 之前的版本中）文档容错能力差</td>
</tr>
<tr>
<td>lxml 的 HTML 解析器</td>
<td>BeautifulSoup(markup,”lxml”)</td>
<td>速度快，文档容错能力强</td>
<td>需要安装 C 语言库</td>
</tr>
<tr>
<td>lxml 的 XML 解析器</td>
<td>BeautifulSoup(markup,”lxml-xml”)BeautifulSoup(markup,”xml”)</td>
<td>速度快，唯一支持 XML 的解析器</td>
<td>需要安装 C 语言库</td>
</tr>
<tr>
<td>html5lib</td>
<td>BeautifulSoup(markup,”html5lib”)</td>
<td>最好的容错性，以浏览器的方式解析文档，生成 HTML5 格式的文档</td>
<td>速度慢，不依赖外部扩展</td>
</tr>
</tbody></table>
<p>　　<strong>推荐使用 <code>lxml</code> 作为解析器，因为效率更高。</strong> 在 Python2.7.3 之前的版本和 Python 3 中 3.2.2 之前的版本，必须安装 <code>lxml</code> 或 <code>html5lib</code>，因为那些 Python 版本的标准库中内置的 HTML 解析方法不够稳定。</p>
<h4 id="二、CSV-文件存储"><a href="#二、CSV-文件存储" class="headerlink" title="二、CSV 文件存储"></a>二、CSV 文件存储</h4><p>　　CSV 文件是文本文件的一种，该文件中每一行数据的各元素使用<strong>逗号</strong>进行分隔。其实存取 CSV 文件时同样可以使用 <strong><code>open()</code> 函数</strong>，不过我们有更好的办法，那就是<strong>用 pandas 模块实现 CSV 文件的存储工作</strong>。pandas 模块提供了 <strong><code>to_csv()</code> 函数</strong>用于实现 CSV 文件的存储。<code>to_csv()</code> 函数的基本语法格式如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">DataFrame.to_csv(self, path_or_buf=<span class="literal">None</span>, sep=<span class="string">&quot;,&quot;</span>, na_rep=<span class="string">&quot;&quot;</span>, float_format=<span class="literal">None</span>, columns=<span class="literal">None</span>, header=<span class="literal">True</span>, index=<span class="literal">True</span>, index_label=<span class="literal">None</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="literal">None</span>, compression=<span class="string">&quot;infer&quot;</span>, quoting=<span class="literal">None</span>, quotechar=<span class="string">&#x27;&quot;&#x27;</span>, line_terminator=<span class="literal">None</span>, chunksize=<span class="literal">None</span>, date_format=<span class="literal">None</span>, doublequote=<span class="literal">True</span>, escapechar=<span class="literal">None</span>, decimal=<span class="string">&quot;.&quot;</span>, errors=<span class="string">&quot;strict&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>　　常用参数说明：</p>
<ul>
<li><code>path_or_buf</code>：<strong>表示文件路径的字符串</strong>。</li>
<li><code>sep</code>：str 类型，<strong>表示分隔符</strong>，默认为逗号“,”。</li>
<li><code>na_rep</code>：str 类型，<strong>用于替换缺失值</strong>，默认为“”空。</li>
<li><code>float_format</code>：<strong>表示指定写入哪列数据的列名</strong>，默认为 None。</li>
<li><code>columns</code>：<strong>要写入的列</strong>。</li>
<li><code>header</code>：<strong>表示是否写入数据中的列名</strong>。如果给出了字符串列表, 则假定它是列名的别名。</li>
<li><code>index</code>：<strong>表示是否将行索引写入文件</strong>，默认为 True。</li>
<li><code>index_label</code>：<strong>引用索引列的列标签</strong>。如果未指定, 并且标头和索引为 True， 则使用索引名称。如果 DataFrame 使用 MultiIndex，则应给出一个序列。</li>
<li><code>mode</code>：str 类型，<strong>表示写入模式默认为“w”</strong>。</li>
<li><code>encoding</code>：str 类型，<strong>表示写入文件的编码格式</strong>。</li>
</ul>
<h5 id="编写爬取百度热点要闻的代码"><a href="#编写爬取百度热点要闻的代码" class="headerlink" title="编写爬取百度热点要闻的代码"></a>编写爬取百度热点要闻的代码</h5><p>（1）在**<code>/home/qingjiao</code> 目录** 下创建一个名为 <strong>wangyi.py</strong> 的文件，将代码写入此 Python 文件中。</p>
<p>（2）导入<strong>请求模块<code>requests</code></strong> 和 <strong><code>bs4</code> 模块</strong>中的**数据解析模块<code>BeautifulSoup</code>**。</p>
<p>（3）创建 <strong><code>get_news_info()</code> 函数</strong>，在该函数中：</p>
<ul>
<li>首先通过 <strong><code>requests.get()</code> 函数****发送网络请求</strong>；</li>
<li>然后<strong>创建 BeautifulSoup 对象</strong>获取页面正文，要求使用 <code>Response</code> 对象的 <strong><code>text</code> 属性</strong>获取 HTML 代码，并指定解析器为 **<code>lxml</code>**；</li>
<li>接下来使用 BeautifulSoup 解析网页数据，可以使用 <strong><code>find()</code> 函数</strong>和 <strong><code>find_all()</code> 函数</strong>获取网易新闻热点排行 Top10 内容；</li>
<li>接下来分别获取网易新闻热点排行 Top10 的排名、标题、跟帖数和链接，并把每条新闻的排名、标题、跟帖数和链接添加到一个列表中，再追加到一个大列表中，将这个大列表返回。提示：<ul>
<li><strong><code>find(name, attrs, recursive, text, \**wargs)</code> 函数</strong>：获取第一个匹配的节点内容。<code>name</code>参数为查找标签，<code>attrs</code> 为查找标签的属性，<code>text</code> 为查找文本。</li>
<li><strong><code>find_all(name, attrs, recursive, text, limit, \**kwargs)</code> 函数</strong>：获取所有符合条件的节点内容。其中，<code>limit</code> 参数可以限制得到的结果的数目。</li>
<li><strong><code>get_text()</code> 函数</strong>：会清除正在处理的 HTML 文档中的所有标签，然后返回一个只包含文字的 Unicode 字符串。</li>
</ul>
</li>
</ul>
<p>参考代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义解析页面函数，用来获取网易新闻热点排行Top10信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_news_info</span>(<span class="params">url, headers</span>):</span><br><span class="line">    response = ？？？  <span class="comment"># 发送网络请求</span></span><br><span class="line">    soup = ？？？  <span class="comment"># 创建一个BeautifulSoup对象，获取页面正文</span></span><br><span class="line">    all_news = soup.？？？(<span class="string">&#x27;div&#x27;</span>, ？？？).？？？(<span class="string">&#x27;ul&#x27;</span>).？？？(<span class="string">&#x27;li&#x27;</span>)  <span class="comment"># 获取网易新闻热点排行Top10内容</span></span><br><span class="line">    news_list = []  <span class="comment"># 创建空列表</span></span><br><span class="line">    <span class="keyword">for</span> news <span class="keyword">in</span> all_news:</span><br><span class="line">        news_rank = ？？？  <span class="comment"># 获取新闻排名</span></span><br><span class="line">        news_title = ？？？  <span class="comment"># 获取新闻标题</span></span><br><span class="line">        posts_num = ？？？  <span class="comment"># 获取新闻跟帖数</span></span><br><span class="line">        news_url = ？？？  <span class="comment"># 获取新闻链接</span></span><br><span class="line">        news_list.？？？  <span class="comment"># 把每条新闻的排名、标题、跟帖数和链接添加到一个列表中，再追加到一个大列表中</span></span><br><span class="line">    <span class="keyword">return</span> news_list  <span class="comment"># 返回列表</span></span><br></pre></td></tr></table></figure></div>

<p>（4）创建程序入口，定义网易新闻链接和 Chrome 浏览器请求头信息。然后，调用 <strong><code>get_news_info()</code> 函数</strong>获取网易新闻热点排行 Top10 信息。参考代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 程序入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&#x27;https://news.163.com/&#x27;</span>  <span class="comment"># 网易新闻首页链接</span></span><br><span class="line">    <span class="comment"># 定义请求头信息</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;？？？&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/71.0.3578.80 Chrome/71.0.3578.80 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    news_list = ？？？  <span class="comment"># 调用爬虫方法，获取网易新闻热点排行Top10</span></span><br><span class="line">    <span class="built_in">print</span>(news_list)  <span class="comment"># 输出网易新闻</span></span><br></pre></td></tr></table></figure></div>

<h5 id="将爬取的网易新闻热点排行Top10信息保存到本地-CSV-文件"><a href="#将爬取的网易新闻热点排行Top10信息保存到本地-CSV-文件" class="headerlink" title="将爬取的网易新闻热点排行Top10信息保存到本地 CSV 文件"></a>将爬取的网易新闻热点排行Top10信息保存到本地 CSV 文件</h5><p>（1）导入**数据导入与分析模块 <code>pandas</code>**，别名为 <code>pd</code>。</p>
<p>（2）创建写入文件函数 **<code>save_as_csv()</code>**，将网易新闻热点排行Top10信息写入本地 CSV 文件。</p>
<ul>
<li>利用 <code>pandas</code> 模块创建 DataFrame 对象 **<code>df</code>**；</li>
<li>将 DataFrame 对象 <strong><code>df</code></strong> 写入CSV 文件，要求不写入索引，不添加列名。</li>
</ul>
<p>（3）在主函数中调用 <strong><code>save_as_csv()</code> 函数</strong>将网易新闻热点排行 Top10 信息写入本地 <strong><code>/home/qingjiao/news.csv</code> 文件</strong>。</p>
<h4 id="一、Ajax-简介"><a href="#一、Ajax-简介" class="headerlink" title="一、Ajax 简介"></a>一、Ajax 简介</h4><p>　　Ajax 的全称是 “Asynchronous JavaScript and XML”，可以说是 <strong>“异步 JavaScript”与“XML”的组合</strong>。</p>
<p>　　传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页。<strong>Ajax 是一种创建快速动态网页的技术。</strong> 它是一门单独的编程语言，通过在后台与服务器进行少量数据交换，<strong>Ajax 可以使网页实现异步更新</strong>。这意味着，可以<strong>在不刷新、不更改页面链接的情况下实现与服务器交换数据并更新网页部分内容</strong>。</p>
<h4 id="二、JSON-文件存储"><a href="#二、JSON-文件存储" class="headerlink" title="二、JSON 文件存储"></a>二、JSON 文件存储</h4><p>　　JSON 是一种轻量级的数据交换格式，它是基于 ECMAScript 的一个子集。JSON 采用完全独立于语言的文本格式，但也使用了类似于 C 语言家族的习惯（包括 C、C++、Java、JavaScript、Perl、Python等）。这些特性使 JSON 成为理想的数据交换语言，易与人们阅读和编写，同时也易于机器解析和生成（一般用于提升网络传输速率）。<strong>JSON 在 Python 中分别由 list 和 dict 组成。</strong> json 模块提供了4个功能，分别是：</p>
<p>　　（1）**<code>dumps()</code>**：把数据类型转换为字符串。</p>
<p>　　（2）**<code>dump()</code>**：把数据类型转换为字符串并存储在文件中。</p>
<p>　　（3）**<code>loads()</code>**：把字符串转换为数据类型。　　</p>
<p>　　（4）**<code>load()</code>**：把文件打开，并把字符串转换为数据类型。</p>
<p>　　<strong><code>dump()</code> 函数的</strong>语法结构如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">dump(obj, fp, *, skipkeys=<span class="literal">False</span>, ensure_ascii=<span class="literal">True</span>, check_circular=<span class="literal">True</span>,</span><br><span class="line">        allow_nan=<span class="literal">True</span>, cls=<span class="literal">None</span>, indent=<span class="literal">None</span>, separators=<span class="literal">None</span>,</span><br><span class="line">        default=<span class="literal">None</span>, sort_keys=<span class="literal">False</span>, **kw)</span><br></pre></td></tr></table></figure></div>

<p>　　参数说明：</p>
<ul>
<li>**<code>obj</code>**：要序列化的对象。</li>
<li>**<code>fp</code>**：文件描述符，将序列化的 str 保存到文件中。</li>
<li>**<code>skipkeys</code>**：默认为 False，如果 skipkeys&#x3D;True，将跳过不是基本类型（str，int，float，bool，None）的 dict 键，不会引发TypeError。</li>
<li>**<code>ensure_ascii</code>**：默认值为 True，能将所有传入的非 ASCII 字符转义输出。如果 ensure_ascii 为 False，字符将按原样输出。</li>
<li>**<code>check_circular</code>**：默认值为 True，如果 check_circular 为 False，则将跳过对容器类型的循环引用检查，循环引用将导致 OverflowError。</li>
<li>**<code>allow_nan</code>**：默认值为 True，如果 allow_nan 为 False，则严格遵守 JSON 规范，序列化超出范围的浮点值（nan，inf，-inf）会引发 ValueError。 如果 allow_nan 为 True，则将使用它们的 JavaScript 等效项（NaN，Infinity，-Infinity）。</li>
<li>**<code>indent</code>**：设置缩进格式，默认值为 None，选择的是最紧凑的表示。如果 indent 是非负整数或字符串，那么 JSON 数组元素和对象成员将使用该缩进级别进行输入；indent 为 0、负数或“”仅插入换行符；indent 使用正整数缩进多个空格；如果 indent 是一个字符串（例如“\t”），则该字符串用于缩进每个级别。</li>
<li>**<code>separators</code>**：去除分隔符后面的空格，默认值为 None，如果指定，则分隔符应为（item_separator、key_separator）元组。如果缩进为 None，则默认为（‘,’，’：’）；要获得最紧凑的 JSON 表示，可以指定（’，’，’:’）以消除空格。</li>
<li>**<code>default</code>**：默认值为 None，如果指定，则 default 应该是为无法以其他方式序列化的对象调用的函数。它应返回对象的 JSON 可编码版本或引发 TypeError。如果未指定，则引发 TypeError。</li>
<li>**<code>sort_keys</code>**：默认值为 False，如果 sort_keys 为 True，则字典的输出将按键值排序</li>
</ul>
<h5 id="一、抓取分析"><a href="#一、抓取分析" class="headerlink" title="一、抓取分析"></a>一、抓取分析</h5><p>（1）在谷歌（Google）浏览器输入（<a class="link"   href="https://www.douban.com/%EF%BC%89%E9%93%BE%E6%8E%A5%EF%BC%8C%E8%BF%9B%E5%85%A5%E2%80%9C%E8%B1%86%E7%93%A3%E7%BD%91%E2%80%9D%E4%B8%BB%E9%A1%B5%E3%80%82%E9%A1%B5%E9%9D%A2%E5%B7%A6%E4%B8%8A%E6%96%B9%E6%9C%89%E4%B8%80%E4%B8%AA%E6%90%9C%E7%B4%A2%E5%85%A5%E5%8F%A3%EF%BC%8C%E8%BE%93%E5%85%A5%E2%80%9C%E7%A4%BE%E4%BC%9A%E7%83%AD%E7%82%B9%E2%80%9D%E8%BF%9B%E8%A1%8C%E6%90%9C%E7%B4%A2%E3%80%82%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A" >https://www.douban.com/）链接，进入“豆瓣网”主页。页面左上方有一个搜索入口，输入“社会热点”进行搜索。如下图所示： <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.qingjiaoclass.com/gdlzpoyzbkrj/20210825/jyqngavd_mizQNVH8Vlzc4lCfBmon#business_type=upload_markdown"
                      alt="img"
                ></p>
<p>（2）进入搜索结果页面后，<strong>点击“社会热点”按钮</strong>。如下图所示：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.qingjiaoclass.com/gdlzpoyzbkrj/20210825/jyqngavd_Xy4v22ta8ffgOSOov5Ho#business_type=upload_markdown"
                      alt="img"
                ></p>
<p>（3）进入“社会热点”主页后，在键盘中按下 <strong><code>&lt;F12&gt;</code> 快捷键</strong>，打开浏览器开发者工具（这里使用谷歌浏览器），然后在顶部导航条中选择 <strong>“Network” 选项</strong>，重新刷新当前页面，可以发现这里出现了非常多的条目，其实这些条目就是页面在加载过程中浏览器与服务器之间发送请求和接收响应的所有记录。因为 Ajax 有其特殊的请求类型，它叫做 <strong>xhr</strong>，所以我们可以在类型出选择<strong>“Fetch&#x2F;XHR”</strong>。如下图所示：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.qingjiaoclass.com/gdlzpoyzbkrj/20210825/jyqngavd_H2HB3p5DGp5Q9ugJ7mB1#business_type=upload_markdown"
                      alt="img"
                ></p>
<p>（4）依次单击每条网络请求，然后选择<strong>“Preview”选项</strong>查看每条网络请求所返回的数据，并找到与网页内容相同的数据，主要的内容存放于 <strong>“items” 标签</strong>下。如下图所示：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.qingjiaoclass.com/gdlzpoyzbkrj/20210825/jyqngavd_MN0MQJLqgF1ZDpdqo6hK#business_type=upload_markdown"
                      alt="img"
                ></p>
<p>（5）将返回数据中的 <strong>“items” 标签</strong>展开，发现有许多条数据。点击 <strong>“items” 标签</strong>下的 0 索引，可以发现一个 <strong>“title” 字段</strong>，它的值正好就是页面中第一条数据的标题。再检查一下其它数据，也是一一对应的。如下图所示：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.qingjiaoclass.com/gdlzpoyzbkrj/20210825/jyqngavd_7agTHA9a6grfw7JPKNvt#business_type=upload_markdown"
                      alt="img"
                ></p>
<p>（6）“items” 标签中的每条数据还有一个 <strong>“author” 字段</strong>，以字典形式呈现，它包含了作者的相关信息，我们只需要将字典中的 <strong>name 和 url 字段</strong>提取出来即可。如下图所示：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.qingjiaoclass.com/gdlzpoyzbkrj/20210825/jyqngavd_hi0uHVV4cCOBAWZRx4j8#business_type=upload_markdown"
                      alt="img"
                ></p>
<h5 id="二、分析请求"><a href="#二、分析请求" class="headerlink" title="二、分析请求"></a>二、分析请求</h5><p>（1）选中当前网络请求，然后单击<strong>“Headers”选项</strong>获取网络请求地址。如下图所示：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.qingjiaoclass.com/gdlzpoyzbkrj/20210825/jyqngavd_v5qwadMMOLzkxlJnUxts#business_type=upload_markdown"
                      alt="img"
                ></p>
<p>可以看到，这是一个 <strong>GET 请求</strong>，<strong>请求 URL 的参数有 ck、for_mobile、start 和 count</strong>。我们需要找出这些参数的规律，因为这样才可以方便地用程序构造出来。</p>
<p>（2）这里观察一下后续链接的参数，发现变化的参数只有 <strong>start</strong>，其它参数都没有变化，而且第二次请求的 start 值为20，第三次为40，第四次为60，所以可以发现规律，这个 <strong>start</strong> 值就是偏移量，进而可以推断出 <strong>count 参数</strong>就是一次性获取的数据条数。因此，我们可以<strong>用 start 参数来控制数据分页</strong>。另外，从第二页开始还多了一个值为 default 的 nav 参数。如下图所示：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.qingjiaoclass.com/gdlzpoyzbkrj/20210825/jyqngavd_36HAKGD8hL9CgddPYYOL#business_type=upload_markdown"
                      alt="img"
                ></p>
<h5 id="编写爬取豆瓣网社会热点数据的代码"><a href="#编写爬取豆瓣网社会热点数据的代码" class="headerlink" title="编写爬取豆瓣网社会热点数据的代码"></a>编写爬取豆瓣网社会热点数据的代码</h5><p>（1）在**<code>/home/qingjiao</code> 目录** 下创建一个名为 <strong>hotspots.py</strong> 的文件，将代码写入此 Python 文件中。</p>
<p>（2）导入<strong>请求模块<code>requests</code></strong> 和 <strong><code>urllib.parse</code> 模块</strong>中的 <strong><code>urlencode()</code> 函数</strong>。</p>
<p>（3）使用 <strong><code>headers</code></strong> 定义请求头信息，参数为字典类型。使用 <strong><code>User-Agent</code></strong> 来伪装成 Chrome 浏览器。使用 <strong><code>Referer</code><strong>设置当前请求页面的来源页面地址。（提示：选中任意一次网络请求，然后单击</strong>“Headers”选项</strong>获取 <code>Referer</code> 的值。）</p>
<p>（4）创建请求页面函数 **<code>get_page()</code>**，用来加载单个 Ajax 请求的结果，返回 JSON 字符串。在函数中：</p>
<ul>
<li>定义请求 URL 的参数，使用 <strong><code>start</code> 参数</strong>来控制数据分页，其它都是固定参数。</li>
<li>使用 <strong><code>urlencode()</code> 函数</strong>将定义的 URL 参数转换为 URL 的 GET 请求参数，即类似于<code>ck=null&amp;for_mobile=1&amp;start=20&amp;count=20&amp;nav=default</code> 这样的形式，然后<strong>将请求 URL 的前半部分与参数拼合形成一个新的 URL</strong>；</li>
<li>使用 <strong><code>requests.get()</code> 函数****实现网络请求的发送</strong>，如果返回状态码为200，则调用 <strong><code>response</code> 的 <code>json()</code> 函数</strong>将结果转为 JSON 格式后返回，否则返回“请求索引页错误！！！”的信息。如果出现异常，则捕获并输出其异常信息。参考代码如下：</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求页面的函数，加载单个Ajax请求的结果，返回JSON字符串</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">start</span>):</span><br><span class="line">    <span class="comment"># 请求URL的参数，使用start参数来控制数据分页，其它都是固定参数</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;ck&#x27;</span>: ？？？</span><br><span class="line">        <span class="string">&#x27;for_mobile&#x27;</span>: ？？？,</span><br><span class="line">        <span class="string">&#x27;start&#x27;</span>: ？？？,</span><br><span class="line">        <span class="string">&#x27;count&#x27;</span>: ？？？,</span><br><span class="line">        <span class="string">&#x27;nav&#x27;</span>: ？？？</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 构造成一个完整的URL</span></span><br><span class="line">    <span class="comment"># urlencode()函数的功能：将存入的字典参数编码为URL查询字符串，即转换成以key1=value1&amp;key2=value2的形式</span></span><br><span class="line">    url = <span class="string">&#x27;https://m.douban.com/rexxar/api/v2/lembas/channel/27625724/feed?&#x27;</span> + ？？？</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = ？？？  <span class="comment"># 发送网络请求</span></span><br><span class="line">        <span class="keyword">if</span> ？？？ == <span class="number">200</span>:  <span class="comment"># 判断请求是否成功</span></span><br><span class="line">            <span class="keyword">return</span> ？？？  <span class="comment"># 返回JSON信息</span></span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请求索引页错误！！！&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>（5）创建名为 <strong><code>get_hotspots()</code><strong>的解析函数，用来解析提取豆瓣网社会热点网页返回的 JSON 文本。在该函数中，使用字典的</strong><code>get()</code> 函数</strong>获取指定键的值。最后，使用 <strong><code>yield</code></strong> 返回一个生成器对象，将获取的热点标题、链接、创建时间、喜欢数、回应数、作者姓名和作者主页链接一并返回。参考代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实现豆瓣网社会热点网页解析函数，提取每条热点的标题、链接、创建时间、喜欢数、回应数、作者姓名和作者主页链接</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hotspots</span>(<span class="params">hotspots_json</span>):</span><br><span class="line">    <span class="keyword">if</span> hotspots_json.？？？(<span class="string">&#x27;items&#x27;</span>):  <span class="comment"># 判断JSON数据（字典）中是否包含&#x27;items&#x27;标签</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> hotspots_json.？？？(<span class="string">&#x27;items&#x27;</span>):  <span class="comment"># 遍历列表，获取列表元素</span></span><br><span class="line">            hotspots_title = ？？？  <span class="comment"># 热点标题</span></span><br><span class="line">            hotspots_url = ？？？  <span class="comment"># 热点链接</span></span><br><span class="line">            create_time = ？？？ <span class="comment"># 创建时间</span></span><br><span class="line">            likers_count = ？？？  <span class="comment"># 喜欢数</span></span><br><span class="line">            comments_count =？？？  <span class="comment"># 回应数</span></span><br><span class="line">            authors = ？？？  <span class="comment"># 作者信息，dict字典类型</span></span><br><span class="line">            <span class="keyword">if</span> authors:  <span class="comment"># 如果有作者信息</span></span><br><span class="line">                author = ？？？  <span class="comment"># 作者姓名</span></span><br><span class="line">                author_url = ？？？  <span class="comment"># 作者主页</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                author = <span class="literal">None</span></span><br><span class="line">                author_url = <span class="literal">None</span></span><br><span class="line">            ？？？&#123;  <span class="comment"># 返回一个生成器对象，将获取的热点信息一并返回</span></span><br><span class="line">                <span class="string">&#x27;hotspots_title&#x27;</span>: hotspots_title,</span><br><span class="line">                <span class="string">&#x27;hotspots_url&#x27;</span>: hotspots_url,</span><br><span class="line">                <span class="string">&#x27;create_time&#x27;</span>: create_time,</span><br><span class="line">                <span class="string">&#x27;likers_count&#x27;</span>: likers_count,</span><br><span class="line">                <span class="string">&#x27;comments_count&#x27;</span>: comments_count,</span><br><span class="line">                <span class="string">&#x27;author&#x27;</span>: author,</span><br><span class="line">                <span class="string">&#x27;author_url&#x27;</span>: author_url</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>

<p>（6）创建程序入口，然后<strong>创建步长为 20 的 for 循环</strong>，并在循环中替换每次请求的 <strong>start 参数</strong>，调用 <strong><code>get_page()</code> 函数</strong>获取 JSON 信息，调用 <strong><code>get_hotspots()</code> 函数</strong>获取社会热点信息。最后，使用 <strong><code>for</code> 循环</strong>遍历生成器，获取 <code>yield</code> 每次返回的值（字典类型），将值打印到控制台。参考代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 程序入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> start <span class="keyword">in</span> ？？？:  <span class="comment"># 每页间隔20，实现循环，共3页</span></span><br><span class="line">        hotspots_json = ？？？  <span class="comment"># 调用请求页面的函数，获取JSON信息</span></span><br><span class="line">        hotspots = ？？？ <span class="comment"># 调用解析函数，获取社会热点信息</span></span><br><span class="line">        <span class="keyword">for</span> hotspot_dict <span class="keyword">in</span> ？？？:  <span class="comment"># 遍历生成器，获取yield每次返回的值（字典类型）</span></span><br><span class="line">            <span class="built_in">print</span>(hotspot_dict)</span><br></pre></td></tr></table></figure></div>

<h5 id="将爬取的豆瓣网社会热点数据保存到本地-JSON-文件"><a href="#将爬取的豆瓣网社会热点数据保存到本地-JSON-文件" class="headerlink" title="将爬取的豆瓣网社会热点数据保存到本地 JSON 文件"></a>将爬取的豆瓣网社会热点数据保存到本地 JSON 文件</h5><p>（1）将以下代码写入 <strong>&#x2F;home&#x2F;qingjiao&#x2F;hotspots.py</strong> Python 文件中。</p>
<p>（2）导入**<code>json</code> 模块**。</p>
<p>（3）创建写入文件函数 **<code>save_as_json()</code>*<em>，将豆瓣网社会热点数据保存到本地 JSON 文件。在该函数中首先通过 <strong><code>open()</code> 函数</strong></em>*创建 <code>open</code> 对象，以追加模式打开文件，编码为“utf-8”**，然后使用 <strong><code>json.dump()</code> 函数</strong>将字典转换为字符串并存储到 JSON 文件中。最后，使用 <strong><code>write()</code> 函数</strong>在每条 JSON 数据结尾换行。参考代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义写入文件函数，将豆瓣社会热点信息写入本地JSON文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_as_json</span>(<span class="params">hotspot_dict, filename</span>):</span><br><span class="line">    <span class="keyword">with</span> ？？？ <span class="keyword">as</span> f:  <span class="comment"># 创建open对象</span></span><br><span class="line">        ？？？  <span class="comment"># 将字典转换为字符串并存储在文件中，ensure_ascii为False，表示将字符按原样输出</span></span><br><span class="line">        ？？？  <span class="comment"># 结尾换行</span></span><br></pre></td></tr></table></figure></div>

<p>（4）在主函数中调用 <strong><code>save_as_json()</code> 函数</strong>将豆瓣网社会热点数据写入本地 <strong><code>/home/qingjiao/hotspots.json</code> 文件</strong>。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题</title>
    <url>/2024/09/01/%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<p>[TOC]</p>
<p><strong>代码保存在账号</strong></p>
<h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><p><strong>简单</strong></p>
<p><strong>中等</strong></p>
<p><strong>困难</strong></p>
<p>[P7051 <a class="link" href="https://www.luogu.com.cn/problem/P7051">NWRRC2015] Distribution in Metagonia - 洛谷 | 计算机科学教育新生态 (luogu.com.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h2><p><strong>简单</strong></p>
<p><strong>中等</strong></p>
<p><strong>困难</strong></p>
<p>[P6934 <a class="link" href="https://www.luogu.com.cn/problem/P6934">ICPC2017 WF] Posterize - 洛谷 | 计算机科学教育新生态 (luogu.com.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://www.luogu.com.cn/problem/solution/CF1256E">CF1256E Yet Another Division Into Teams - 洛谷 | 计算机科学教育新生态 (luogu.com.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://leetcode.cn/problems/shortest-distance-after-road-addition-queries-i/">3243. 新增道路查询后的最短距离 I - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p><strong>简单</strong></p>
<p><strong>中等</strong></p>
<p><strong>困难</strong></p>
<p>[P9612 <a class="link" href="https://www.luogu.com.cn/problem/P9612">CERC2019] Light Emitting Hindenburg - 洛谷 | 计算机科学教育新生态 (luogu.com.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><p><strong>简单</strong></p>
<p><a class="link" href="https://leetcode.cn/problems/maximum-difference-between-adjacent-elements-in-a-circular-array/description/">3423. 循环数组中相邻元素的最大差值 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://leetcode.cn/problems/sum-of-good-numbers/description/">3452. 好数字之和 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>中等</strong></p>
<p><strong>困难</strong></p>
<p><a class="link" href="https://leetcode.cn/problems/image-smoother/solutions/1363215/by-ac_oier-nn3v/">661. 图片平滑器 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><p><strong>简单</strong></p>
<p><strong>中等</strong></p>
<p><strong>困难</strong></p>
<p><a class="link" href="https://leetcode.cn/problems/network-delay-time/description/">743. 网络延迟时间 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h2><p><strong>简单</strong></p>
<p><strong>中等</strong></p>
<p><a class="link" href="https://leetcode.cn/problems/minimum-cost-to-make-arrays-identical/description/">3424. 将数组变相同的最小代价 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>困难</strong></p>
<p><a class="link" href="https://leetcode.cn/problems/smallest-range-covering-elements-from-k-lists/solutions/?envType=daily-question&envId=2024-11-25">632. 最小区间 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p><strong>简单</strong></p>
<p><strong>中等</strong></p>
<p><strong>困难</strong></p>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p><strong>简单</strong></p>
<p><strong>中等</strong></p>
<p><strong>困难</strong><br><a class="link" href="https://leetcode.cn/problems/longest-special-path/description/">3425. 最长特殊路径 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><p><strong>简单</strong></p>
<p><strong>中等</strong></p>
<p><strong>困难</strong></p>
]]></content>
      <categories>
        <category>AC</category>
      </categories>
      <tags>
        <tag>AC</tag>
      </tags>
  </entry>
  <entry>
    <title>java项目</title>
    <url>/2024/11/22/java%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="Java-设计一个简单的增删改查（CRUD）系统并附带一个简易登录界面"><a href="#Java-设计一个简单的增删改查（CRUD）系统并附带一个简易登录界面" class="headerlink" title="Java 设计一个简单的增删改查（CRUD）系统并附带一个简易登录界面"></a>Java 设计一个简单的增删改查（CRUD）系统并附带一个简易登录界面</h2><h3 id="步骤-1：设置数据库"><a href="#步骤-1：设置数据库" class="headerlink" title="步骤 1：设置数据库"></a>步骤 1：设置数据库</h3><ol>
<li>创建一个 MySQL 数据库和表：</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建数据库 myapp</span><br><span class="line">CREATE DATABASE IF NOT EXISTS myapp;</span><br><span class="line"></span><br><span class="line">-- 使用数据库</span><br><span class="line">USE myapp;</span><br><span class="line"></span><br><span class="line">-- 创建 users 表</span><br><span class="line">CREATE TABLE IF NOT EXISTS users (</span><br><span class="line">    id INT AUTO_INCREMENT PRIMARY KEY,        -- 自增 ID</span><br><span class="line">    username VARCHAR(50) NOT NULL UNIQUE,     -- 用户名，唯一</span><br><span class="line">    password VARCHAR(50) NOT NULL             -- 密码</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 插入测试数据</span><br><span class="line">INSERT INTO users (username, password) VALUES </span><br><span class="line">(&#x27;admin&#x27;, &#x27;admin123&#x27;),  -- 测试用户 1</span><br><span class="line">(&#x27;root&#x27;, &#x27;root&#x27;);       -- 测试用户 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE data (</span><br><span class="line">    id INT AUTO_INCREMENT PRIMARY KEY, -- 唯一标识符</span><br><span class="line">    name VARCHAR(50),                  -- 数据名称</span><br><span class="line">    value INT                          -- 数据值</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>查看</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">use myapp;</span><br><span class="line">SHOW TABLES;</span><br><span class="line">SELECT * FROM users;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h3 id="步骤-2：创建-Java-项目结构"><a href="#步骤-2：创建-Java-项目结构" class="headerlink" title="步骤 2：创建 Java 项目结构"></a>步骤 2：创建 Java 项目结构</h3><p>项目结构：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── org.example</span><br><span class="line">    ├── ui/               // 存放界面相关类</span><br><span class="line">    ├── util/             // 存放工具类，如数据库工具</span><br><span class="line">    ├── dao/              // 存放数据访问层（CRUD 操作）</span><br><span class="line">    ├── Main.java         // 程序入口</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h3 id="步骤-3：实现代码"><a href="#步骤-3：实现代码" class="headerlink" title="步骤 3：实现代码"></a>步骤 3：实现代码</h3>]]></content>
      <categories>
        <category>开发</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title>记忆化递归</title>
    <url>/2024/12/07/%E8%AE%B0%E5%BF%86%E5%8C%96%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<p><a class="link" href="https://leetcode.cn/problems/VvJkup/description/">LCR 083. 全排列 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">permute</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        ans = []</span><br><span class="line">        path = [<span class="number">0</span>] * n</span><br><span class="line">        on_path = [<span class="literal">False</span>] * n</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                ans.append(path.copy())</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> j, on <span class="keyword">in</span> <span class="built_in">enumerate</span>(on_path):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> on:</span><br><span class="line">                    path[i] = nums[j]</span><br><span class="line">                    on_path[j] = <span class="literal">True</span></span><br><span class="line">                    dfs(i + <span class="number">1</span>)</span><br><span class="line">                    on_path[j] = <span class="literal">False</span>  <span class="comment"># 恢复现场</span></span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p><a class="link" href="https://leetcode.cn/problems/n-queens/solutions/2079586/hui-su-tao-lu-miao-sha-nhuang-hou-shi-pi-mljv/">51. N 皇后 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solveNQueens</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        ans = []</span><br><span class="line">        queens = [<span class="number">0</span>] * n  <span class="comment"># 皇后放在 (r,queens[r])</span></span><br><span class="line">        col = [<span class="literal">False</span>] * n</span><br><span class="line">        diag1 = [<span class="literal">False</span>] * (n * <span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line">        diag2 = [<span class="literal">False</span>] * (n * <span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">r: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> r == n:</span><br><span class="line">                ans.append([<span class="string">'.'</span> * c + <span class="string">'Q'</span> + <span class="string">'.'</span> * (n - <span class="number">1</span> - c) <span class="keyword">for</span> c <span class="keyword">in</span> queens])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 在 (r,c) 放皇后</span></span><br><span class="line">            <span class="keyword">for</span> c, ok <span class="keyword">in</span> <span class="built_in">enumerate</span>(col):<span class="comment">######</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">and</span> <span class="keyword">not</span> diag1[r + c] <span class="keyword">and</span> <span class="keyword">not</span> diag2[r - c]:  <span class="comment"># 判断能否放皇后</span></span><br><span class="line">                    queens[r] = c  <span class="comment"># 直接覆盖，无需恢复现场</span></span><br><span class="line">                    col[c] = diag1[r + c] = diag2[r - c] = <span class="literal">True</span>  <span class="comment"># 皇后占用了 c 列和两条斜线</span></span><br><span class="line">                    dfs(r + <span class="number">1</span>)</span><br><span class="line">                    col[c] = diag1[r + c] = diag2[r - c] = <span class="literal">False</span>  <span class="comment"># 恢复现场</span></span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure></div>



<p><a class="link" href="https://leetcode.cn/problems/number-of-valid-move-combinations-on-chessboard/description/">2056. 棋盘上有效移动组合的数目 - 力扣（LeetCode） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>AC</category>
        <category>题型</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>记忆化递归</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/2025/02/19/%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>模板</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binarySearch</span>(<span class="params">nums, target</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :type nums: List[int]</span></span><br><span class="line"><span class="string">    :type target: int</span></span><br><span class="line"><span class="string">    :rtype: int</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span><span class="comment">###</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid - <span class="number">1</span><span class="comment">###</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># End Condition: left &gt; right</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>AC</category>
        <category>题型</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>比赛时好用的函数</title>
    <url>/2025/02/02/%E6%AF%94%E8%B5%9B%E6%97%B6%E5%A5%BD%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = datetime.datetime.strptime(s, &quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">e = datetime.datetime.strptime(e, &quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">diff = e - s</span><br><span class="line"></span><br><span class="line">delta=diff.total_seconds()//60%int(times)</span><br><span class="line">print(str(e-datetime.timedelta(minutes=delta)))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>让字符串x的每一位相乘</p>
<h4 id="reduce-mul-map-int-str-x"><a href="#reduce-mul-map-int-str-x" class="headerlink" title="reduce(mul, map(int, str(x)))"></a>reduce(mul, map(int, str(x)))</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line">prod = reduce(mul, map(int, str(x)))</span><br></pre></td></tr></table></figure></div>



<p>组合</p>
<h4 id="combinations"><a href="#combinations" class="headerlink" title="combinations"></a>combinations</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from itertools import combinations</span><br></pre></td></tr></table></figure></div>



<h3 id="开最大递归深度"><a href="#开最大递归深度" class="headerlink" title="开最大递归深度"></a>开最大递归深度</h3><h5 id="sys-setrecursionlimit-60000"><a href="#sys-setrecursionlimit-60000" class="headerlink" title="sys.setrecursionlimit(60000)"></a>sys.setrecursionlimit(60000)</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sys.setrecursionlimit(60000)</span><br></pre></td></tr></table></figure></div>



<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="str-replace-i-’’"><a href="#str-replace-i-’’" class="headerlink" title="str.replace(i,’’)"></a>str.replace(i,’’)</h4><p>字符串里面有替换函数(‘’内填替换成什么</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">str.replace(i,&#x27;&#x27;)</span><br></pre></td></tr></table></figure></div>

<h4 id="c-for-c-in-a-if-c-not-in-b"><a href="#c-for-c-in-a-if-c-not-in-b" class="headerlink" title="(c for c in a if c not in b)"></a>(c for c in a if c not in b)</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">result = &#x27;&#x27;.join(c for c in a if c not in b)   括号里面是一个数据，可以用语句来</span><br></pre></td></tr></table></figure></div>

<h4 id="upper"><a href="#upper" class="headerlink" title=".upper"></a>.upper</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.upper 可以把字母变成大写</span><br></pre></td></tr></table></figure></div>



<h3 id="对数据的操作"><a href="#对数据的操作" class="headerlink" title="对数据的操作"></a>对数据的操作</h3><h4 id="bit-length"><a href="#bit-length" class="headerlink" title="bit_length()"></a>bit_length()</h4><p> Python 中整数类型的一个方法，返回该整数在二进制表示下的 <strong>最少位数</strong>（不包括符号位和前导零）。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 的二进制是 101，bit_length() 返回 3。</span><br><span class="line"></span><br><span class="line">16 的二进制是 10000，bit_length() 返回 5。</span><br></pre></td></tr></table></figure></div>





<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h5 id="pairwise"><a href="#pairwise" class="headerlink" title="pairwise"></a>pairwise</h5><p>循环，迭代器，连续赋值两个连续的单位</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from itertools import pairwise</span><br><span class="line"></span><br><span class="line">nums=[1,2,3]</span><br><span class="line">for x,y in pairwise(nums):</span><br><span class="line">    print(x,y)</span><br><span class="line"></span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h5 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h5><p>两个数组同时赋值</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">for x,y in zip(sorted(arr)</span><br></pre></td></tr></table></figure></div>





<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="创建一个以-int-为默认值字典-defaultdict-int"><a href="#创建一个以-int-为默认值字典-defaultdict-int" class="headerlink" title="创建一个以 int 为默认值字典 defaultdict(int)"></a>创建一个以 int 为默认值字典 defaultdict(int)</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import defaultdict</span><br><span class="line"></span><br><span class="line">#  defaultdict</span><br><span class="line">cnt = defaultdict(int)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p>二维列表排序</p>
<p>加负号逆序，可以有两个参数，但是参数先后有讲究</p>
<h4 id="array-sort-key-lambda-x-x-1"><a href="#array-sort-key-lambda-x-x-1" class="headerlink" title="array.sort(key&#x3D;lambda x: -x[1])"></a>array.sort(key&#x3D;lambda x: -x[1])</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建一个二维数组</span><br><span class="line">array = [[1, 2], [2, 1], [4, 1]]</span><br><span class="line"></span><br><span class="line"># 按第二列的值进行降序排序</span><br><span class="line">array.sort(key=lambda x: -x[1])</span><br><span class="line">print(array)  # 输出: [[1, 2], [4, 1], [2, 1]]</span><br><span class="line">  </span><br></pre></td></tr></table></figure></div>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h4 id="product函数"><a href="#product函数" class="headerlink" title="product函数"></a>product函数</h4><p>生成一个二维笛卡尔积，表示所有可能的二维向量组合</p>
<p>将列表 <code>[-1, 0, 1]</code> 复制两次，生成一个列表的列表：<code>[[-1, 0, 1], [-1, 0, 1]]</code>。</p>
<p>这表示两个维度（二维），每个维度的取值范围都是[−1,0,1]。</p>
<p>*<code>解包运算符将</code>[[−1, 0, 1], [−1, 0, 1]]<code>解包为两个单独的参数传递给</code>product</p>
<p>也就是product([-1, 0, 1], [-1, 0, 1])</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">list(product(*[[-1,0,1]] * 2))</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">[</span><br><span class="line">    (-1, -1), (-1, 0), (-1, 1),</span><br><span class="line">    (0, -1), (0, 0), (0, 1),</span><br><span class="line">    (1, -1), (1, 0), (1, 1)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2025/02/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="普通树"><a href="#普通树" class="headerlink" title="普通树"></a>普通树</h2><h4 id="邻接表存有权树"><a href="#邻接表存有权树" class="headerlink" title="邻接表存有权树"></a>邻接表存有权树</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">g = [[] for _ in nums]</span><br><span class="line">for x, y, w in edges:</span><br><span class="line">	g[x].append((y, w))</span><br><span class="line">	g[y].append((x, w))</span><br><span class="line"></span><br><span class="line">        </span><br></pre></td></tr></table></figure></div>

<h4 id="树的搜索"><a href="#树的搜索" class="headerlink" title="树的搜索"></a>树的搜索</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">for y, w in g[x]:</span><br><span class="line">	dis.append(dis[-1] + w)</span><br><span class="line">	dfs(y, x, top_depth)</span><br><span class="line">	dis.pop()  # 恢复现场</span><br><span class="line">	last_depth[color] = old_depth  # 恢复现场</span><br><span class="line">                </span><br></pre></td></tr></table></figure></div>



<h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">MAX_X = <span class="number">32001</span> <span class="comment"># from [0, 32000]==&gt;[1, 32001]</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    树状数组板子</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">tree = [<span class="number">0</span>]*(MAX_X+<span class="number">1</span>) <span class="comment"># 树状数组 from 1-&gt;n</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lowbit</span>(<span class="params">x</span>):<span class="comment">#看二进制后缀0</span></span><br><span class="line">    <span class="keyword">return</span> x&amp;-x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, value</span>):<span class="comment">#更新线段树</span></span><br><span class="line">    <span class="keyword">while</span> x&lt;=MAX_X:</span><br><span class="line">        tree[x] += value</span><br><span class="line">        x += lowbit(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sum</span>(<span class="params">x</span>):<span class="comment">#遍历线段树，求区间和</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> x&gt;=<span class="number">1</span>:<span class="comment">#一般不从0</span></span><br><span class="line">        res += tree[x]</span><br><span class="line">        x -= lowbit(x)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> typing</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LazySegTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">            self,</span></span><br><span class="line"><span class="params">            op: typing.<span class="type">Callable</span>[[typing.<span class="type">Any</span>, typing.<span class="type">Any</span>], typing.<span class="type">Any</span>],</span></span><br><span class="line"><span class="params">            e: typing.<span class="type">Any</span>,</span></span><br><span class="line"><span class="params">            mapping: typing.<span class="type">Callable</span>[[typing.<span class="type">Any</span>, typing.<span class="type">Any</span>], typing.<span class="type">Any</span>],</span></span><br><span class="line"><span class="params">            composition: typing.<span class="type">Callable</span>[[typing.<span class="type">Any</span>, typing.<span class="type">Any</span>], typing.<span class="type">Any</span>],</span></span><br><span class="line"><span class="params">            id_: typing.<span class="type">Any</span>,</span></span><br><span class="line"><span class="params">            v: typing.<span class="type">Union</span>[<span class="built_in">int</span>, typing.<span class="type">List</span>[typing.<span class="type">Any</span>]]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self._op = op <span class="comment"># 线段树的合并操作，例如：max,add,gcd</span></span><br><span class="line">        self._e = e <span class="comment"># 线段树的值的幺元，默认大小</span></span><br><span class="line">        self._mapping = mapping <span class="comment"># 父结点的懒标记更新子结点的值，区间修改 F(映射) 的方法，定义 def mapping(x,y):</span></span><br><span class="line">        self._composition = composition <span class="comment"># 父结点的懒标记更新子结点的懒标记，区间修改 F 的条件，定义 def composition(x,y): (懒标记相关）</span></span><br><span class="line">        self._<span class="built_in">id</span> = id_ <span class="comment"># 更新操作/懒标记的幺元，恒等映射id(F作用于None得到的返回值)，例如：add的id_ = 0,max的id_ = -inf</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">int</span>): <span class="comment"># 原数组（如果输入int则表示数组长度，用幺元生成数组）</span></span><br><span class="line">            v = [e] * v</span><br><span class="line"></span><br><span class="line">        self._n = <span class="built_in">len</span>(v)</span><br><span class="line">        self._log = (self._n - <span class="number">1</span>).bit_length()</span><br><span class="line">        self._size = <span class="number">1</span> &lt;&lt; self._log</span><br><span class="line">        self._d = [e] * (<span class="number">2</span> * self._size)</span><br><span class="line">        self._lz = [self._<span class="built_in">id</span>] * self._size</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self._n):</span><br><span class="line">            self._d[self._size + i] = v[i]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self._size - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            self._update(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单点修改，修改a[p] = x，复杂度：o(logn)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, p: <span class="built_in">int</span>, x: typing.<span class="type">Any</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= p &lt; self._n</span><br><span class="line"></span><br><span class="line">        p += self._size</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self._log, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            self._push(p &gt;&gt; i)</span><br><span class="line">        self._d[p] = x</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self._log + <span class="number">1</span>):</span><br><span class="line">            self._update(p &gt;&gt; i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单点查询，返回a[p]，复杂度：o(1)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, p: <span class="built_in">int</span></span>) -&gt; typing.<span class="type">Any</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= p &lt; self._n</span><br><span class="line"></span><br><span class="line">        p += self._size</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self._log, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            self._push(p &gt;&gt; i)</span><br><span class="line">        <span class="keyword">return</span> self._d[p]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 区间查询，返回op(a[l],……,a[r-1])，复杂度：o(logn)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prod</span>(<span class="params">self, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; typing.<span class="type">Any</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= left &lt;= right &lt;= self._n</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> left == right:</span><br><span class="line">            <span class="keyword">return</span> self._e</span><br><span class="line"></span><br><span class="line">        left += self._size</span><br><span class="line">        right += self._size</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self._log, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> ((left &gt;&gt; i) &lt;&lt; i) != left:</span><br><span class="line">                self._push(left &gt;&gt; i)</span><br><span class="line">            <span class="keyword">if</span> ((right &gt;&gt; i) &lt;&lt; i) != right:</span><br><span class="line">                self._push(right &gt;&gt; i)</span><br><span class="line"></span><br><span class="line">        sml = self._e</span><br><span class="line">        smr = self._e</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">if</span> left &amp; <span class="number">1</span>:</span><br><span class="line">                sml = self._op(sml, self._d[left])</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> right &amp; <span class="number">1</span>:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">                smr = self._op(self._d[right], smr)</span><br><span class="line">            left &gt;&gt;= <span class="number">1</span></span><br><span class="line">            right &gt;&gt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self._op(sml, smr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回op(a[0], ..., a[n - 1])，复杂度：o(1)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">all_prod</span>(<span class="params">self</span>) -&gt; typing.<span class="type">Any</span>:</span><br><span class="line">        <span class="keyword">return</span> self._d[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 区间修改，</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">apply</span>(<span class="params">self, left: <span class="built_in">int</span>, right: typing.<span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">              f: typing.<span class="type">Optional</span>[typing.<span class="type">Any</span>] = <span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">assert</span> f <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            p = left</span><br><span class="line">            <span class="keyword">assert</span> <span class="number">0</span> &lt;= left &lt; self._n</span><br><span class="line"></span><br><span class="line">            p += self._size</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self._log, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">                self._push(p &gt;&gt; i)</span><br><span class="line">            self._d[p] = self._mapping(f, self._d[p])</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self._log + <span class="number">1</span>):</span><br><span class="line">                self._update(p &gt;&gt; i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="number">0</span> &lt;= left &lt;= right &lt;= self._n</span><br><span class="line">            <span class="keyword">if</span> left == right:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            left += self._size</span><br><span class="line">            right += self._size</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self._log, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> ((left &gt;&gt; i) &lt;&lt; i) != left:</span><br><span class="line">                    self._push(left &gt;&gt; i)</span><br><span class="line">                <span class="keyword">if</span> ((right &gt;&gt; i) &lt;&lt; i) != right:</span><br><span class="line">                    self._push((right - <span class="number">1</span>) &gt;&gt; i)</span><br><span class="line"></span><br><span class="line">            l2 = left</span><br><span class="line">            r2 = right</span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                <span class="keyword">if</span> left &amp; <span class="number">1</span>:</span><br><span class="line">                    self._all_apply(left, f)</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> right &amp; <span class="number">1</span>:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                    self._all_apply(right, f)</span><br><span class="line">                left &gt;&gt;= <span class="number">1</span></span><br><span class="line">                right &gt;&gt;= <span class="number">1</span></span><br><span class="line">            left = l2</span><br><span class="line">            right = r2</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self._log + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> ((left &gt;&gt; i) &lt;&lt; i) != left:</span><br><span class="line">                    self._update(left &gt;&gt; i)</span><br><span class="line">                <span class="keyword">if</span> ((right &gt;&gt; i) &lt;&lt; i) != right:</span><br><span class="line">                    self._update((right - <span class="number">1</span>) &gt;&gt; i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_update</span>(<span class="params">self, k: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self._d[k] = self._op(self._d[<span class="number">2</span> * k], self._d[<span class="number">2</span> * k + <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_all_apply</span>(<span class="params">self, k: <span class="built_in">int</span>, f: typing.<span class="type">Any</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self._d[k] = self._mapping(f, self._d[k])</span><br><span class="line">        <span class="keyword">if</span> k &lt; self._size:</span><br><span class="line">            self._lz[k] = self._composition(f, self._lz[k])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_push</span>(<span class="params">self, k: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self._all_apply(<span class="number">2</span> * k, self._lz[k])</span><br><span class="line">        self._all_apply(<span class="number">2</span> * k + <span class="number">1</span>, self._lz[k])</span><br><span class="line">        self._lz[k] = self._<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">separateSquares</span>(<span class="params">self, squares: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        xs = []</span><br><span class="line">        events = []</span><br><span class="line">        <span class="keyword">for</span> (lx, ly, l) <span class="keyword">in</span> squares:</span><br><span class="line">            rx = lx + l</span><br><span class="line">            ry = ly + l</span><br><span class="line">            xs.append(lx)</span><br><span class="line">            xs.append(rx)</span><br><span class="line">            events.append((ly, lx, rx, <span class="number">1</span>))</span><br><span class="line">            events.append((ry, lx, rx, -<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        xs = <span class="built_in">sorted</span>(<span class="built_in">set</span>(xs)) <span class="comment"># 排序，方便离散化</span></span><br><span class="line">        events.sort() <span class="comment"># 模拟扫描线从下往上移动</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">op</span>(<span class="params">x: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>], y: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]</span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span><br><span class="line">            minCoverLen1, minCover1 = x</span><br><span class="line">            minCoverLen2, minCover2 = y</span><br><span class="line">            <span class="keyword">if</span> minCover1 &lt; minCover2:</span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line">            <span class="keyword">if</span> minCover1 &gt; minCover2:</span><br><span class="line">                <span class="keyword">return</span> y</span><br><span class="line">            <span class="keyword">return</span> minCoverLen1 + minCoverLen2, minCover1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">mapping</span>(<span class="params">x: <span class="built_in">int</span>, y: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]</span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span><br><span class="line">            <span class="keyword">return</span> y[<span class="number">0</span>], y[<span class="number">1</span>] + x</span><br><span class="line"></span><br><span class="line">        a = [(y - x, <span class="number">0</span>) <span class="keyword">for</span> x, y <span class="keyword">in</span> pairwise(xs)]</span><br><span class="line">        st = LazySegTree(op, (<span class="number">0</span>, <span class="number">0</span>), mapping, add, <span class="number">0</span>, a) <span class="comment"># 初始化线段树</span></span><br><span class="line">        totx = xs[-<span class="number">1</span>] - xs[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        records = []</span><br><span class="line">        tot_area = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (y, lx, rx, delta), e2 <span class="keyword">in</span> pairwise(events):</span><br><span class="line">            l = bisect_left(xs, lx)         <span class="comment"># 离散化</span></span><br><span class="line">            r = bisect_left(xs, rx) - <span class="number">1</span>     <span class="comment"># r 对应着 xs[r] 与 xs[r + 1] == rx 的差值</span></span><br><span class="line">            st.apply(l, r + <span class="number">1</span>, delta)       <span class="comment"># 更新被 [lx, rx] 覆盖的次数</span></span><br><span class="line">            minCoverLen, minCover = st.all_prod()</span><br><span class="line">            sum_len = totx - (<span class="number">0</span> <span class="keyword">if</span> minCover <span class="keyword">else</span> minCoverLen) <span class="comment"># 减去没被矩形覆盖的长度</span></span><br><span class="line">            records.append((tot_area, sum_len))  <span class="comment"># 记录关键数据</span></span><br><span class="line">            tot_area += sum_len * (e2[<span class="number">0</span>] - y)    <span class="comment"># 新增面积 = 被至少一个矩形覆盖的底边长之和 * 矩形高度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 二分找最后一个 &lt; tot_area / 2 的面积</span></span><br><span class="line">        i = bisect_left(records, tot_area, key=<span class="keyword">lambda</span> r: r[<span class="number">0</span>] * <span class="number">2</span>) - <span class="number">1</span></span><br><span class="line">        area, sum_len = records[i]</span><br><span class="line">        <span class="keyword">return</span> events[i][<span class="number">0</span>] + (tot_area - area * <span class="number">2</span>) / (sum_len * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>用来优化的算法</title>
    <url>/2025/02/19/%E7%94%A8%E6%9D%A5%E4%BC%98%E5%8C%96%E7%9A%84%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2>]]></content>
      <categories>
        <category>AC</category>
        <category>题型</category>
      </categories>
      <tags>
        <tag>KMP</tag>
      </tags>
  </entry>
</search>
